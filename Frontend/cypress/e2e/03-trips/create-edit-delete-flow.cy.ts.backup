describe('Complete Trip Flow: Create, Edit, Filter, Delete', () => {
  beforeEach(() => {
    cy.loginViaKeycloak('test.user', 'password123')
  })

  it('should complete full trip lifecycle with filters', () => {
    // 1. Navigate to trips page
    cy.visit('/trips')
    cy.get('[data-testid="trips-page"]', { timeout: 15000 }).should('be.visible')
    
    // 2. Create a new trip
    cy.contains('Crear Viaje').click()
    
    // Fill trip form with valid data
    cy.get('input[type="number"][placeholder="40.4168"]').clear().type('41.3851')
    cy.get('input[type="number"][placeholder="-3.7038"]').clear().type('2.1734')
    cy.get('select').first().select('TO_SEDE')
    cy.get('select').eq(1).select('SEDE-1')
    
    // Set future date and time
    const futureDate = new Date()
    futureDate.setDate(futureDate.getDate() + 1)
    futureDate.setHours(8, 30, 0, 0)
    const dateTimeString = futureDate.toISOString().slice(0, 16)
    cy.get('input[type="datetime-local"]').clear().type(dateTimeString)
    
    cy.get('input[type="number"][min="1"][max="8"]').clear().type('4')
    
    // Submit form
    cy.contains('Crear').click()
    
    // 3. Verify trip appears in list
    cy.contains('Viaje creado exitosamente').should('be.visible')
    cy.get('.space-y-6').should('exist')
    cy.contains('SEDE-1').should('be.visible')
    cy.contains('4 asientos').should('be.visible')
    
    // 4. Apply status filter (ACTIVE)
    cy.get('select').first().select('ACTIVE')
    cy.contains('Buscar').click()
    
    // Verify filtered results
    cy.get('body').then(($body) => {
      if ($body.text().includes('No se encontraron viajes')) {
        cy.contains('No se encontraron viajes').should('be.visible')
      } else {
        cy.get('.space-y-6').should('exist')
      }
    })
    
    // 5. Apply destination filter
    cy.get('select').eq(1).select('SEDE-1')
    cy.contains('Buscar').click()
    
    // Verify destination filter works
    cy.get('body').then(($body) => {
      if ($body.text().includes('No se encontraron viajes')) {
        cy.contains('No se encontraron viajes').should('be.visible')
      } else {
        cy.get('.space-y-6').should('exist')
        // If there are results, they should be for SEDE-1
        cy.get('.space-y-6').within(() => {
          cy.contains('SEDE-1').should('be.visible')
        })
      }
    })
    
    // 6. Apply date range filter
    const today = new Date()
    const tomorrow = new Date()
    tomorrow.setDate(today.getDate() + 2)
    
    const fromDate = today.toISOString().slice(0, 10)
    const toDate = tomorrow.toISOString().slice(0, 10)
    
    cy.get('input[type="date"]').first().clear().type(fromDate)
    cy.get('input[type="date"]').last().clear().type(toDate)
    cy.contains('Buscar').click()
    
    // 7. Edit the trip
    cy.get('body').then(($body) => {
      if (!$body.text().includes('No tienes viajes creados')) {
        // Click edit button on first trip
        cy.contains('Editar').first().click()
        
        // Modal should open
        cy.get('.fixed.inset-0').should('be.visible')
        cy.contains('Editar Viaje').should('be.visible')
        
        // Update seats to 5
        cy.get('input[type="number"][min="1"][max="8"]').clear().type('5')
        
        // Submit update
        cy.contains('Editar').click()
        
        // Verify update success
        cy.contains('Viaje actualizado exitosamente').should('be.visible')
        
        // Verify trip shows updated seats
        cy.contains('5 asientos').should('be.visible')
      }
    })
    
    // 8. Clear all filters
    cy.contains('Limpiar filtros').click()
    
    // Verify filters are reset
    cy.get('select').first().should('have.value', '')
    cy.get('select').eq(1).should('have.value', '')
    cy.get('input[type="date"]').first().should('have.value', '')
    cy.get('input[type="date"]').last().should('have.value', '')
    
    // 9. Delete the trip
    cy.get('body').then(($body) => {
      if (!$body.text().includes('No tienes viajes creados')) {
        // Click delete button on first trip
        cy.contains('Cancelar').first().click()
        
        // Confirm deletion
        cy.window().then((win) => {
          cy.stub(win, 'confirm').returns(true)
        })
        
        // Click delete again to trigger confirmation
        cy.contains('Cancelar').first().click()
        
        // Verify deletion success
        cy.contains('Viaje cancelado exitosamente').should('be.visible')
        
        // Verify trip is removed from list
        cy.contains('No tienes viajes creados').should('be.visible')
      }
    })
  })
  
  it('should handle empty state when no trips exist', () => {
    // Navigate to trips page
    cy.visit('/trips')
    cy.get('[data-testid="trips-page"]', { timeout: 15000 }).should('be.visible')
    
    // Check if empty state is shown
    cy.get('body').then(($body) => {
      if ($body.text().includes('No tienes viajes creados')) {
        cy.contains('No tienes viajes creados').should('be.visible')
        cy.contains('Crear tu primer viaje').should('be.visible')
      }
    })
  })
  
  it('should persist filters during navigation', () => {
    // Navigate to trips page
    cy.visit('/trips')
    cy.get('[data-testid="trips-page"]', { timeout: 15000 }).should('be.visible')
    
    // Apply some filters
    cy.get('select').first().select('ACTIVE')
    cy.get('select').eq(1).select('SEDE-1')
    
    // Navigate away and back
    cy.visit('/matches')
    cy.visit('/trips')
    
    // Verify filters are still applied (if localStorage persistence is implemented)
    // Note: This test might need adjustment based on actual implementation
    cy.get('[data-testid="trips-page"]').should('be.visible')
  })
})
