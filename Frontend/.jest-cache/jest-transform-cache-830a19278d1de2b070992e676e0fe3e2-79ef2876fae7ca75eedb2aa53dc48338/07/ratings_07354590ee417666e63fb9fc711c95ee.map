{"file":"/Users/admin/Documents/AI4Devs-finalproject/Frontend/src/api/ratings.ts","mappings":";;;;;;AAAA,kDAA0B;AAC1B,gCAA6B;AAC7B,+CAA+C;AAE/C,wDAAwD;AACxD,MAAM,QAAQ,GAAG,eAAK,CAAC,MAAM,CAAC;IAC5B,OAAO,EAAE,SAAG,CAAC,eAAe;CAC7B,CAAC,CAAC;AAEH,uBAAuB;AACvB,QAAQ,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;IACjD,MAAM,QAAQ,GAAG,IAAA,sBAAW,GAAE,CAAC;IAC/B,IAAI,QAAQ,EAAE,aAAa,IAAI,QAAQ,CAAC,KAAK,EAAE,CAAC;QAC9C,MAAM,CAAC,OAAO,CAAC,aAAa,GAAG,UAAU,QAAQ,CAAC,KAAK,EAAE,CAAC;IAC5D,CAAC;IACD,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC,CAAC;AA8BH,MAAa,cAAc;IACzB;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,MAAuB;QAC/C,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;QACzD,OAAO,QAAQ,CAAC,IAAI,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,YAAY;QACvB,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QAC3D,OAAO,QAAQ,CAAC,IAAI,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,iBAAiB,CAAC,MAAc;QAC3C,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,GAAG,CAAC,iBAAiB,MAAM,EAAE,CAAC,CAAC;QAC/D,OAAO,QAAQ,CAAC,IAAI,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,MAAc;QACvC,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,GAAG,CAAC,iBAAiB,MAAM,cAAc,CAAC,CAAC;QAC3E,OAAO,QAAQ,CAAC,IAAI,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,MAAc;QACvC,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,GAAG,CAAC,iBAAiB,MAAM,cAAc,CAAC,CAAC;QAC3E,OAAO,QAAQ,CAAC,IAAI,CAAC;IACvB,CAAC;CACF;AAxCD,wCAwCC","names":[],"sources":["/Users/admin/Documents/AI4Devs-finalproject/Frontend/src/api/ratings.ts"],"sourcesContent":["import axios from 'axios';\nimport { env } from '../env';\nimport { getKeycloak } from '../auth/keycloak';\n\n// Create a dedicated client for users service (ratings)\nconst usersApi = axios.create({\n  baseURL: env.usersApiBaseUrl,\n});\n\n// Add auth interceptor\nusersApi.interceptors.request.use(async (config) => {\n  const keycloak = getKeycloak();\n  if (keycloak?.authenticated && keycloak.token) {\n    config.headers.Authorization = `Bearer ${keycloak.token}`;\n  }\n  return config;\n});\n\nexport interface RatingDto {\n  id: string;\n  raterId: string;\n  ratedId: string;\n  tripId?: string;\n  ratingType: 'THUMBS_UP' | 'THUMBS_DOWN';\n  tags: string[];\n  comment?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface RatingCreateDto {\n  ratedId: string;\n  tripId?: string;\n  ratingType: 'THUMBS_UP' | 'THUMBS_DOWN';\n  tags: string[];\n  comment?: string;\n}\n\nexport interface TrustStats {\n  totalRatings: number;\n  thumbsUp: number;\n  thumbsDown: number;\n  trustScore: number;\n  mostCommonTags: string[];\n}\n\nexport class RatingsService {\n  /**\n   * Create a new rating\n   */\n  static async createRating(rating: RatingCreateDto): Promise<RatingDto> {\n    const response = await usersApi.post('/ratings', rating);\n    return response.data;\n  }\n\n  /**\n   * Get ratings given by current user\n   */\n  static async getMyRatings(): Promise<RatingDto[]> {\n    const response = await usersApi.get('/ratings/my-ratings');\n    return response.data;\n  }\n\n  /**\n   * Get ratings received by a specific user\n   */\n  static async getRatingsForUser(userId: string): Promise<RatingDto[]> {\n    const response = await usersApi.get(`/ratings/user/${userId}`);\n    return response.data;\n  }\n\n  /**\n   * Get trust score for a user\n   */\n  static async getTrustScore(userId: string): Promise<number> {\n    const response = await usersApi.get(`/ratings/user/${userId}/trust-score`);\n    return response.data;\n  }\n\n  /**\n   * Get trust statistics for a user\n   */\n  static async getTrustStats(userId: string): Promise<TrustStats> {\n    const response = await usersApi.get(`/ratings/user/${userId}/trust-stats`);\n    return response.data;\n  }\n}\n"],"version":3}