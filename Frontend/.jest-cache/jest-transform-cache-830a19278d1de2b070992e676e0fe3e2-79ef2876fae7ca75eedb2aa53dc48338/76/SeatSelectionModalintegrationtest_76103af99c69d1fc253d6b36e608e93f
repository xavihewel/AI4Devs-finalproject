65214d4dd1af667018c2d407bee6f91f
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
// Mock de useTranslation
jest.mock('react-i18next', () => ({
    useTranslation: () => ({
        t: (key, params) => {
            const translations = {
                'match.selectSeats': 'Select Seats',
                'match.availableSeats': `Available seats: ${params?.seats || 0}`,
                'match.selectSeatsDescription': 'Choose how many seats you want to book',
                'match.selectedSeats': 'Selected seats',
                'match.seat': 'seat',
                'match.seats': 'seats',
                'match.confirmBooking': 'Confirm Booking',
                'common:cancel': 'Cancel'
            };
            return translations[key] || key;
        }
    })
}));
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const user_event_1 = __importDefault(require("@testing-library/user-event"));
const SeatSelectionModal_1 = require("./SeatSelectionModal");
describe('SeatSelectionModal Integration', () => {
    const defaultProps = {
        isOpen: true,
        onClose: jest.fn(),
        onConfirm: jest.fn(),
        maxSeats: 4,
        loading: false
    };
    beforeEach(() => {
        jest.clearAllMocks();
    });
    describe('Complete Booking Flow', () => {
        it('should complete full booking flow with seat selection', async () => {
            const user = user_event_1.default.setup();
            const onConfirm = jest.fn();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(SeatSelectionModal_1.SeatSelectionModal, { ...defaultProps, onConfirm: onConfirm }));
            // Verify modal is open
            expect(react_2.screen.getByText('Select Seats')).toBeInTheDocument();
            expect(react_2.screen.getByText('Available seats: 4')).toBeInTheDocument();
            // Verify seat buttons are rendered
            expect(react_2.screen.getByText('1')).toBeInTheDocument();
            expect(react_2.screen.getByText('2')).toBeInTheDocument();
            expect(react_2.screen.getByText('3')).toBeInTheDocument();
            expect(react_2.screen.getByText('4')).toBeInTheDocument();
            // Verify initial selection
            expect(react_2.screen.getByText('1 seat')).toBeInTheDocument();
            expect(react_2.screen.getByText('1')).toHaveClass('bg-primary-600');
            // Select 3 seats
            const seatButton3 = react_2.screen.getByText('3');
            await user.click(seatButton3);
            // Verify selection updated
            expect(seatButton3).toHaveClass('bg-primary-600');
            expect(react_2.screen.getByText('3 seats')).toBeInTheDocument();
            expect(react_2.screen.queryByText('1 seat')).not.toBeInTheDocument();
            // Confirm booking
            const confirmButton = react_2.screen.getByText('Confirm Booking');
            await user.click(confirmButton);
            // Verify onConfirm was called with correct seats
            expect(onConfirm).toHaveBeenCalledWith(3);
        });
        it('should handle different maxSeats values correctly', () => {
            const { rerender } = (0, react_2.render)((0, jsx_runtime_1.jsx)(SeatSelectionModal_1.SeatSelectionModal, { ...defaultProps, maxSeats: 2 }));
            // Should only show 1 and 2
            expect(react_2.screen.getByText('1')).toBeInTheDocument();
            expect(react_2.screen.getByText('2')).toBeInTheDocument();
            expect(react_2.screen.queryByText('3')).not.toBeInTheDocument();
            expect(react_2.screen.queryByText('4')).not.toBeInTheDocument();
            // Test with 1 seat
            rerender((0, jsx_runtime_1.jsx)(SeatSelectionModal_1.SeatSelectionModal, { ...defaultProps, maxSeats: 1 }));
            expect(react_2.screen.getByText('1')).toBeInTheDocument();
            expect(react_2.screen.queryByText('2')).not.toBeInTheDocument();
            expect(react_2.screen.getByText('1 seat')).toBeInTheDocument();
        });
        it('should handle loading state correctly', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(SeatSelectionModal_1.SeatSelectionModal, { ...defaultProps, loading: true }));
            const confirmButton = react_2.screen.getByText('Confirm Booking');
            const closeButton = react_2.screen.getByText('✕');
            const cancelButton = react_2.screen.getByText('Cancel');
            // All buttons should be disabled
            expect(confirmButton).toBeDisabled();
            expect(closeButton).toBeDisabled();
            expect(cancelButton).toBeDisabled();
            // Should show loading spinner
            expect(confirmButton.querySelector('svg')).toBeInTheDocument();
        });
        it('should handle modal close correctly', async () => {
            const user = user_event_1.default.setup();
            const onClose = jest.fn();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(SeatSelectionModal_1.SeatSelectionModal, { ...defaultProps, onClose: onClose }));
            // Close via X button
            const closeButton = react_2.screen.getByText('✕');
            await user.click(closeButton);
            expect(onClose).toHaveBeenCalledTimes(1);
            // Close via Cancel button
            const cancelButton = react_2.screen.getByText('Cancel');
            await user.click(cancelButton);
            expect(onClose).toHaveBeenCalledTimes(2);
        });
        it('should handle keyboard navigation', async () => {
            const user = user_event_1.default.setup();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(SeatSelectionModal_1.SeatSelectionModal, { ...defaultProps }));
            // Focus on first seat button
            const seatButton1 = react_2.screen.getByText('1');
            seatButton1.focus();
            // Press Enter to select
            await user.keyboard('{Enter}');
            expect(seatButton1).toHaveClass('bg-primary-600');
            // Tab to next button and select
            await user.tab();
            const seatButton2 = react_2.screen.getByText('2');
            await user.keyboard('{Enter}');
            expect(seatButton2).toHaveClass('bg-primary-600');
            expect(seatButton1).not.toHaveClass('bg-primary-600');
        });
        it('should update selection summary when different seats are selected', async () => {
            const user = user_event_1.default.setup();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(SeatSelectionModal_1.SeatSelectionModal, { ...defaultProps }));
            // Initial state
            expect(react_2.screen.getByText('1 seat')).toBeInTheDocument();
            // Select 2 seats
            await user.click(react_2.screen.getByText('2'));
            expect(react_2.screen.getByText('2 seats')).toBeInTheDocument();
            expect(react_2.screen.queryByText('1 seat')).not.toBeInTheDocument();
            // Select 4 seats
            await user.click(react_2.screen.getByText('4'));
            expect(react_2.screen.getByText('4 seats')).toBeInTheDocument();
            expect(react_2.screen.queryByText('2 seats')).not.toBeInTheDocument();
        });
    });
    describe('Edge Cases', () => {
        it('should handle maxSeats of 8 (maximum allowed)', () => {
            (0, react_2.render)((0, jsx_runtime_1.jsx)(SeatSelectionModal_1.SeatSelectionModal, { ...defaultProps, maxSeats: 8 }));
            // Should show all 8 buttons
            for (let i = 1; i <= 8; i++) {
                expect(react_2.screen.getByText(i.toString())).toBeInTheDocument();
            }
            expect(react_2.screen.queryByText('9')).not.toBeInTheDocument();
        });
        it('should handle rapid seat selection changes', async () => {
            const user = user_event_1.default.setup();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(SeatSelectionModal_1.SeatSelectionModal, { ...defaultProps }));
            // Rapidly click different seat buttons
            await user.click(react_2.screen.getByText('2'));
            await user.click(react_2.screen.getByText('4'));
            await user.click(react_2.screen.getByText('1'));
            await user.click(react_2.screen.getByText('3'));
            // Should end up with 3 seats selected
            expect(react_2.screen.getByText('3 seats')).toBeInTheDocument();
            expect(react_2.screen.getByText('3')).toHaveClass('bg-primary-600');
        });
        it('should maintain state consistency during rapid interactions', async () => {
            const user = user_event_1.default.setup();
            const onConfirm = jest.fn();
            (0, react_2.render)((0, jsx_runtime_1.jsx)(SeatSelectionModal_1.SeatSelectionModal, { ...defaultProps, onConfirm: onConfirm }));
            // Select seats and confirm rapidly
            await user.click(react_2.screen.getByText('2'));
            await user.click(react_2.screen.getByText('Confirm Booking'));
            // Should call onConfirm with the last selected value
            expect(onConfirm).toHaveBeenCalledWith(2);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,