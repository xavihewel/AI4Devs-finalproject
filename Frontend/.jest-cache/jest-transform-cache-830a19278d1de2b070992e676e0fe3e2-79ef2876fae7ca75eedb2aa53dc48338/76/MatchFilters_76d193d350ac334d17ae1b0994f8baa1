0b96c915f9e0d7424825718bf2f53ad6
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = MatchFilters;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const react_i18next_1 = require("react-i18next");
const ui_1 = require("../ui");
const MatchFilterService_1 = require("./services/MatchFilterService");
const FilterStrategyFactory_1 = require("./factories/FilterStrategyFactory");
const SortStrategyFactory_1 = require("./factories/SortStrategyFactory");
const FilterPersistenceRepository_1 = require("./repositories/FilterPersistenceRepository");
function MatchFilters({ matches, onFilteredMatches, onFiltersChange }) {
    const { t } = (0, react_i18next_1.useTranslation)('matches');
    // Dependency injection following DIP
    const filterService = new MatchFilterService_1.MatchFilterService(new FilterStrategyFactory_1.ConcreteFilterStrategyFactory(), new SortStrategyFactory_1.ConcreteSortStrategyFactory());
    const persistenceRepository = new FilterPersistenceRepository_1.LocalStorageFilterRepository();
    const [filters, setFilters] = (0, react_1.useState)({
        minScore: 0,
        minSeats: 1,
        dateFrom: '',
        dateTo: '',
        sortBy: 'score',
        sortOrder: 'desc'
    });
    const [activeFiltersCount, setActiveFiltersCount] = (0, react_1.useState)(0);
    // Load filters from repository on mount
    (0, react_1.useEffect)(() => {
        const savedFilters = persistenceRepository.load();
        if (savedFilters) {
            setFilters(savedFilters);
        }
    }, []);
    // Save filters to repository whenever they change
    (0, react_1.useEffect)(() => {
        persistenceRepository.save(filters);
    }, [filters]);
    // Apply filters and sorting using service
    (0, react_1.useEffect)(() => {
        const filtered = filterService.processMatches(matches, filters);
        onFilteredMatches(filtered);
        onFiltersChange(filters);
    }, [matches, filters, onFilteredMatches, onFiltersChange, filterService]);
    // Count active filters using service
    (0, react_1.useEffect)(() => {
        const activeFilterNames = filterService.getActiveFilterNames(filters);
        setActiveFiltersCount(activeFilterNames.length);
    }, [filters, filterService]);
    const handleFilterChange = (key, value) => {
        setFilters(prev => ({
            ...prev,
            [key]: value
        }));
    };
    const clearFilters = () => {
        const defaultFilters = {
            minScore: 0,
            minSeats: 1,
            dateFrom: '',
            dateTo: '',
            sortBy: 'score',
            sortOrder: 'desc'
        };
        setFilters(defaultFilters);
        persistenceRepository.clear();
    };
    const sortOptions = [
        { value: 'score', label: t('filters.sort.score') },
        { value: 'date', label: t('filters.sort.date') },
        { value: 'seats', label: t('filters.sort.seats') }
    ];
    const orderOptions = [
        { value: 'desc', label: t('filters.order.desc') },
        { value: 'asc', label: t('filters.order.asc') }
    ];
    return ((0, jsx_runtime_1.jsx)(ui_1.Card, { children: (0, jsx_runtime_1.jsx)(ui_1.CardContent, { children: (0, jsx_runtime_1.jsxs)("div", { className: "space-y-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between items-center", children: [(0, jsx_runtime_1.jsx)("h3", { className: "text-lg font-semibold text-gray-900", children: t('filters.title') }), activeFiltersCount > 0 && ((0, jsx_runtime_1.jsxs)("div", { className: "flex items-center gap-2", children: [(0, jsx_runtime_1.jsx)("span", { className: "text-sm text-gray-500", "data-testid": "active-count", children: t('filters.activeCount', { count: activeFiltersCount }) }), (0, jsx_runtime_1.jsx)(ui_1.Button, { variant: "secondary", size: "sm", onClick: clearFilters, "data-testid": "clear-filters", children: t('filters.clear') })] }))] }), (0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4", children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsxs)("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: [t('filters.minScore'), " (", filters.minScore, "%)"] }), (0, jsx_runtime_1.jsx)("input", { type: "range", min: "0", max: "100", step: "10", value: filters.minScore, onChange: (e) => handleFilterChange('minScore', parseInt(e.target.value)), className: "w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer" })] }), (0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("label", { className: "block text-sm font-medium text-gray-700 mb-2", children: t('filters.minSeats') }), (0, jsx_runtime_1.jsx)(ui_1.Select, { value: filters.minSeats.toString(), onChange: (e) => handleFilterChange('minSeats', parseInt(e.target.value)), options: Array.from({ length: 8 }, (_, i) => ({
                                            value: (i + 1).toString(),
                                            label: `${i + 1} ${i === 0 ? t('filters.seat') : t('filters.seats')}`
                                        })) })] }), (0, jsx_runtime_1.jsx)("div", { children: (0, jsx_runtime_1.jsx)(ui_1.Input, { label: t('filters.dateFrom'), type: "date", value: filters.dateFrom, onChange: (e) => handleFilterChange('dateFrom', e.target.value) }) }), (0, jsx_runtime_1.jsx)("div", { children: (0, jsx_runtime_1.jsx)(ui_1.Input, { label: t('filters.dateTo'), type: "date", value: filters.dateTo, onChange: (e) => handleFilterChange('dateTo', e.target.value) }) }), (0, jsx_runtime_1.jsx)("div", { children: (0, jsx_runtime_1.jsx)(ui_1.Select, { label: t('filters.sortBy'), value: filters.sortBy, onChange: (e) => handleFilterChange('sortBy', e.target.value), options: sortOptions }) }), (0, jsx_runtime_1.jsx)("div", { children: (0, jsx_runtime_1.jsx)(ui_1.Select, { label: t('filters.sortOrder'), value: filters.sortOrder, onChange: (e) => handleFilterChange('sortOrder', e.target.value), options: orderOptions }) })] }), activeFiltersCount > 0 && ((0, jsx_runtime_1.jsxs)("div", { className: "flex flex-wrap gap-2", "data-testid": "active-filters", children: [filters.minScore > 0 && ((0, jsx_runtime_1.jsxs)("span", { className: "inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800", "data-testid": "score-chip", children: [t('filters.scoreChip', { score: filters.minScore }), (0, jsx_runtime_1.jsx)("button", { onClick: () => handleFilterChange('minScore', 0), className: "ml-1 text-blue-600 hover:text-blue-800", children: "\u00D7" })] })), filters.minSeats > 1 && ((0, jsx_runtime_1.jsxs)("span", { className: "inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800", "data-testid": "seats-chip", children: [t('filters.seatsChip', { seats: filters.minSeats }), (0, jsx_runtime_1.jsx)("button", { onClick: () => handleFilterChange('minSeats', 1), className: "ml-1 text-green-600 hover:text-green-800", children: "\u00D7" })] })), filters.dateFrom && ((0, jsx_runtime_1.jsxs)("span", { className: "inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800", "data-testid": "date-from-chip", children: [t('filters.fromChip', { date: new Date(filters.dateFrom).toLocaleDateString() }), (0, jsx_runtime_1.jsx)("button", { onClick: () => handleFilterChange('dateFrom', ''), className: "ml-1 text-purple-600 hover:text-purple-800", children: "\u00D7" })] })), filters.dateTo && ((0, jsx_runtime_1.jsxs)("span", { className: "inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800", "data-testid": "date-to-chip", children: [t('filters.toChip', { date: new Date(filters.dateTo).toLocaleDateString() }), (0, jsx_runtime_1.jsx)("button", { onClick: () => handleFilterChange('dateTo', ''), className: "ml-1 text-purple-600 hover:text-purple-800", children: "\u00D7" })] }))] }))] }) }) }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,