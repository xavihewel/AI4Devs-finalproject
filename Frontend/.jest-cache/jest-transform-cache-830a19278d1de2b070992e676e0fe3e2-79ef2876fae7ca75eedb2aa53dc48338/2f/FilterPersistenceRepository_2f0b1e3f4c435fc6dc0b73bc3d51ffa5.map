{"file":"/Users/admin/Documents/AI4Devs-finalproject/Frontend/src/components/matches/repositories/FilterPersistenceRepository.ts","mappings":";;;AAYA;;;GAGG;AACH,MAAa,4BAA4B;IAAzC;QACmB;;;;mBAAa,cAAc;WAAC;IAgD/C,CAAC;IA9CC,IAAI,CAAC,OAAsB;QACzB,IAAI,CAAC;YACH,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;QACjE,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,yCAAyC,EAAE,KAAK,CAAC,CAAC;QAClE,CAAC;IACH,CAAC;IAED,IAAI;QACF,IAAI,CAAC;YACH,MAAM,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACpD,IAAI,CAAC,KAAK;gBAAE,OAAO,IAAI,CAAC;YAExB,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAEjC,yBAAyB;YACzB,IAAI,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,EAAE,CAAC;gBACtC,OAAO,MAAM,CAAC;YAChB,CAAC;YAED,OAAO,IAAI,CAAC;QACd,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,2CAA2C,EAAE,KAAK,CAAC,CAAC;YAClE,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IAED,KAAK;QACH,IAAI,CAAC;YACH,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC3C,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,4CAA4C,EAAE,KAAK,CAAC,CAAC;QACrE,CAAC;IACH,CAAC;IAEO,oBAAoB,CAAC,GAAQ;QACnC,OAAO,CACL,GAAG;YACH,OAAO,GAAG,CAAC,QAAQ,KAAK,QAAQ;YAChC,OAAO,GAAG,CAAC,QAAQ,KAAK,QAAQ;YAChC,OAAO,GAAG,CAAC,MAAM,KAAK,QAAQ;YAC9B,OAAO,GAAG,CAAC,SAAS,KAAK,QAAQ;YACjC,CAAC,GAAG,CAAC,QAAQ,KAAK,SAAS,IAAI,OAAO,GAAG,CAAC,QAAQ,KAAK,QAAQ,CAAC;YAChE,CAAC,GAAG,CAAC,MAAM,KAAK,SAAS,IAAI,OAAO,GAAG,CAAC,MAAM,KAAK,QAAQ,CAAC,CAC7D,CAAC;IACJ,CAAC;CACF;AAjDD,oEAiDC","names":[],"sources":["/Users/admin/Documents/AI4Devs-finalproject/Frontend/src/components/matches/repositories/FilterPersistenceRepository.ts"],"sourcesContent":["import type { FilterOptions } from '../MatchFilters';\n\n/**\n * Repository for persisting filter state\n * Follows Repository pattern and Single Responsibility Principle\n */\nexport interface FilterPersistenceRepository {\n  save(filters: FilterOptions): void;\n  load(): FilterOptions | null;\n  clear(): void;\n}\n\n/**\n * LocalStorage implementation of filter persistence\n * Follows Dependency Inversion Principle - depends on abstraction\n */\nexport class LocalStorageFilterRepository implements FilterPersistenceRepository {\n  private readonly storageKey = 'matchFilters';\n\n  save(filters: FilterOptions): void {\n    try {\n      localStorage.setItem(this.storageKey, JSON.stringify(filters));\n    } catch (error) {\n      console.error('Failed to save filters to localStorage:', error);\n    }\n  }\n\n  load(): FilterOptions | null {\n    try {\n      const saved = localStorage.getItem(this.storageKey);\n      if (!saved) return null;\n      \n      const parsed = JSON.parse(saved);\n      \n      // Validate the structure\n      if (this.isValidFilterOptions(parsed)) {\n        return parsed;\n      }\n      \n      return null;\n    } catch (error) {\n      console.error('Failed to load filters from localStorage:', error);\n      return null;\n    }\n  }\n\n  clear(): void {\n    try {\n      localStorage.removeItem(this.storageKey);\n    } catch (error) {\n      console.error('Failed to clear filters from localStorage:', error);\n    }\n  }\n\n  private isValidFilterOptions(obj: any): obj is FilterOptions {\n    return (\n      obj &&\n      typeof obj.minScore === 'number' &&\n      typeof obj.minSeats === 'number' &&\n      typeof obj.sortBy === 'string' &&\n      typeof obj.sortOrder === 'string' &&\n      (obj.dateFrom === undefined || typeof obj.dateFrom === 'string') &&\n      (obj.dateTo === undefined || typeof obj.dateTo === 'string')\n    );\n  }\n}\n"],"version":3}