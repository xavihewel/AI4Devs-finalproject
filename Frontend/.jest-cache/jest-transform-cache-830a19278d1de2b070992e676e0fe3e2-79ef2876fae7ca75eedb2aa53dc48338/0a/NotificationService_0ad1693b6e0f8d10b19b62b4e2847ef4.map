{"file":"/Users/admin/Documents/AI4Devs-finalproject/Frontend/src/services/NotificationService.ts","mappings":"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","names":[],"sources":["/Users/admin/Documents/AI4Devs-finalproject/Frontend/src/services/NotificationService.ts"],"sourcesContent":["/**\n * Service for managing push notifications.\n * Follows Single Responsibility Principle: only handles push notification operations.\n * Follows Dependency Inversion Principle: depends on browser APIs, not concrete implementations.\n */\nexport class NotificationService {\n  private readonly vapidKey: string;\n  private readonly apiBaseUrl: string;\n\n  constructor(vapidKey: string, apiBaseUrl: string = '/api') {\n    this.vapidKey = vapidKey;\n    this.apiBaseUrl = apiBaseUrl;\n  }\n\n  /**\n   * Checks if push notifications are supported in the current browser.\n   * Follows Open/Closed Principle: extensible for different browser capabilities.\n   */\n  isSupported(): boolean {\n    return (\n      'serviceWorker' in navigator &&\n      'PushManager' in window &&\n      'Notification' in window\n    );\n  }\n\n  /**\n   * Requests notification permission from the user.\n   * Handles errors gracefully to avoid breaking the main flow.\n   */\n  async requestPermission(): Promise<NotificationPermission> {\n    if (!this.isSupported()) {\n      throw new Error('Push notifications are not supported');\n    }\n\n    if (Notification.permission === 'granted') {\n      return 'granted';\n    }\n\n    if (Notification.permission === 'denied') {\n      return 'denied';\n    }\n\n    return await Notification.requestPermission();\n  }\n\n  /**\n   * Subscribes to push notifications.\n   * Handles errors gracefully to avoid breaking the main flow.\n   */\n  async subscribe(): Promise<boolean> {\n    try {\n      if (!this.isSupported()) {\n        console.warn('Push notifications are not supported');\n        return false;\n      }\n\n      const permission = await this.requestPermission();\n      if (permission !== 'granted') {\n        console.warn('Notification permission not granted');\n        return false;\n      }\n\n      const registration = await navigator.serviceWorker.ready;\n      const existingSubscription = await registration.pushManager.getSubscription();\n\n      if (existingSubscription) {\n        console.log('Already subscribed to push notifications');\n        return true;\n      }\n\n      const subscription = await registration.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: this.vapidKey,\n      });\n\n      // Send subscription to server\n      const response = await fetch(`${this.apiBaseUrl}/notifications/subscribe`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          endpoint: subscription.endpoint,\n          keys: {\n            p256dh: this.arrayBufferToBase64(subscription.getKey('p256dh')!),\n            auth: this.arrayBufferToBase64(subscription.getKey('auth')!),\n          },\n        }),\n      });\n\n      if (!response.ok) {\n        console.error('Failed to register subscription with server');\n        return false;\n      }\n\n      console.log('Successfully subscribed to push notifications');\n      return true;\n    } catch (error) {\n      console.error('Error subscribing to push notifications:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Unsubscribes from push notifications.\n   * Handles errors gracefully to avoid breaking the main flow.\n   */\n  async unsubscribe(): Promise<boolean> {\n    try {\n      if (!this.isSupported()) {\n        console.warn('Push notifications are not supported');\n        return true;\n      }\n\n      const registration = await navigator.serviceWorker.ready;\n      const subscription = await registration.pushManager.getSubscription();\n\n      if (!subscription) {\n        console.log('Not subscribed to push notifications');\n        return true;\n      }\n\n      const success = await subscription.unsubscribe();\n      if (!success) {\n        console.error('Failed to unsubscribe from push notifications');\n        return false;\n      }\n\n      // Notify server about unsubscription\n      await fetch(`${this.apiBaseUrl}/notifications/unsubscribe`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          endpoint: subscription.endpoint,\n        }),\n      });\n\n      console.log('Successfully unsubscribed from push notifications');\n      return true;\n    } catch (error) {\n      console.error('Error unsubscribing from push notifications:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Gets the current subscription status.\n   * Returns subscription information for UI display.\n   */\n  async getSubscriptionStatus(): Promise<{\n    isSubscribed: boolean;\n    endpoint: string | null;\n  }> {\n    try {\n      if (!this.isSupported()) {\n        return { isSubscribed: false, endpoint: null };\n      }\n\n      const registration = await navigator.serviceWorker.ready;\n      const subscription = await registration.pushManager.getSubscription();\n\n      return {\n        isSubscribed: !!subscription,\n        endpoint: subscription?.endpoint || null,\n      };\n    } catch (error) {\n      console.error('Error getting subscription status:', error);\n      return { isSubscribed: false, endpoint: null };\n    }\n  }\n\n  /**\n   * Converts ArrayBuffer to Base64 string.\n   * Utility method for key conversion.\n   */\n  private arrayBufferToBase64(buffer: ArrayBuffer): string {\n    const bytes = new Uint8Array(buffer);\n    let binary = '';\n    for (let i = 0; i < bytes.byteLength; i++) {\n      binary += String.fromCharCode(bytes[i]);\n    }\n    return btoa(binary);\n  }\n}\n"],"version":3}