{"file":"/Users/admin/Documents/AI4Devs-finalproject/Frontend/src/api/routing.test.ts","mappings":"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","names":[],"sources":["/Users/admin/Documents/AI4Devs-finalproject/Frontend/src/api/routing.test.ts"],"sourcesContent":["/**\n * Unit tests for RoutingApiService.\n * Tests API calls, caching, error handling, and fallback behavior.\n * Follows TDD: test first, then implement.\n */\n\nimport { RoutingApiService, LatLng, RouteResponse } from './routing';\n\n// Mock fetch globally\nconst mockFetch = jest.fn();\nglobal.fetch = mockFetch;\n\ndescribe('RoutingApiService', () => {\n  let routingService: RoutingApiService;\n  const mockOrigin: LatLng = { lat: 41.3851, lng: 2.1734 };\n  const mockDestination: LatLng = { lat: 41.4036, lng: 2.1744 };\n\n  beforeEach(() => {\n    routingService = new RoutingApiService('/api');\n    mockFetch.mockClear();\n    routingService.clearCache();\n  });\n\n  describe('getRoute', () => {\n    it('should fetch route from API and cache result', async () => {\n      // Given\n      const mockRouteResponse: RouteResponse = {\n        type: 'FeatureCollection',\n        features: [\n          {\n            type: 'Feature',\n            properties: {\n              distance: 5000,\n              duration: 600,\n            },\n            geometry: {\n              type: 'LineString',\n              coordinates: [\n                [41.3851, 2.1734],\n                [41.3900, 2.1750],\n                [41.4036, 2.1744],\n              ],\n            },\n          },\n        ],\n      };\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockRouteResponse,\n      });\n\n      // When\n      const result1 = await routingService.getRoute(mockOrigin, mockDestination);\n      const result2 = await routingService.getRoute(mockOrigin, mockDestination);\n\n      // Then\n      expect(mockFetch).toHaveBeenCalledTimes(1); // Only called once due to caching\n      expect(mockFetch).toHaveBeenCalledWith('/api/routes', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          origin: mockOrigin,\n          destination: mockDestination,\n        }),\n      });\n\n      expect(result1).toEqual(mockRouteResponse);\n      expect(result2).toEqual(mockRouteResponse);\n      expect(result1).toBe(result2); // Same object reference due to caching\n    });\n\n    it('should return fallback route when API fails', async () => {\n      // Given\n      mockFetch.mockRejectedValueOnce(new Error('Network error'));\n\n      // When\n      const result = await routingService.getRoute(mockOrigin, mockDestination);\n\n      // Then\n      expect(result.type).toBe('FeatureCollection');\n      expect(result.features).toHaveLength(1);\n      \n      const feature = result.features[0];\n      expect(feature.type).toBe('Feature');\n      expect(feature.geometry.type).toBe('LineString');\n      expect(feature.geometry.coordinates).toHaveLength(2);\n      expect(feature.geometry.coordinates[0]).toEqual([mockOrigin.lat, mockOrigin.lng]);\n      expect(feature.geometry.coordinates[1]).toEqual([mockDestination.lat, mockDestination.lng]);\n      \n      expect(feature.properties.distance).toBeGreaterThan(0);\n      expect(feature.properties.duration).toBeGreaterThan(0);\n    });\n\n    it('should return fallback route when API returns error status', async () => {\n      // Given\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 500,\n        json: async () => ({ error: 'Internal server error' }),\n      });\n\n      // When\n      const result = await routingService.getRoute(mockOrigin, mockDestination);\n\n      // Then\n      expect(result.type).toBe('FeatureCollection');\n      expect(result.features).toHaveLength(1);\n      expect(result.features[0].geometry.coordinates).toHaveLength(2);\n    });\n\n    it('should handle different coordinate pairs separately', async () => {\n      // Given\n      const differentDestination: LatLng = { lat: 41.5000, lng: 2.2000 };\n      \n      mockFetch\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({\n            type: 'FeatureCollection',\n            features: [{ type: 'Feature', properties: { distance: 1000, duration: 120 }, geometry: { type: 'LineString', coordinates: [] } }],\n          }),\n        })\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({\n            type: 'FeatureCollection',\n            features: [{ type: 'Feature', properties: { distance: 2000, duration: 240 }, geometry: { type: 'LineString', coordinates: [] } }],\n          }),\n        });\n\n      // When\n      const result1 = await routingService.getRoute(mockOrigin, mockDestination);\n      const result2 = await routingService.getRoute(mockOrigin, differentDestination);\n\n      // Then\n      expect(mockFetch).toHaveBeenCalledTimes(2);\n      expect(result1.features[0].properties.distance).toBe(1000);\n      expect(result2.features[0].properties.distance).toBe(2000);\n    });\n  });\n\n  describe('clearCache', () => {\n    it('should clear cached routes', async () => {\n      // Given\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          type: 'FeatureCollection',\n          features: [{ type: 'Feature', properties: { distance: 1000, duration: 120 }, geometry: { type: 'LineString', coordinates: [] } }],\n        }),\n      });\n\n      // When\n      await routingService.getRoute(mockOrigin, mockDestination);\n      routingService.clearCache();\n      await routingService.getRoute(mockOrigin, mockDestination);\n\n      // Then\n      expect(mockFetch).toHaveBeenCalledTimes(2); // Called twice because cache was cleared\n    });\n  });\n\n  describe('fallback route calculation', () => {\n    it('should calculate reasonable distance and duration for fallback', async () => {\n      // Given\n      mockFetch.mockRejectedValueOnce(new Error('API error'));\n\n      // When\n      const result = await routingService.getRoute(mockOrigin, mockDestination);\n\n      // Then\n      const feature = result.features[0];\n      expect(feature.properties.distance).toBeGreaterThan(0);\n      expect(feature.properties.duration).toBeGreaterThan(0);\n      \n      // Distance should be reasonable for Barcelona coordinates\n      expect(feature.properties.distance).toBeLessThan(100000); // Less than 100km\n      expect(feature.properties.duration).toBeLessThan(7200); // Less than 2 hours\n    });\n\n    it('should handle same origin and destination', async () => {\n      // Given\n      mockFetch.mockRejectedValueOnce(new Error('API error'));\n\n      // When\n      const result = await routingService.getRoute(mockOrigin, mockOrigin);\n\n      // Then\n      const feature = result.features[0];\n      expect(feature.properties.distance).toBe(0);\n      expect(feature.properties.duration).toBe(0);\n      expect(feature.geometry.coordinates).toEqual([\n        [mockOrigin.lat, mockOrigin.lng],\n        [mockOrigin.lat, mockOrigin.lng],\n      ]);\n    });\n  });\n});\n"],"version":3}