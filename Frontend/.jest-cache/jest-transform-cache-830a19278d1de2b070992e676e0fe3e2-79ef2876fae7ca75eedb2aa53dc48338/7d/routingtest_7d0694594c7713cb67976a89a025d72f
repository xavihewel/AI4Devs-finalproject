a5866b51ebbaceb038c1eae5c69adccc
"use strict";
/**
 * Unit tests for RoutingApiService.
 * Tests API calls, caching, error handling, and fallback behavior.
 * Follows TDD: test first, then implement.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const routing_1 = require("./routing");
// Mock fetch globally
const mockFetch = jest.fn();
global.fetch = mockFetch;
describe('RoutingApiService', () => {
    let routingService;
    const mockOrigin = { lat: 41.3851, lng: 2.1734 };
    const mockDestination = { lat: 41.4036, lng: 2.1744 };
    beforeEach(() => {
        routingService = new routing_1.RoutingApiService('/api');
        mockFetch.mockClear();
        routingService.clearCache();
    });
    describe('getRoute', () => {
        it('should fetch route from API and cache result', async () => {
            // Given
            const mockRouteResponse = {
                type: 'FeatureCollection',
                features: [
                    {
                        type: 'Feature',
                        properties: {
                            distance: 5000,
                            duration: 600,
                        },
                        geometry: {
                            type: 'LineString',
                            coordinates: [
                                [41.3851, 2.1734],
                                [41.3900, 2.1750],
                                [41.4036, 2.1744],
                            ],
                        },
                    },
                ],
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async () => mockRouteResponse,
            });
            // When
            const result1 = await routingService.getRoute(mockOrigin, mockDestination);
            const result2 = await routingService.getRoute(mockOrigin, mockDestination);
            // Then
            expect(mockFetch).toHaveBeenCalledTimes(1); // Only called once due to caching
            expect(mockFetch).toHaveBeenCalledWith('/api/routes', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    origin: mockOrigin,
                    destination: mockDestination,
                }),
            });
            expect(result1).toEqual(mockRouteResponse);
            expect(result2).toEqual(mockRouteResponse);
            expect(result1).toBe(result2); // Same object reference due to caching
        });
        it('should return fallback route when API fails', async () => {
            // Given
            mockFetch.mockRejectedValueOnce(new Error('Network error'));
            // When
            const result = await routingService.getRoute(mockOrigin, mockDestination);
            // Then
            expect(result.type).toBe('FeatureCollection');
            expect(result.features).toHaveLength(1);
            const feature = result.features[0];
            expect(feature.type).toBe('Feature');
            expect(feature.geometry.type).toBe('LineString');
            expect(feature.geometry.coordinates).toHaveLength(2);
            expect(feature.geometry.coordinates[0]).toEqual([mockOrigin.lat, mockOrigin.lng]);
            expect(feature.geometry.coordinates[1]).toEqual([mockDestination.lat, mockDestination.lng]);
            expect(feature.properties.distance).toBeGreaterThan(0);
            expect(feature.properties.duration).toBeGreaterThan(0);
        });
        it('should return fallback route when API returns error status', async () => {
            // Given
            mockFetch.mockResolvedValueOnce({
                ok: false,
                status: 500,
                json: async () => ({ error: 'Internal server error' }),
            });
            // When
            const result = await routingService.getRoute(mockOrigin, mockDestination);
            // Then
            expect(result.type).toBe('FeatureCollection');
            expect(result.features).toHaveLength(1);
            expect(result.features[0].geometry.coordinates).toHaveLength(2);
        });
        it('should handle different coordinate pairs separately', async () => {
            // Given
            const differentDestination = { lat: 41.5000, lng: 2.2000 };
            mockFetch
                .mockResolvedValueOnce({
                ok: true,
                json: async () => ({
                    type: 'FeatureCollection',
                    features: [{ type: 'Feature', properties: { distance: 1000, duration: 120 }, geometry: { type: 'LineString', coordinates: [] } }],
                }),
            })
                .mockResolvedValueOnce({
                ok: true,
                json: async () => ({
                    type: 'FeatureCollection',
                    features: [{ type: 'Feature', properties: { distance: 2000, duration: 240 }, geometry: { type: 'LineString', coordinates: [] } }],
                }),
            });
            // When
            const result1 = await routingService.getRoute(mockOrigin, mockDestination);
            const result2 = await routingService.getRoute(mockOrigin, differentDestination);
            // Then
            expect(mockFetch).toHaveBeenCalledTimes(2);
            expect(result1.features[0].properties.distance).toBe(1000);
            expect(result2.features[0].properties.distance).toBe(2000);
        });
    });
    describe('clearCache', () => {
        it('should clear cached routes', async () => {
            // Given
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async () => ({
                    type: 'FeatureCollection',
                    features: [{ type: 'Feature', properties: { distance: 1000, duration: 120 }, geometry: { type: 'LineString', coordinates: [] } }],
                }),
            });
            // When
            await routingService.getRoute(mockOrigin, mockDestination);
            routingService.clearCache();
            await routingService.getRoute(mockOrigin, mockDestination);
            // Then
            expect(mockFetch).toHaveBeenCalledTimes(2); // Called twice because cache was cleared
        });
    });
    describe('fallback route calculation', () => {
        it('should calculate reasonable distance and duration for fallback', async () => {
            // Given
            mockFetch.mockRejectedValueOnce(new Error('API error'));
            // When
            const result = await routingService.getRoute(mockOrigin, mockDestination);
            // Then
            const feature = result.features[0];
            expect(feature.properties.distance).toBeGreaterThan(0);
            expect(feature.properties.duration).toBeGreaterThan(0);
            // Distance should be reasonable for Barcelona coordinates
            expect(feature.properties.distance).toBeLessThan(100000); // Less than 100km
            expect(feature.properties.duration).toBeLessThan(7200); // Less than 2 hours
        });
        it('should handle same origin and destination', async () => {
            // Given
            mockFetch.mockRejectedValueOnce(new Error('API error'));
            // When
            const result = await routingService.getRoute(mockOrigin, mockOrigin);
            // Then
            const feature = result.features[0];
            expect(feature.properties.distance).toBe(0);
            expect(feature.properties.duration).toBe(0);
            expect(feature.geometry.coordinates).toEqual([
                [mockOrigin.lat, mockOrigin.lng],
                [mockOrigin.lat, mockOrigin.lng],
            ]);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2FkbWluL0RvY3VtZW50cy9BSTREZXZzLWZpbmFscHJvamVjdC9Gcm9udGVuZC9zcmMvYXBpL3JvdXRpbmcudGVzdC50cyIsIm1hcHBpbmdzIjoiO0FBQUE7Ozs7R0FJRzs7QUFFSCx1Q0FBcUU7QUFFckUsc0JBQXNCO0FBQ3RCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztBQUM1QixNQUFNLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQztBQUV6QixRQUFRLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxFQUFFO0lBQ2pDLElBQUksY0FBaUMsQ0FBQztJQUN0QyxNQUFNLFVBQVUsR0FBVyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDO0lBQ3pELE1BQU0sZUFBZSxHQUFXLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLENBQUM7SUFFOUQsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLGNBQWMsR0FBRyxJQUFJLDJCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQy9DLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUN0QixjQUFjLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDOUIsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRTtRQUN4QixFQUFFLENBQUMsOENBQThDLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDNUQsUUFBUTtZQUNSLE1BQU0saUJBQWlCLEdBQWtCO2dCQUN2QyxJQUFJLEVBQUUsbUJBQW1CO2dCQUN6QixRQUFRLEVBQUU7b0JBQ1I7d0JBQ0UsSUFBSSxFQUFFLFNBQVM7d0JBQ2YsVUFBVSxFQUFFOzRCQUNWLFFBQVEsRUFBRSxJQUFJOzRCQUNkLFFBQVEsRUFBRSxHQUFHO3lCQUNkO3dCQUNELFFBQVEsRUFBRTs0QkFDUixJQUFJLEVBQUUsWUFBWTs0QkFDbEIsV0FBVyxFQUFFO2dDQUNYLENBQUMsT0FBTyxFQUFFLE1B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QUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDNUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUMsT0FBTyxDQUFDO2dCQUMzQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLEdBQUcsQ0FBQztnQkFDaEMsQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxHQUFHLENBQUM7YUFDakMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZG1pbi9Eb2N1bWVudHMvQUk0RGV2cy1maW5hbHByb2plY3QvRnJvbnRlbmQvc3JjL2FwaS9yb3V0aW5nLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBVbml0IHRlc3RzIGZvciBSb3V0aW5nQXBpU2VydmljZS5cbiAqIFRlc3RzIEFQSSBjYWxscywgY2FjaGluZywgZXJyb3IgaGFuZGxpbmcsIGFuZCBmYWxsYmFjayBiZWhhdmlvci5cbiAqIEZvbGxvd3MgVEREOiB0ZXN0IGZpcnN0LCB0aGVuIGltcGxlbWVudC5cbiAqL1xuXG5pbXBvcnQgeyBSb3V0aW5nQXBpU2VydmljZSwgTGF0TG5nLCBSb3V0ZVJlc3BvbnNlIH0gZnJvbSAnLi9yb3V0aW5nJztcblxuLy8gTW9jayBmZXRjaCBnbG9iYWxseVxuY29uc3QgbW9ja0ZldGNoID0gamVzdC5mbigpO1xuZ2xvYmFsLmZldGNoID0gbW9ja0ZldGNoO1xuXG5kZXNjcmliZSgnUm91dGluZ0FwaVNlcnZpY2UnLCAoKSA9PiB7XG4gIGxldCByb3V0aW5nU2VydmljZTogUm91dGluZ0FwaVNlcnZpY2U7XG4gIGNvbnN0IG1vY2tPcmlnaW46IExhdExuZyA9IHsgbGF0OiA0MS4zODUxLCBsbmc6IDIuMTczNCB9O1xuICBjb25zdCBtb2NrRGVzdGluYXRpb246IExhdExuZyA9IHsgbGF0OiA0MS40MDM2LCBsbmc6IDIuMTc0NCB9O1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIHJvdXRpbmdTZXJ2aWNlID0gbmV3IFJvdXRpbmdBcGlTZXJ2aWNlKCcvYXBpJyk7XG4gICAgbW9ja0ZldGNoLm1vY2tDbGVhcigpO1xuICAgIHJvdXRpbmdTZXJ2aWNlLmNsZWFyQ2FjaGUoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2dldFJvdXRlJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgZmV0Y2ggcm91dGUgZnJvbSBBUEkgYW5kIGNhY2hlIHJlc3VsdCcsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEdpdmVuXG4gICAgICBjb25zdCBtb2NrUm91dGVSZXNwb25zZTogUm91dGVSZXNwb25zZSA9IHtcbiAgICAgICAgdHlwZTogJ0ZlYXR1cmVDb2xsZWN0aW9uJyxcbiAgICAgICAgZmVhdHVyZXM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiAnRmVhdHVyZScsXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgIGRpc3RhbmNlOiA1MDAwLFxuICAgICAgICAgICAgICBkdXJhdGlvbjogNjAwLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdlb21ldHJ5OiB7XG4gICAgICAgICAgICAgIHR5cGU6ICdMaW5lU3RyaW5nJyxcbiAgICAgICAgICAgICAgY29vcmRpbmF0ZXM6IFtcbiAgICAgICAgICAgICAgICBbNDEuMzg1MSwgMi4xNzM0XSxcbiAgICAgICAgICAgICAgICBbNDEuMzkwMCwgMi4xNzUwXSxcbiAgICAgICAgICAgICAgICBbNDEuNDAzNiwgMi4xNzQ0XSxcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH07XG5cbiAgICAgIG1vY2tGZXRjaC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAganNvbjogYXN5bmMgKCkgPT4gbW9ja1JvdXRlUmVzcG9uc2UsXG4gICAgICB9KTtcblxuICAgICAgLy8gV2hlblxuICAgICAgY29uc3QgcmVzdWx0MSA9IGF3YWl0IHJvdXRpbmdTZXJ2aWNlLmdldFJvdXRlKG1vY2tPcmlnaW4sIG1vY2tEZXN0aW5hdGlvbik7XG4gICAgICBjb25zdCByZXN1bHQyID0gYXdhaXQgcm91dGluZ1NlcnZpY2UuZ2V0Um91dGUobW9ja09yaWdpbiwgbW9ja0Rlc3RpbmF0aW9uKTtcblxuICAgICAgLy8gVGhlblxuICAgICAgZXhwZWN0KG1vY2tGZXRjaCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpOyAvLyBPbmx5IGNhbGxlZCBvbmNlIGR1ZSB0byBjYWNoaW5nXG4gICAgICBleHBlY3QobW9ja0ZldGNoKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnL2FwaS9yb3V0ZXMnLCB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgfSxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIG9yaWdpbjogbW9ja09yaWdpbixcbiAgICAgICAgICBkZXN0aW5hdGlvbjogbW9ja0Rlc3RpbmF0aW9uLFxuICAgICAgICB9KSxcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0MSkudG9FcXVhbChtb2NrUm91dGVSZXNwb25zZSk7XG4gICAgICBleHBlY3QocmVzdWx0MikudG9FcXVhbChtb2NrUm91dGVSZXNwb25zZSk7XG4gICAgICBleHBlY3QocmVzdWx0MSkudG9CZShyZXN1bHQyKTsgLy8gU2FtZSBvYmplY3QgcmVmZXJlbmNlIGR1ZSB0byBjYWNoaW5nXG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiBmYWxsYmFjayByb3V0ZSB3aGVuIEFQSSBmYWlscycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEdpdmVuXG4gICAgICBtb2NrRmV0Y2gubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcignTmV0d29yayBlcnJvcicpKTtcblxuICAgICAgLy8gV2hlblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcm91dGluZ1NlcnZpY2UuZ2V0Um91dGUobW9ja09yaWdpbiwgbW9ja0Rlc3RpbmF0aW9uKTtcblxuICAgICAgLy8gVGhlblxuICAgICAgZXhwZWN0KHJlc3VsdC50eXBlKS50b0JlKCdGZWF0dXJlQ29sbGVjdGlvbicpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5mZWF0dXJlcykudG9IYXZlTGVuZ3RoKDEpO1xuICAgICAgXG4gICAgICBjb25zdCBmZWF0dXJlID0gcmVzdWx0LmZlYXR1cmVzWzBdO1xuICAgICAgZXhwZWN0KGZlYXR1cmUudHlwZSkudG9CZSgnRmVhdHVyZScpO1xuICAgICAgZXhwZWN0KGZlYXR1cmUuZ2VvbWV0cnkudHlwZSkudG9CZSgnTGluZVN0cmluZycpO1xuICAgICAgZXhwZWN0KGZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXMpLnRvSGF2ZUxlbmd0aCgyKTtcbiAgICAgIGV4cGVjdChmZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzWzBdKS50b0VxdWFsKFttb2NrT3JpZ2luLmxhdCwgbW9ja09yaWdpbi5sbmddKTtcbiAgICAgIGV4cGVjdChmZWF0dXJlLmdlb21ldHJ5LmNvb3JkaW5hdGVzWzFdKS50b0VxdWFsKFttb2NrRGVzdGluYXRpb24ubGF0LCBtb2NrRGVzdGluYXRpb24ubG5nXSk7XG4gICAgICBcbiAgICAgIGV4cGVjdChmZWF0dXJlLnByb3BlcnRpZXMuZGlzdGFuY2UpLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICAgIGV4cGVjdChmZWF0dXJlLnByb3BlcnRpZXMuZHVyYXRpb24pLnRvQmVHcmVhdGVyVGhhbigwKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmV0dXJuIGZhbGxiYWNrIHJvdXRlIHdoZW4gQVBJIHJldHVybnMgZXJyb3Igc3RhdHVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gR2l2ZW5cbiAgICAgIG1vY2tGZXRjaC5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xuICAgICAgICBvazogZmFsc2UsXG4gICAgICAgIHN0YXR1czogNTAwLFxuICAgICAgICBqc29uOiBhc3luYyAoKSA9PiAoeyBlcnJvcjogJ0ludGVybmFsIHNlcnZlciBlcnJvcicgfSksXG4gICAgICB9KTtcblxuICAgICAgLy8gV2hlblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcm91dGluZ1NlcnZpY2UuZ2V0Um91dGUobW9ja09yaWdpbiwgbW9ja0Rlc3RpbmF0aW9uKTtcblxuICAgICAgLy8gVGhlblxuICAgICAgZXhwZWN0KHJlc3VsdC50eXBlKS50b0JlKCdGZWF0dXJlQ29sbGVjdGlvbicpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5mZWF0dXJlcykudG9IYXZlTGVuZ3RoKDEpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5mZWF0dXJlc1swXS5nZW9tZXRyeS5jb29yZGluYXRlcykudG9IYXZlTGVuZ3RoKDIpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZGlmZmVyZW50IGNvb3JkaW5hdGUgcGFpcnMgc2VwYXJhdGVseScsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEdpdmVuXG4gICAgICBjb25zdCBkaWZmZXJlbnREZXN0aW5hdGlvbjogTGF0TG5nID0geyBsYXQ6IDQxLjUwMDAsIGxuZzogMi4yMDAwIH07XG4gICAgICBcbiAgICAgIG1vY2tGZXRjaFxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgICBvazogdHJ1ZSxcbiAgICAgICAgICBqc29uOiBhc3luYyAoKSA9PiAoe1xuICAgICAgICAgICAgdHlwZTogJ0ZlYXR1cmVDb2xsZWN0aW9uJyxcbiAgICAgICAgICAgIGZlYXR1cmVzOiBbeyB0eXBlOiAnRmVhdHVyZScsIHByb3BlcnRpZXM6IHsgZGlzdGFuY2U6IDEwMDAsIGR1cmF0aW9uOiAxMjAgfSwgZ2VvbWV0cnk6IHsgdHlwZTogJ0xpbmVTdHJpbmcnLCBjb29yZGluYXRlczogW10gfSB9XSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgfSlcbiAgICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgICAgb2s6IHRydWUsXG4gICAgICAgICAganNvbjogYXN5bmMgKCkgPT4gKHtcbiAgICAgICAgICAgIHR5cGU6ICdGZWF0dXJlQ29sbGVjdGlvbicsXG4gICAgICAgICAgICBmZWF0dXJlczogW3sgdHlwZTogJ0ZlYXR1cmUnLCBwcm9wZXJ0aWVzOiB7IGRpc3RhbmNlOiAyMDAwLCBkdXJhdGlvbjogMjQwIH0sIGdlb21ldHJ5OiB7IHR5cGU6ICdMaW5lU3RyaW5nJywgY29vcmRpbmF0ZXM6IFtdIH0gfV0sXG4gICAgICAgICAgfSksXG4gICAgICAgIH0pO1xuXG4gICAgICAvLyBXaGVuXG4gICAgICBjb25zdCByZXN1bHQxID0gYXdhaXQgcm91dGluZ1NlcnZpY2UuZ2V0Um91dGUobW9ja09yaWdpbiwgbW9ja0Rlc3RpbmF0aW9uKTtcbiAgICAgIGNvbnN0IHJlc3VsdDIgPSBhd2FpdCByb3V0aW5nU2VydmljZS5nZXRSb3V0ZShtb2NrT3JpZ2luLCBkaWZmZXJlbnREZXN0aW5hdGlvbik7XG5cbiAgICAgIC8vIFRoZW5cbiAgICAgIGV4cGVjdChtb2NrRmV0Y2gpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygyKTtcbiAgICAgIGV4cGVjdChyZXN1bHQxLmZlYXR1cmVzWzBdLnByb3BlcnRpZXMuZGlzdGFuY2UpLnRvQmUoMTAwMCk7XG4gICAgICBleHBlY3QocmVzdWx0Mi5mZWF0dXJlc1swXS5wcm9wZXJ0aWVzLmRpc3RhbmNlKS50b0JlKDIwMDApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnY2xlYXJDYWNoZScsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGNsZWFyIGNhY2hlZCByb3V0ZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBHaXZlblxuICAgICAgbW9ja0ZldGNoLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIG9rOiB0cnVlLFxuICAgICAgICBqc29uOiBhc3luYyAoKSA9PiAoe1xuICAgICAgICAgIHR5cGU6ICdGZWF0dXJlQ29sbGVjdGlvbicsXG4gICAgICAgICAgZmVhdHVyZXM6IFt7IHR5cGU6ICdGZWF0dXJlJywgcHJvcGVydGllczogeyBkaXN0YW5jZTogMTAwMCwgZHVyYXRpb246IDEyMCB9LCBnZW9tZXRyeTogeyB0eXBlOiAnTGluZVN0cmluZycsIGNvb3JkaW5hdGVzOiBbXSB9IH1dLFxuICAgICAgICB9KSxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBXaGVuXG4gICAgICBhd2FpdCByb3V0aW5nU2VydmljZS5nZXRSb3V0ZShtb2NrT3JpZ2luLCBtb2NrRGVzdGluYXRpb24pO1xuICAgICAgcm91dGluZ1NlcnZpY2UuY2xlYXJDYWNoZSgpO1xuICAgICAgYXdhaXQgcm91dGluZ1NlcnZpY2UuZ2V0Um91dGUobW9ja09yaWdpbiwgbW9ja0Rlc3RpbmF0aW9uKTtcblxuICAgICAgLy8gVGhlblxuICAgICAgZXhwZWN0KG1vY2tGZXRjaCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDIpOyAvLyBDYWxsZWQgdHdpY2UgYmVjYXVzZSBjYWNoZSB3YXMgY2xlYXJlZFxuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZmFsbGJhY2sgcm91dGUgY2FsY3VsYXRpb24nLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBjYWxjdWxhdGUgcmVhc29uYWJsZSBkaXN0YW5jZSBhbmQgZHVyYXRpb24gZm9yIGZhbGxiYWNrJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gR2l2ZW5cbiAgICAgIG1vY2tGZXRjaC5tb2NrUmVqZWN0ZWRWYWx1ZU9uY2UobmV3IEVycm9yKCdBUEkgZXJyb3InKSk7XG5cbiAgICAgIC8vIFdoZW5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJvdXRpbmdTZXJ2aWNlLmdldFJvdXRlKG1vY2tPcmlnaW4sIG1vY2tEZXN0aW5hdGlvbik7XG5cbiAgICAgIC8vIFRoZW5cbiAgICAgIGNvbnN0IGZlYXR1cmUgPSByZXN1bHQuZmVhdHVyZXNbMF07XG4gICAgICBleHBlY3QoZmVhdHVyZS5wcm9wZXJ0aWVzLmRpc3RhbmNlKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgICBleHBlY3QoZmVhdHVyZS5wcm9wZXJ0aWVzLmR1cmF0aW9uKS50b0JlR3JlYXRlclRoYW4oMCk7XG4gICAgICBcbiAgICAgIC8vIERpc3RhbmNlIHNob3VsZCBiZSByZWFzb25hYmxlIGZvciBCYXJjZWxvbmEgY29vcmRpbmF0ZXNcbiAgICAgIGV4cGVjdChmZWF0dXJlLnByb3BlcnRpZXMuZGlzdGFuY2UpLnRvQmVMZXNzVGhhbigxMDAwMDApOyAvLyBMZXNzIHRoYW4gMTAwa21cbiAgICAgIGV4cGVjdChmZWF0dXJlLnByb3BlcnRpZXMuZHVyYXRpb24pLnRvQmVMZXNzVGhhbig3MjAwKTsgLy8gTGVzcyB0aGFuIDIgaG91cnNcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHNhbWUgb3JpZ2luIGFuZCBkZXN0aW5hdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIEdpdmVuXG4gICAgICBtb2NrRmV0Y2gubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcignQVBJIGVycm9yJykpO1xuXG4gICAgICAvLyBXaGVuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByb3V0aW5nU2VydmljZS5nZXRSb3V0ZShtb2NrT3JpZ2luLCBtb2NrT3JpZ2luKTtcblxuICAgICAgLy8gVGhlblxuICAgICAgY29uc3QgZmVhdHVyZSA9IHJlc3VsdC5mZWF0dXJlc1swXTtcbiAgICAgIGV4cGVjdChmZWF0dXJlLnByb3BlcnRpZXMuZGlzdGFuY2UpLnRvQmUoMCk7XG4gICAgICBleHBlY3QoZmVhdHVyZS5wcm9wZXJ0aWVzLmR1cmF0aW9uKS50b0JlKDApO1xuICAgICAgZXhwZWN0KGZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXMpLnRvRXF1YWwoW1xuICAgICAgICBbbW9ja09yaWdpbi5sYXQsIG1vY2tPcmlnaW4ubG5nXSxcbiAgICAgICAgW21vY2tPcmlnaW4ubGF0LCBtb2NrT3JpZ2luLmxuZ10sXG4gICAgICBdKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==