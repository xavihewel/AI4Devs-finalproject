ee94b320ef8f7b0b62276c1011f7f888
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("@testing-library/react");
const Input_1 = require("./Input");
describe('Input', () => {
    it('renders input element', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(Input_1.Input, {}));
        expect(react_1.screen.getByRole('textbox')).toBeInTheDocument();
    });
    it('renders with label', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(Input_1.Input, { label: "Test Label" }));
        expect(react_1.screen.getByLabelText('Test Label')).toBeInTheDocument();
    });
    it('shows error message when error prop is provided', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(Input_1.Input, { error: "This is an error" }));
        expect(react_1.screen.getByText('This is an error')).toBeInTheDocument();
    });
    it('shows helper text when helperText prop is provided', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(Input_1.Input, { helperText: "This is helper text" }));
        expect(react_1.screen.getByText('This is helper text')).toBeInTheDocument();
    });
    it('does not show helper text when error is present', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(Input_1.Input, { helperText: "Helper text", error: "Error text" }));
        expect(react_1.screen.getByText('Error text')).toBeInTheDocument();
        expect(react_1.screen.queryByText('Helper text')).not.toBeInTheDocument();
    });
    it('handles input changes', () => {
        const handleChange = jest.fn();
        (0, react_1.render)((0, jsx_runtime_1.jsx)(Input_1.Input, { onChange: handleChange }));
        const input = react_1.screen.getByRole('textbox');
        react_1.fireEvent.change(input, { target: { value: 'test value' } });
        expect(handleChange).toHaveBeenCalledTimes(1);
    });
    it('applies error styling when error is present', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(Input_1.Input, { error: "Error" }));
        const input = react_1.screen.getByRole('textbox');
        expect(input).toHaveClass('border-red-300', 'focus:border-red-500');
    });
    it('accepts custom className', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(Input_1.Input, { className: "custom-class" }));
        expect(react_1.screen.getByRole('textbox')).toHaveClass('custom-class');
    });
});
describe('Select', () => {
    const options = [
        { value: 'option1', label: 'Option 1' },
        { value: 'option2', label: 'Option 2' },
    ];
    it('renders select element with options', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(Input_1.Select, { options: options }));
        expect(react_1.screen.getByRole('combobox')).toBeInTheDocument();
        expect(react_1.screen.getByText('Option 1')).toBeInTheDocument();
        expect(react_1.screen.getByText('Option 2')).toBeInTheDocument();
    });
    it('renders with label', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(Input_1.Select, { label: "Test Label", options: options }));
        expect(react_1.screen.getByLabelText('Test Label')).toBeInTheDocument();
    });
    it('shows error message when error prop is provided', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(Input_1.Select, { options: options, error: "This is an error" }));
        expect(react_1.screen.getByText('This is an error')).toBeInTheDocument();
    });
    it('handles select changes', () => {
        const handleChange = jest.fn();
        (0, react_1.render)((0, jsx_runtime_1.jsx)(Input_1.Select, { options: options, onChange: handleChange }));
        const select = react_1.screen.getByRole('combobox');
        react_1.fireEvent.change(select, { target: { value: 'option2' } });
        expect(handleChange).toHaveBeenCalledTimes(1);
    });
    it('applies error styling when error is present', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(Input_1.Select, { options: options, error: "Error" }));
        const select = react_1.screen.getByRole('combobox');
        expect(select).toHaveClass('border-red-300', 'focus:border-red-500');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,