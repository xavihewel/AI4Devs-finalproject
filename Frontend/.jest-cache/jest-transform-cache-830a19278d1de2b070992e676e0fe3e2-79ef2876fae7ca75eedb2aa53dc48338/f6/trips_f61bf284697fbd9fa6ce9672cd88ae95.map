{"file":"/Users/admin/Documents/AI4Devs-finalproject/Frontend/src/api/trips.ts","mappings":";;;;;;AAAA,kDAA0B;AAC1B,+CAA+C;AAC/C,gCAA6B;AAG7B,MAAM,QAAQ,GAAG,eAAK,CAAC,MAAM,CAAC;IAC5B,OAAO,EAAE,SAAG,CAAC,eAAe;CAC7B,CAAC,CAAC;AAEH,QAAQ,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;IACjD,MAAM,QAAQ,GAAG,IAAA,sBAAW,GAAE,CAAC;IAC/B,IAAI,QAAQ,EAAE,CAAC;QACb,IAAI,CAAC;YACH,MAAM,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QAChC,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC,CAAA,CAAC;QACd,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;QAC7B,IAAI,KAAK,EAAE,CAAC;YACV,MAAM,CAAC,OAAO,CAAC,aAAa,GAAG,UAAU,KAAK,EAAE,CAAC;QACnD,CAAC;IACH,CAAC;IACD,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC,CAAC;AAEH,MAAa,YAAY;IACvB;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,WAAW;QACtB,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,GAAG,CAAY,QAAQ,CAAC,CAAC;QACzD,OAAO,QAAQ,CAAC,IAAI,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,qBAAqB,CAAC,iBAAyB;QAC1D,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,GAAG,CAAY,4BAA4B,iBAAiB,EAAE,CAAC,CAAC;QAChG,OAAO,QAAQ,CAAC,IAAI,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,EAAU;QACjC,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,GAAG,CAAU,UAAU,EAAE,EAAE,CAAC,CAAC;QAC7D,OAAO,QAAQ,CAAC,IAAI,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,QAAuB;QAC7C,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,IAAI,CAAU,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAClE,OAAO,QAAQ,CAAC,IAAI,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,EAAU,EAAE,QAAgC;QAClE,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,GAAG,CAAU,UAAU,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAC;QACvE,OAAO,QAAQ,CAAC,IAAI,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,EAAU;QAChC,MAAM,QAAQ,CAAC,MAAM,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;IACxC,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,UAAU;QACrB,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,GAAG,CAAY,iBAAiB,CAAC,CAAC;QAClE,OAAO,QAAQ,CAAC,IAAI,CAAC;IACvB,CAAC;CACF;AAvDD,oCAuDC","names":[],"sources":["/Users/admin/Documents/AI4Devs-finalproject/Frontend/src/api/trips.ts"],"sourcesContent":["import axios from 'axios';\nimport { getKeycloak } from '../auth/keycloak';\nimport { env } from '../env';\nimport type { TripDto, TripCreateDto } from '../types/api';\n\nconst tripsApi = axios.create({\n  baseURL: env.tripsApiBaseUrl,\n});\n\ntripsApi.interceptors.request.use(async (config) => {\n  const keycloak = getKeycloak();\n  if (keycloak) {\n    try {\n      await keycloak.updateToken(5);\n    } catch (_) {}\n    const token = keycloak.token;\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n  }\n  return config;\n});\n\nexport class TripsService {\n  /**\n   * Get all trips\n   */\n  static async getAllTrips(): Promise<TripDto[]> {\n    const response = await tripsApi.get<TripDto[]>('/trips');\n    return response.data;\n  }\n\n  /**\n   * Get trips by destination\n   */\n  static async getTripsByDestination(destinationSedeId: string): Promise<TripDto[]> {\n    const response = await tripsApi.get<TripDto[]>(`/trips?destinationSedeId=${destinationSedeId}`);\n    return response.data;\n  }\n\n  /**\n   * Get a specific trip by ID\n   */\n  static async getTripById(id: string): Promise<TripDto> {\n    const response = await tripsApi.get<TripDto>(`/trips/${id}`);\n    return response.data;\n  }\n\n  /**\n   * Create a new trip\n   */\n  static async createTrip(tripData: TripCreateDto): Promise<TripDto> {\n    const response = await tripsApi.post<TripDto>('/trips', tripData);\n    return response.data;\n  }\n\n  /**\n   * Update an existing trip\n   */\n  static async updateTrip(id: string, tripData: Partial<TripCreateDto>): Promise<TripDto> {\n    const response = await tripsApi.put<TripDto>(`/trips/${id}`, tripData);\n    return response.data;\n  }\n\n  /**\n   * Delete a trip\n   */\n  static async deleteTrip(id: string): Promise<void> {\n    await tripsApi.delete(`/trips/${id}`);\n  }\n\n  /**\n   * Get trips created by the current user\n   */\n  static async getMyTrips(): Promise<TripDto[]> {\n    const response = await tripsApi.get<TripDto[]>('/trips/my-trips');\n    return response.data;\n  }\n}\n"],"version":3}