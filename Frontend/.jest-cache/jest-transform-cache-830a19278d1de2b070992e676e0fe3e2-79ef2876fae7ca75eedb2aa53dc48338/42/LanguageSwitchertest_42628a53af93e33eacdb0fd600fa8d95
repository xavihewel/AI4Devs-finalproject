3e0e781182e65cfb911f4686f0488ac3
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const react_i18next_1 = require("react-i18next");
const config_1 = __importDefault(require("../i18n/config"));
const LanguageSwitcher_1 = require("./LanguageSwitcher");
// Mock i18n for testing
const mockI18n = {
    ...config_1.default,
    changeLanguage: jest.fn(),
    language: 'ca',
    on: jest.fn(),
    off: jest.fn(),
    emit: jest.fn(),
    hasResourceBundle: jest.fn(() => true),
    getResourceBundle: jest.fn(),
    options: {
        fallbackLng: 'en',
        defaultNS: 'common',
    },
};
describe('LanguageSwitcher', () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    test('renders current language', () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(react_i18next_1.I18nextProvider, { i18n: mockI18n, children: (0, jsx_runtime_1.jsx)(LanguageSwitcher_1.LanguageSwitcher, {}) }));
        expect(react_2.screen.getByText('Català')).toBeInTheDocument();
        // Avoid brittle emoji assertion (glyphs can differ in environments)
    });
    test('renders language switcher button', () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(react_i18next_1.I18nextProvider, { i18n: mockI18n, children: (0, jsx_runtime_1.jsx)(LanguageSwitcher_1.LanguageSwitcher, {}) }));
        const button = react_2.screen.getByRole('button');
        expect(button).toBeInTheDocument();
        expect(button).toHaveTextContent('Català');
    });
    test('opens dropdown when clicked', () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(react_i18next_1.I18nextProvider, { i18n: mockI18n, children: (0, jsx_runtime_1.jsx)(LanguageSwitcher_1.LanguageSwitcher, {}) }));
        const button = react_2.screen.getByRole('button');
        react_2.fireEvent.click(button);
        // Dropdown should be visible
        expect(react_2.screen.getByText('Español')).toBeInTheDocument();
    });
    test('calls i18n.changeLanguage when language is selected', () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(react_i18next_1.I18nextProvider, { i18n: mockI18n, children: (0, jsx_runtime_1.jsx)(LanguageSwitcher_1.LanguageSwitcher, {}) }));
        const button = react_2.screen.getByRole('button');
        react_2.fireEvent.click(button);
        const spanishButton = react_2.screen.getByText('Español');
        react_2.fireEvent.click(spanishButton);
        expect(mockI18n.changeLanguage).toHaveBeenCalledWith('es');
    });
    test('shows all languages in dropdown', () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(react_i18next_1.I18nextProvider, { i18n: mockI18n, children: (0, jsx_runtime_1.jsx)(LanguageSwitcher_1.LanguageSwitcher, {}) }));
        const button = react_2.screen.getByRole('button');
        react_2.fireEvent.click(button);
        // Check all languages are displayed in dropdown
        expect(react_2.screen.getAllByText('Català')).toHaveLength(2); // One in button, one in dropdown
        expect(react_2.screen.getByText('Español')).toBeInTheDocument();
        expect(react_2.screen.getByText('Română')).toBeInTheDocument();
        expect(react_2.screen.getByText('Українська')).toBeInTheDocument();
        expect(react_2.screen.getByText('English')).toBeInTheDocument();
        expect(react_2.screen.getByText('Français')).toBeInTheDocument();
    });
    test('handles language change with different current language', () => {
        const mockI18nWithSpanish = {
            ...mockI18n,
            language: 'es',
        };
        (0, react_2.render)((0, jsx_runtime_1.jsx)(react_i18next_1.I18nextProvider, { i18n: mockI18nWithSpanish, children: (0, jsx_runtime_1.jsx)(LanguageSwitcher_1.LanguageSwitcher, {}) }));
        // Spanish should be displayed as current language
        expect(react_2.screen.getByText('Español')).toBeInTheDocument();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,