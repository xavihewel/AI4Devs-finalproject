2f1a6143cbbadeb1034a990659eb1603
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock axios.create used inside the service
globals_1.jest.mock('axios', () => {
    const instance = {
        get: globals_1.jest.fn(),
        interceptors: {
            request: {
                use: globals_1.jest.fn(),
            },
        },
    };
    return {
        __esModule: true,
        default: {
            create: () => instance,
            _instance: instance,
        },
        create: () => instance,
        _instance: instance,
    };
});
const matches_1 = require("./matches");
const axios_1 = __importDefault(require("axios"));
(0, globals_1.describe)('MatchesService', () => {
    (0, globals_1.beforeEach)(() => {
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.describe)('findMatches', () => {
        (0, globals_1.it)('should find matches with all parameters', async () => {
            const mockMatches = [
                {
                    id: '1',
                    tripId: 'trip1',
                    driverId: 'driver1',
                    origin: '40.4168,-3.7038',
                    destinationSedeId: 'SEDE-1',
                    dateTime: '2024-01-01T08:00:00Z',
                    seatsFree: 2,
                    score: 0.85,
                    reasons: ['Ubicación cercana', 'Horario compatible'],
                },
            ];
            axios_1.default._instance.get.mockResolvedValue({ data: mockMatches });
            const params = {
                destinationSedeId: 'SEDE-1',
                time: '08:30',
                origin: '40.4168,-3.7038',
            };
            const result = await matches_1.MatchesService.findMatches(params);
            (0, globals_1.expect)(axios_1.default._instance.get).toHaveBeenCalledWith('/matches?destinationSedeId=SEDE-1&time=08%3A30&origin=40.4168%2C-3.7038');
            (0, globals_1.expect)(result).toEqual(mockMatches);
        });
        (0, globals_1.it)('should find matches with only destination', async () => {
            const mockMatches = [];
            axios_1.default._instance.get.mockResolvedValue({ data: mockMatches });
            const params = {
                destinationSedeId: 'SEDE-1',
            };
            const result = await matches_1.MatchesService.findMatches(params);
            (0, globals_1.expect)(axios_1.default._instance.get).toHaveBeenCalledWith('/matches?destinationSedeId=SEDE-1');
            (0, globals_1.expect)(result).toEqual(mockMatches);
        });
        (0, globals_1.it)('should find matches with destination and time', async () => {
            const mockMatches = [];
            axios_1.default._instance.get.mockResolvedValue({ data: mockMatches });
            const params = {
                destinationSedeId: 'SEDE-1',
                time: '09:00',
            };
            const result = await matches_1.MatchesService.findMatches(params);
            (0, globals_1.expect)(axios_1.default._instance.get).toHaveBeenCalledWith('/matches?destinationSedeId=SEDE-1&time=09%3A00');
            (0, globals_1.expect)(result).toEqual(mockMatches);
        });
        (0, globals_1.it)('propagates API errors', async () => {
            axios_1.default._instance.get.mockRejectedValueOnce(new Error('Network Error'));
            await (0, globals_1.expect)(matches_1.MatchesService.findMatches({ destinationSedeId: 'SEDE-1' })).rejects.toThrow('Network Error');
        });
    });
    (0, globals_1.describe)('getMyMatches', () => {
        (0, globals_1.it)('should fetch user matches', async () => {
            const mockMatches = [];
            axios_1.default._instance.get.mockResolvedValue({ data: mockMatches });
            const result = await matches_1.MatchesService.getMyMatches();
            (0, globals_1.expect)(axios_1.default._instance.get).toHaveBeenCalledWith('/matches/my-matches');
            (0, globals_1.expect)(result).toEqual(mockMatches);
        });
    });
    (0, globals_1.describe)('getMatchById', () => {
        (0, globals_1.it)('should fetch match by id', async () => {
            const mockMatch = {
                id: '1',
                tripId: 'trip1',
                driverId: 'driver1',
                origin: '40.4168,-3.7038',
                destinationSedeId: 'SEDE-1',
                dateTime: '2024-01-01T08:00:00Z',
                seatsFree: 2,
                score: 0.85,
                reasons: ['Ubicación cercana'],
            };
            axios_1.default._instance.get.mockResolvedValue({ data: mockMatch });
            const result = await matches_1.MatchesService.getMatchById('1');
            (0, globals_1.expect)(axios_1.default._instance.get).toHaveBeenCalledWith('/matches/1');
            (0, globals_1.expect)(result).toEqual(mockMatch);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,