f3cb2e7d7c24fdad034614580d0100a9
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.RatingsList = RatingsList;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const ratings_1 = require("../../api/ratings");
const Card_1 = require("../ui/Card");
const LoadingSpinner_1 = require("../ui/LoadingSpinner");
function RatingsList({ userId, userName }) {
    const [ratings, setRatings] = (0, react_1.useState)([]);
    const [loading, setLoading] = (0, react_1.useState)(true);
    const [error, setError] = (0, react_1.useState)(null);
    (0, react_1.useEffect)(() => {
        loadRatings();
    }, [userId]);
    const loadRatings = async () => {
        try {
            setLoading(true);
            setError(null);
            const ratingsData = await ratings_1.RatingsService.getRatingsForUser(userId);
            setRatings(ratingsData);
        }
        catch (err) {
            setError('Error al cargar las valoraciones');
            console.error('Error loading ratings:', err);
        }
        finally {
            setLoading(false);
        }
    };
    const formatDate = (dateString) => {
        return new Date(dateString).toLocaleDateString('es-ES', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
        });
    };
    if (loading) {
        return ((0, jsx_runtime_1.jsx)(Card_1.Card, { children: (0, jsx_runtime_1.jsx)("div", { className: "flex justify-center items-center h-32", children: (0, jsx_runtime_1.jsx)(LoadingSpinner_1.LoadingSpinner, { size: "md" }) }) }));
    }
    if (error) {
        return ((0, jsx_runtime_1.jsx)(Card_1.Card, { children: (0, jsx_runtime_1.jsx)("div", { className: "text-center text-red-600 p-4", children: error }) }));
    }
    if (ratings.length === 0) {
        return ((0, jsx_runtime_1.jsx)(Card_1.Card, { children: (0, jsx_runtime_1.jsx)("div", { className: "text-center text-gray-600 p-4", children: "No hay valoraciones disponibles" }) }));
    }
    return ((0, jsx_runtime_1.jsx)(Card_1.Card, { children: (0, jsx_runtime_1.jsxs)("div", { className: "p-6", children: [(0, jsx_runtime_1.jsxs)("h3", { className: "text-lg font-semibold text-gray-900 mb-4", children: ["Valoraciones ", userName && `de ${userName}`] }), (0, jsx_runtime_1.jsx)("div", { className: "space-y-4", children: ratings.map((rating) => ((0, jsx_runtime_1.jsxs)("div", { className: "border-b border-gray-200 pb-4 last:border-b-0", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-start justify-between mb-2", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center space-x-2", children: [(0, jsx_runtime_1.jsx)("span", { className: `text-2xl ${rating.ratingType === 'THUMBS_UP' ? 'text-green-600' : 'text-red-600'}`, children: rating.ratingType === 'THUMBS_UP' ? '👍' : '👎' }), (0, jsx_runtime_1.jsx)("span", { className: "text-sm text-gray-600", children: formatDate(rating.createdAt) })] }), rating.tripId && ((0, jsx_runtime_1.jsx)("span", { className: "text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded", children: "Viaje espec\u00EDfico" }))] }), rating.tags.length > 0 && ((0, jsx_runtime_1.jsx)("div", { className: "mb-2", children: (0, jsx_runtime_1.jsx)("div", { className: "flex flex-wrap gap-1", children: rating.tags.map((tag, index) => ((0, jsx_runtime_1.jsx)("span", { className: "px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full", children: tag }, index))) }) })), rating.comment && ((0, jsx_runtime_1.jsxs)("div", { className: "text-sm text-gray-700 bg-gray-50 p-3 rounded", children: ["\"", rating.comment, "\""] }))] }, rating.id))) })] }) }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,