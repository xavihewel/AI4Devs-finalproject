0e5191c88fe674f888c3791c5296f615
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SeatSelectionModal = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const react_i18next_1 = require("react-i18next");
const Card_1 = require("../ui/Card");
const Button_1 = require("../ui/Button");
// Single Responsibility Principle: Component only handles seat selection UI
const SeatSelectionModal = ({ isOpen, onClose, onConfirm, maxSeats, loading = false }) => {
    const { t } = (0, react_i18next_1.useTranslation)('matches');
    const [selectedSeats, setSelectedSeats] = (0, react_1.useState)(1);
    // Reset selection when modal opens (Dependency Inversion: depends on abstraction)
    (0, react_1.useEffect)(() => {
        if (isOpen) {
            setSelectedSeats(1);
        }
    }, [isOpen]);
    // Open/Closed Principle: Easy to extend with new seat selection logic
    const handleSeatSelection = (seatCount) => {
        if (seatCount >= 1 && seatCount <= maxSeats) {
            setSelectedSeats(seatCount);
        }
    };
    const handleConfirm = () => {
        onConfirm(selectedSeats);
    };
    // Liskov Substitution Principle: Component can be replaced with any modal implementation
    if (!isOpen)
        return null;
    return ((0, jsx_runtime_1.jsx)("div", { className: "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4", children: (0, jsx_runtime_1.jsx)("div", { className: "bg-white rounded-lg shadow-xl max-w-md w-full", children: (0, jsx_runtime_1.jsxs)(Card_1.Card, { children: [(0, jsx_runtime_1.jsx)(Card_1.CardHeader, { children: (0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between items-center", children: [(0, jsx_runtime_1.jsx)(Card_1.CardTitle, { children: t('match.selectSeats') }), (0, jsx_runtime_1.jsx)(Button_1.Button, { variant: "secondary", size: "sm", onClick: onClose, disabled: loading, "aria-label": "Close modal", children: "\u2715" })] }) }), (0, jsx_runtime_1.jsx)(Card_1.CardContent, { children: (0, jsx_runtime_1.jsxs)("div", { className: "space-y-6", children: [(0, jsx_runtime_1.jsxs)("div", { className: "text-center", children: [(0, jsx_runtime_1.jsx)("p", { className: "text-lg font-medium text-gray-900", children: t('match.availableSeats', { seats: maxSeats }) }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-gray-600 mt-1", children: t('match.selectSeatsDescription') })] }), (0, jsx_runtime_1.jsx)("div", { className: "grid grid-cols-3 gap-3", children: Array.from({ length: maxSeats }, (_, i) => i + 1).map((seatCount) => ((0, jsx_runtime_1.jsx)(Button_1.Button, { variant: selectedSeats === seatCount ? 'primary' : 'secondary', size: "lg", onClick: () => handleSeatSelection(seatCount), className: "aspect-square text-xl font-bold py-4", "aria-label": `Select ${seatCount} seat${seatCount > 1 ? 's' : ''}`, children: seatCount }, seatCount))) }), (0, jsx_runtime_1.jsxs)("div", { className: "bg-gray-50 rounded-lg p-4 text-center", children: [(0, jsx_runtime_1.jsx)("p", { className: "text-sm text-gray-600 mb-1", children: t('match.selectedSeats') }), (0, jsx_runtime_1.jsxs)("p", { className: "text-2xl font-bold text-primary-600", children: [selectedSeats, " ", selectedSeats === 1 ? t('match.seat') : t('match.seats')] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "flex space-x-3 pt-4", children: [(0, jsx_runtime_1.jsx)(Button_1.Button, { variant: "primary", onClick: handleConfirm, loading: loading, disabled: loading, className: "flex-1", children: t('match.confirmBooking') }), (0, jsx_runtime_1.jsx)(Button_1.Button, { variant: "secondary", onClick: onClose, disabled: loading, className: "flex-1", children: t('common:cancel') })] })] }) })] }) }) }));
};
exports.SeatSelectionModal = SeatSelectionModal;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2FkbWluL0RvY3VtZW50cy9BSTREZXZzLWZpbmFscHJvamVjdC9Gcm9udGVuZC9zcmMvY29tcG9uZW50cy9ib29raW5nL1NlYXRTZWxlY3Rpb25Nb2RhbC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLCtDQUFtRDtBQUNuRCxpREFBK0M7QUFDL0MscUNBQXNFO0FBQ3RFLHlDQUFzQztBQVd0Qyw0RUFBNEU7QUFDckUsTUFBTSxrQkFBa0IsR0FBc0MsQ0FBQyxFQUNwRSxNQUFNLEVBQ04sT0FBTyxFQUNQLFNBQVMsRUFDVCxRQUFRLEVBQ1IsT0FBTyxHQUFHLEtBQUssRUFDaEIsRUFBRSxFQUFFO0lBQ0gsTUFBTSxFQUFFLENBQUMsRUFBRSxHQUFHLElBQUEsOEJBQWMsRUFBQyxTQUFTLENBQUMsQ0FBQztJQUN4QyxNQUFNLENBQUMsYUFBYSxFQUFFLGdCQUFnQixDQUFDLEdBQUcsSUFBQSxnQkFBUSxFQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXRELGtGQUFrRjtJQUNsRixJQUFBLGlCQUFTLEVBQUMsR0FBRyxFQUFFO1FBQ2IsSUFBSSxNQUFNLEVBQUUsQ0FBQztZQUNYLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLENBQUM7SUFDSCxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBRWIsc0VBQXNFO0lBQ3RFLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxTQUFpQixFQUFFLEVBQUU7UUFDaEQsSUFBSSxTQUFTLElBQUksQ0FBQyxJQUFJLFNBQVMsSUFBSSxRQUFRLEVBQUUsQ0FBQztZQUM1QyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM5QixDQUFDO0lBQ0gsQ0FBQyxDQUFDO0lBRUYsTUFBTSxhQUFhLEdBQUcsR0FBRyxFQUFFO1FBQ3pCLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUMzQixDQUFDLENBQUM7SUFFRix5RkFBeUY7SUFDekYsSUFBSSxDQUFDLE1BQU07UUFBRSxPQUFPLElBQUksQ0FBQztJQUV6QixPQUFPLENBQ0wsZ0NBQUssU0FBUyxFQUFDLGdGQUFnRixZQUM3RixnQ0FBSyxTQUFTLEVBQUMsK0NBQStDLFlBQzVELHdCQUFDLFdBQUksZUFDSCx1QkFBQyxpQkFBVSxjQUNULGlDQUFLLFNBQVMsRUFBQyxtQ0FBbUMsYUFDaEQsdUJBQUMsZ0JBQVMsY0FBRSxDQUFDLENBQUMsbUJBQW1CLENBQUMsR0FBYSxFQUMvQyx1QkFBQyxlQUFNLElBQ0wsT0FBTyxFQUFDLFdBQVcsRUFDbkIsSUFBSSxFQUFDLElBQUksRUFDVCxPQUFPLEVBQUUsT0FBTyxFQUNoQixRQUFRLEVBQUUsT0FBTyxnQkFDTixhQUFhLHVCQUdqQixJQUNMLEdBQ0ssRUFDYix1QkFBQyxrQkFBVyxjQUNWLGlDQUFLLFNBQVMsRUFBQyxXQUFXLGFBRXhCLGlDQUFLLFNBQVMsRUFBQyxhQUFhLGFBQzFCLDhCQUFHLFNBQVMsRUFBQyxtQ0FBbUMsWUFDN0MsQ0FBQyxDQUFDLHNCQUFzQixFQUFFLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxDQUFDLEdBQzdDLEVBQ0osOEJBQUcsU0FBUyxFQUFDLDRCQUE0QixZQUN0QyxDQUFDLENBQUMsOEJBQThCLENBQUMsR0FDaEMsSUFDQSxFQUdOLGdDQUFLLFNBQVMsRUFBQyx3QkFBd0IsWUFDcEMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQ3BFLHVCQUFDLGVBQU0sSUFFTCxPQUFPLEVBQUUsYUFBYSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQzlELElBQUksRUFBQyxJQUFJLEVBQ1QsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxFQUM3QyxTQUFTLEVBQUMsc0NBQXNDLGdCQUNwQyxVQUFVLFNBQVMsUUFBUSxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxZQUVoRSxTQUFTLElBUEwsU0FBUyxDQVFQLENBQ1YsQ0FBQyxHQUNFLEVBR04saUNBQUssU0FBUyxFQUFDLHVDQUF1QyxhQUNwRCw4QkFBRyxTQUFTLEVBQUMsNEJBQTRCLFlBQ3RDLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxHQUN2QixFQUNKLCtCQUFHLFNBQVMsRUFBQyxxQ0FBcUMsYUFDL0MsYUFBYSxPQUFHLGFBQWEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxJQUN2RSxJQUNBLEVBR04saUNBQUssU0FBUyxFQUFDLHFCQUFxQixhQUNsQyx1QkFBQyxlQUFNLElBQ0wsT0FBTyxFQUFDLFNBQVMsRUFDakIsT0FBTyxFQUFFLGFBQWEsRUFDdEIsT0FBTyxFQUFFLE9BQU8sRUFDaEIsUUFBUSxFQUFFLE9BQU8sRUFDakIsU0FBUyxFQUFDLFFBQVEsWUFFakIsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLEdBQ25CLEVBQ1QsdUJBQUMsZUFBTSxJQUNMLE9BQU8sRUFBQyxXQUFXLEVBQ25CLE9BQU8sRUFBRSxPQUFPLEVBQ2hCLFFBQVEsRUFBRSxPQUFPLEVBQ2pCLFNBQVMsRUFBQyxRQUFRLFlBRWpCLENBQUMsQ0FBQyxlQUFlLENBQUMsR0FDWixJQUNMLElBQ0YsR0FDTSxJQUNULEdBQ0gsR0FDRixDQUNQLENBQUM7QUFDSixDQUFDLENBQUM7QUFqSFcsUUFBQSxrQkFBa0Isc0JBaUg3QiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvYWRtaW4vRG9jdW1lbnRzL0FJNERldnMtZmluYWxwcm9qZWN0L0Zyb250ZW5kL3NyYy9jb21wb25lbnRzL2Jvb2tpbmcvU2VhdFNlbGVjdGlvbk1vZGFsLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVRyYW5zbGF0aW9uIH0gZnJvbSAncmVhY3QtaTE4bmV4dCc7XG5pbXBvcnQgeyBDYXJkLCBDYXJkQ29udGVudCwgQ2FyZEhlYWRlciwgQ2FyZFRpdGxlIH0gZnJvbSAnLi4vdWkvQ2FyZCc7XG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tICcuLi91aS9CdXR0b24nO1xuXG4vLyBJbnRlcmZhY2UgU2VncmVnYXRpb24gUHJpbmNpcGxlOiBTbWFsbCwgZm9jdXNlZCBpbnRlcmZhY2VcbmludGVyZmFjZSBTZWF0U2VsZWN0aW9uTW9kYWxQcm9wcyB7XG4gIGlzT3BlbjogYm9vbGVhbjtcbiAgb25DbG9zZTogKCkgPT4gdm9pZDtcbiAgb25Db25maXJtOiAoc2VhdHM6IG51bWJlcikgPT4gdm9pZDtcbiAgbWF4U2VhdHM6IG51bWJlcjtcbiAgbG9hZGluZz86IGJvb2xlYW47XG59XG5cbi8vIFNpbmdsZSBSZXNwb25zaWJpbGl0eSBQcmluY2lwbGU6IENvbXBvbmVudCBvbmx5IGhhbmRsZXMgc2VhdCBzZWxlY3Rpb24gVUlcbmV4cG9ydCBjb25zdCBTZWF0U2VsZWN0aW9uTW9kYWw6IFJlYWN0LkZDPFNlYXRTZWxlY3Rpb25Nb2RhbFByb3BzPiA9ICh7XG4gIGlzT3BlbixcbiAgb25DbG9zZSxcbiAgb25Db25maXJtLFxuICBtYXhTZWF0cyxcbiAgbG9hZGluZyA9IGZhbHNlXG59KSA9PiB7XG4gIGNvbnN0IHsgdCB9ID0gdXNlVHJhbnNsYXRpb24oJ21hdGNoZXMnKTtcbiAgY29uc3QgW3NlbGVjdGVkU2VhdHMsIHNldFNlbGVjdGVkU2VhdHNdID0gdXNlU3RhdGUoMSk7XG5cbiAgLy8gUmVzZXQgc2VsZWN0aW9uIHdoZW4gbW9kYWwgb3BlbnMgKERlcGVuZGVuY3kgSW52ZXJzaW9uOiBkZXBlbmRzIG9uIGFic3RyYWN0aW9uKVxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChpc09wZW4pIHtcbiAgICAgIHNldFNlbGVjdGVkU2VhdHMoMSk7XG4gICAgfVxuICB9LCBbaXNPcGVuXSk7XG5cbiAgLy8gT3Blbi9DbG9zZWQgUHJpbmNpcGxlOiBFYXN5IHRvIGV4dGVuZCB3aXRoIG5ldyBzZWF0IHNlbGVjdGlvbiBsb2dpY1xuICBjb25zdCBoYW5kbGVTZWF0U2VsZWN0aW9uID0gKHNlYXRDb3VudDogbnVtYmVyKSA9PiB7XG4gICAgaWYgKHNlYXRDb3VudCA+PSAxICYmIHNlYXRDb3VudCA8PSBtYXhTZWF0cykge1xuICAgICAgc2V0U2VsZWN0ZWRTZWF0cyhzZWF0Q291bnQpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVDb25maXJtID0gKCkgPT4ge1xuICAgIG9uQ29uZmlybShzZWxlY3RlZFNlYXRzKTtcbiAgfTtcblxuICAvLyBMaXNrb3YgU3Vic3RpdHV0aW9uIFByaW5jaXBsZTogQ29tcG9uZW50IGNhbiBiZSByZXBsYWNlZCB3aXRoIGFueSBtb2RhbCBpbXBsZW1lbnRhdGlvblxuICBpZiAoIWlzT3BlbikgcmV0dXJuIG51bGw7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImZpeGVkIGluc2V0LTAgYmctYmxhY2sgYmctb3BhY2l0eS01MCBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlciB6LTUwIHAtNFwiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJiZy13aGl0ZSByb3VuZGVkLWxnIHNoYWRvdy14bCBtYXgtdy1tZCB3LWZ1bGxcIj5cbiAgICAgICAgPENhcmQ+XG4gICAgICAgICAgPENhcmRIZWFkZXI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgganVzdGlmeS1iZXR3ZWVuIGl0ZW1zLWNlbnRlclwiPlxuICAgICAgICAgICAgICA8Q2FyZFRpdGxlPnt0KCdtYXRjaC5zZWxlY3RTZWF0cycpfTwvQ2FyZFRpdGxlPlxuICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgdmFyaWFudD1cInNlY29uZGFyeVwiXG4gICAgICAgICAgICAgICAgc2l6ZT1cInNtXCJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtvbkNsb3NlfVxuICAgICAgICAgICAgICAgIGRpc2FibGVkPXtsb2FkaW5nfVxuICAgICAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJDbG9zZSBtb2RhbFwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICDinJVcbiAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L0NhcmRIZWFkZXI+XG4gICAgICAgICAgPENhcmRDb250ZW50PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzcGFjZS15LTZcIj5cbiAgICAgICAgICAgICAgey8qIEluZm9ybWF0aW9uIHNlY3Rpb24gKi99XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LWxnIGZvbnQtbWVkaXVtIHRleHQtZ3JheS05MDBcIj5cbiAgICAgICAgICAgICAgICAgIHt0KCdtYXRjaC5hdmFpbGFibGVTZWF0cycsIHsgc2VhdHM6IG1heFNlYXRzIH0pfVxuICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXNtIHRleHQtZ3JheS02MDAgbXQtMVwiPlxuICAgICAgICAgICAgICAgICAge3QoJ21hdGNoLnNlbGVjdFNlYXRzRGVzY3JpcHRpb24nKX1cbiAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgIHsvKiBTZWF0IHNlbGVjdGlvbiBidXR0b25zICovfVxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImdyaWQgZ3JpZC1jb2xzLTMgZ2FwLTNcIj5cbiAgICAgICAgICAgICAgICB7QXJyYXkuZnJvbSh7IGxlbmd0aDogbWF4U2VhdHMgfSwgKF8sIGkpID0+IGkgKyAxKS5tYXAoKHNlYXRDb3VudCkgPT4gKFxuICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICBrZXk9e3NlYXRDb3VudH1cbiAgICAgICAgICAgICAgICAgICAgdmFyaWFudD17c2VsZWN0ZWRTZWF0cyA9PT0gc2VhdENvdW50ID8gJ3ByaW1hcnknIDogJ3NlY29uZGFyeSd9XG4gICAgICAgICAgICAgICAgICAgIHNpemU9XCJsZ1wiXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZVNlYXRTZWxlY3Rpb24oc2VhdENvdW50KX1cbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYXNwZWN0LXNxdWFyZSB0ZXh0LXhsIGZvbnQtYm9sZCBweS00XCJcbiAgICAgICAgICAgICAgICAgICAgYXJpYS1sYWJlbD17YFNlbGVjdCAke3NlYXRDb3VudH0gc2VhdCR7c2VhdENvdW50ID4gMSA/ICdzJyA6ICcnfWB9XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIHtzZWF0Q291bnR9XG4gICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgey8qIFNlbGVjdGlvbiBzdW1tYXJ5ICovfVxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJnLWdyYXktNTAgcm91bmRlZC1sZyBwLTQgdGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXNtIHRleHQtZ3JheS02MDAgbWItMVwiPlxuICAgICAgICAgICAgICAgICAge3QoJ21hdGNoLnNlbGVjdGVkU2VhdHMnKX1cbiAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC0yeGwgZm9udC1ib2xkIHRleHQtcHJpbWFyeS02MDBcIj5cbiAgICAgICAgICAgICAgICAgIHtzZWxlY3RlZFNlYXRzfSB7c2VsZWN0ZWRTZWF0cyA9PT0gMSA/IHQoJ21hdGNoLnNlYXQnKSA6IHQoJ21hdGNoLnNlYXRzJyl9XG4gICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICB7LyogQWN0aW9uIGJ1dHRvbnMgKi99XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBzcGFjZS14LTMgcHQtNFwiPlxuICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJwcmltYXJ5XCJcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUNvbmZpcm19XG4gICAgICAgICAgICAgICAgICBsb2FkaW5nPXtsb2FkaW5nfVxuICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2xvYWRpbmd9XG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJmbGV4LTFcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIHt0KCdtYXRjaC5jb25maXJtQm9va2luZycpfVxuICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgICAgICAgb25DbGljaz17b25DbG9zZX1cbiAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtsb2FkaW5nfVxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZmxleC0xXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICB7dCgnY29tbW9uOmNhbmNlbCcpfVxuICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvQ2FyZENvbnRlbnQ+XG4gICAgICAgIDwvQ2FyZD5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufTtcbiJdLCJ2ZXJzaW9uIjozfQ==