{"file":"/Users/admin/Documents/AI4Devs-finalproject/Frontend/src/api/bookings.test.ts","mappings":"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","names":[],"sources":["/Users/admin/Documents/AI4Devs-finalproject/Frontend/src/api/bookings.test.ts"],"sourcesContent":["import { BookingsService } from './bookings';\nimport axios from 'axios';\n\n// Mock env and keycloak\njest.mock('../env', () => ({\n  env: {\n    bookingApiBaseUrl: 'http://localhost:8083/api',\n  },\n}));\n\njest.mock('../auth/keycloak', () => ({\n  getKeycloak: () => ({\n    updateToken: jest.fn().mockResolvedValue(undefined),\n    token: 'test-jwt-token',\n  }),\n}));\n\n// Mock axios\njest.mock('axios', () => {\n  const instance = {\n    get: jest.fn(),\n    post: jest.fn(),\n    put: jest.fn(),\n    interceptors: { request: { use: jest.fn((fn: any) => fn({ headers: {} })) } },\n  };\n  return {\n    __esModule: true,\n    default: {\n      create: () => instance,\n    },\n    instance,\n  };\n});\n\ndescribe('BookingsService API', () => {\n  let mockAxiosInstance: any;\n  \n  beforeEach(() => {\n    jest.clearAllMocks();\n    const { instance } = jest.requireMock('axios');\n    mockAxiosInstance = instance;\n  });\n\n  it('getMyBookings returns list of bookings', async () => {\n    const bookings = [\n      {\n        id: 'b1',\n        tripId: 't1',\n        passengerId: 'u1',\n        seatsRequested: 1,\n        status: 'PENDING',\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n      },\n    ];\n    mockAxiosInstance.get.mockResolvedValueOnce({ data: bookings });\n\n    const result = await BookingsService.getMyBookings();\n    expect(result).toEqual(bookings);\n    expect(mockAxiosInstance.get).toHaveBeenCalledWith('/bookings');\n  });\n\n  it('createBooking posts payload and returns created booking', async () => {\n    const payload = { tripId: 't1', seatsRequested: 1 };\n    const created = {\n      id: 'b2',\n      tripId: 't1',\n      passengerId: 'u1',\n      seatsRequested: 1,\n      status: 'PENDING',\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n    mockAxiosInstance.post.mockResolvedValueOnce({ data: created });\n\n    const result = await BookingsService.createBooking(payload);\n    expect(result).toEqual(created);\n    expect(mockAxiosInstance.post).toHaveBeenCalledWith('/bookings', payload);\n  });\n\n  it('cancelBooking calls PUT and returns updated booking', async () => {\n    const updated = {\n      id: 'b3',\n      tripId: 't1',\n      passengerId: 'u1',\n      seatsRequested: 1,\n      status: 'CANCELLED',\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n    mockAxiosInstance.put.mockResolvedValueOnce({ data: updated });\n\n    const result = await BookingsService.cancelBooking('b3');\n    expect(result).toEqual(updated);\n    expect(mockAxiosInstance.put).toHaveBeenCalledWith('/bookings/b3/cancel');\n  });\n\n  it('confirmBooking calls PUT and returns confirmed booking', async () => {\n    const confirmed = {\n      id: 'b4',\n      tripId: 't1',\n      passengerId: 'u1',\n      seatsRequested: 1,\n      status: 'CONFIRMED',\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n    mockAxiosInstance.put.mockResolvedValueOnce({ data: confirmed });\n\n    const result = await BookingsService.confirmBooking('b4');\n    expect(result).toEqual(confirmed);\n    expect(mockAxiosInstance.put).toHaveBeenCalledWith('/bookings/b4/confirm');\n  });\n\n  it('propagates API errors (e.g., 400 when no seats available) on create', async () => {\n    const payload = { tripId: 't1', seatsRequested: 2 };\n    const error = Object.assign(new Error('Bad Request'), { response: { status: 400 } });\n    mockAxiosInstance.post.mockRejectedValueOnce(error);\n\n    await expect(BookingsService.createBooking(payload)).rejects.toBe(error);\n  });\n});"],"version":3}