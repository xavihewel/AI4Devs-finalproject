{"file":"/Users/admin/Documents/AI4Devs-finalproject/Frontend/src/components/matches/strategies/SeatsFilterStrategy.ts","mappings":";;;AAGA;;;GAGG;AACH,MAAa,mBAAmB;IAC9B,YAA6B,QAAgB;QAAjC;;;;mBAAiB,QAAQ;WAAQ;IAAG,CAAC;IAEjD,MAAM,CAAC,OAAmB;QACxB,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;IACnE,CAAC;IAED,aAAa;QACX,OAAO,WAAW,IAAI,CAAC,QAAQ,EAAE,CAAC;IACpC,CAAC;CACF;AAVD,kDAUC","names":[],"sources":["/Users/admin/Documents/AI4Devs-finalproject/Frontend/src/components/matches/strategies/SeatsFilterStrategy.ts"],"sourcesContent":["import type { MatchDto } from '../../../types/api';\nimport type { MatchFilterStrategy } from '../interfaces/MatchFilterStrategy';\n\n/**\n * Concrete strategy for filtering by available seats\n * Follows Single Responsibility Principle - only handles seats filtering\n */\nexport class SeatsFilterStrategy implements MatchFilterStrategy {\n  constructor(private readonly minSeats: number) {}\n\n  filter(matches: MatchDto[]): MatchDto[] {\n    return matches.filter(match => match.seatsFree >= this.minSeats);\n  }\n\n  getFilterName(): string {\n    return `Seats â‰¥ ${this.minSeats}`;\n  }\n}\n"],"version":3}