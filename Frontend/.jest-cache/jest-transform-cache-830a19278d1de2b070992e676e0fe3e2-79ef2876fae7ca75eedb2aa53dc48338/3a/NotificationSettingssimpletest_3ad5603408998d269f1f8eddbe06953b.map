{"file":"/Users/admin/Documents/AI4Devs-finalproject/Frontend/src/components/notifications/NotificationSettings.simple.test.tsx","mappings":";;;;;;AAMA,qBAAqB;AACrB,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,GAAG,EAAE,CAAC,CAAC;IAChC,cAAc,EAAE,IAAI,CAAC,EAAE,EAAE;CAC1B,CAAC,CAAC,CAAC;AAEJ,2BAA2B;AAC3B,IAAI,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC;AAZhD,kDAA0B;AAC1B,kDAAgD;AAChD,iDAA+C;AAC/C,iEAA8D;AAC9D,4EAAyE;AAUzE,MAAM,kBAAkB,GAAG,8BAA4D,CAAC;AACxF,MAAM,uBAAuB,GAAG,yCAAmE,CAAC;AAEpG,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;IACpC,IAAI,uBAAyD,CAAC;IAE9D,UAAU,CAAC,GAAG,EAAE;QACd,kBAAkB,CAAC,eAAe,CAAC;YACjC,CAAC,EAAE,CAAC,GAAW,EAAE,EAAE,CAAC,GAAG;YACvB,IAAI,EAAE,EAAS;SAChB,CAAC,CAAC;QAEH,uBAAuB,GAAG;YACxB,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE;YACtB,iBAAiB,EAAE,IAAI,CAAC,EAAE,EAAE;YAC5B,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE;YACpB,WAAW,EAAE,IAAI,CAAC,EAAE,EAAE;YACtB,qBAAqB,EAAE,IAAI,CAAC,EAAE,EAAE;SAC1B,CAAC;QAET,uBAAuB,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,uBAAuB,CAAC,CAAC;IAC5E,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;QACxC,uBAAuB,CAAC,WAAW,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAC1D,uBAAuB,CAAC,qBAAqB,CAAC,iBAAiB,CAAC;YAC9D,YAAY,EAAE,KAAK;YACnB,QAAQ,EAAE,IAAI;SACf,CAAC,CAAC;QAEH,MAAM,EAAE,SAAS,EAAE,GAAG,IAAA,cAAM,EAAC,uBAAC,2CAAoB,KAAG,CAAC,CAAC;QACvD,MAAM,CAAC,SAAS,CAAC,CAAC,iBAAiB,EAAE,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6EAA6E,EAAE,GAAG,EAAE;QACrF,uBAAuB,CAAC,WAAW,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QAE3D,MAAM,EAAE,SAAS,EAAE,GAAG,IAAA,cAAM,EAAC,uBAAC,2CAAoB,KAAG,CAAC,CAAC;QACvD,MAAM,CAAC,SAAS,CAAC,4BAA4B,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;IACtE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qEAAqE,EAAE,KAAK,IAAI,EAAE;QACnF,uBAAuB,CAAC,WAAW,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAC1D,uBAAuB,CAAC,qBAAqB,CAAC,iBAAiB,CAAC;YAC9D,YAAY,EAAE,KAAK;YACnB,QAAQ,EAAE,IAAI;SACf,CAAC,CAAC;QAEH,MAAM,EAAE,SAAS,EAAE,GAAG,IAAA,cAAM,EAAC,uBAAC,2CAAoB,KAAG,CAAC,CAAC;QACvD,MAAM,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;IAC/D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/admin/Documents/AI4Devs-finalproject/Frontend/src/components/notifications/NotificationSettings.simple.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render } from '@testing-library/react';\nimport { useTranslation } from 'react-i18next';\nimport { NotificationSettings } from './NotificationSettings';\nimport { NotificationService } from '../../services/NotificationService';\n\n// Mock react-i18next\njest.mock('react-i18next', () => ({\n  useTranslation: jest.fn(),\n}));\n\n// Mock NotificationService\njest.mock('../../services/NotificationService');\n\nconst mockUseTranslation = useTranslation as jest.MockedFunction<typeof useTranslation>;\nconst MockNotificationService = NotificationService as jest.MockedClass<typeof NotificationService>;\n\ndescribe('NotificationSettings', () => {\n  let mockNotificationService: jest.Mocked<NotificationService>;\n\n  beforeEach(() => {\n    mockUseTranslation.mockReturnValue({\n      t: (key: string) => key,\n      i18n: {} as any,\n    });\n\n    mockNotificationService = {\n      isSupported: jest.fn(),\n      requestPermission: jest.fn(),\n      subscribe: jest.fn(),\n      unsubscribe: jest.fn(),\n      getSubscriptionStatus: jest.fn(),\n    } as any;\n\n    MockNotificationService.mockImplementation(() => mockNotificationService);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should render without crashing', () => {\n    mockNotificationService.isSupported.mockReturnValue(true);\n    mockNotificationService.getSubscriptionStatus.mockResolvedValue({\n      isSubscribed: false,\n      endpoint: null,\n    });\n\n    const { container } = render(<NotificationSettings />);\n    expect(container).toBeInTheDocument();\n  });\n\n  it('should show not supported message when push notifications are not supported', () => {\n    mockNotificationService.isSupported.mockReturnValue(false);\n\n    const { getByText } = render(<NotificationSettings />);\n    expect(getByText('notifications.notSupported')).toBeInTheDocument();\n  });\n\n  it('should show supported message when push notifications are supported', async () => {\n    mockNotificationService.isSupported.mockReturnValue(true);\n    mockNotificationService.getSubscriptionStatus.mockResolvedValue({\n      isSubscribed: false,\n      endpoint: null,\n    });\n\n    const { getByText } = render(<NotificationSettings />);\n    expect(getByText('notifications.title')).toBeInTheDocument();\n  });\n});\n"],"version":3}