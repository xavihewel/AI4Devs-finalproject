6121402bf9d3beb828192988ddad29e3
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const react_i18next_1 = require("react-i18next");
const config_1 = __importDefault(require("../../i18n/config"));
const MatchCard_1 = __importDefault(require("./MatchCard"));
const renderWithI18n = (component) => {
    return (0, react_2.render)((0, jsx_runtime_1.jsx)(react_i18next_1.I18nextProvider, { i18n: config_1.default, children: component }));
};
const mockMatch = {
    id: 'match-1',
    tripId: 'trip-1',
    driverId: 'driver-1',
    score: 0.85,
    status: 'PENDING',
    origin: '40.4168,-3.7038',
    destinationSedeId: 'SEDE-1',
    dateTime: '2024-01-15T08:30:00Z',
    seatsFree: 3,
    reasons: ['Same route', 'Similar departure time'],
    direction: 'TO_SEDE',
    pairedTripId: null
};
describe('MatchCard', () => {
    const mockOnBook = jest.fn();
    const mockOnViewProfile = jest.fn();
    const mockOnRate = jest.fn();
    beforeEach(() => {
        jest.clearAllMocks();
    });
    it('renders match information correctly', () => {
        renderWithI18n((0, jsx_runtime_1.jsx)(MatchCard_1.default, { match: mockMatch, onBook: mockOnBook, onViewProfile: mockOnViewProfile, onRate: mockOnRate }));
        expect(react_2.screen.getByText('Trip to SEDE-1')).toBeInTheDocument();
        expect(react_2.screen.getByText('40.4168,-3.7038')).toBeInTheDocument();
        expect(react_2.screen.getByText('3')).toBeInTheDocument();
        expect(react_2.screen.getByText('Same route')).toBeInTheDocument();
        expect(react_2.screen.getByText('Similar departure time')).toBeInTheDocument();
    });
    it('shows score badge with correct color and label', () => {
        renderWithI18n((0, jsx_runtime_1.jsx)(MatchCard_1.default, { match: mockMatch, onBook: mockOnBook, onViewProfile: mockOnViewProfile, onRate: mockOnRate }));
        const scoreBadge = react_2.screen.getByText('Excellent');
        expect(scoreBadge).toBeInTheDocument();
        expect(scoreBadge.closest('span')).toHaveClass('text-green-600', 'bg-green-100');
    });
    it('shows booked status when isBooked is true', () => {
        renderWithI18n((0, jsx_runtime_1.jsx)(MatchCard_1.default, { match: mockMatch, isBooked: true, onBook: mockOnBook, onViewProfile: mockOnViewProfile, onRate: mockOnRate }));
        expect(react_2.screen.getByText('Already Booked')).toBeInTheDocument();
    });
    it('disables book button when no seats available', () => {
        const matchNoSeats = { ...mockMatch, seatsFree: 0 };
        renderWithI18n((0, jsx_runtime_1.jsx)(MatchCard_1.default, { match: matchNoSeats, onBook: mockOnBook, onViewProfile: mockOnViewProfile, onRate: mockOnRate }));
        const bookButton = react_2.screen.getByText('No seats available');
        expect(bookButton).toBeDisabled();
    });
    it('disables book button when already booked', () => {
        renderWithI18n((0, jsx_runtime_1.jsx)(MatchCard_1.default, { match: mockMatch, isBooked: true, onBook: mockOnBook, onViewProfile: mockOnViewProfile, onRate: mockOnRate }));
        const bookButton = react_2.screen.getByText('Already Booked');
        expect(bookButton).toBeDisabled();
    });
    it('shows loading state on book button when booking in progress', () => {
        renderWithI18n((0, jsx_runtime_1.jsx)(MatchCard_1.default, { match: mockMatch, isBookingInProgress: true, onBook: mockOnBook, onViewProfile: mockOnViewProfile, onRate: mockOnRate }));
        const bookButton = react_2.screen.getByRole('button', { name: /book trip/i });
        expect(bookButton).toBeDisabled();
    });
    it('calls onBook when book button is clicked', () => {
        renderWithI18n((0, jsx_runtime_1.jsx)(MatchCard_1.default, { match: mockMatch, onBook: mockOnBook, onViewProfile: mockOnViewProfile, onRate: mockOnRate }));
        const bookButton = react_2.screen.getByText('Book Trip');
        react_2.fireEvent.click(bookButton);
        expect(mockOnBook).toHaveBeenCalledWith(mockMatch);
    });
    it('calls onViewProfile when view profile button is clicked', () => {
        renderWithI18n((0, jsx_runtime_1.jsx)(MatchCard_1.default, { match: mockMatch, onBook: mockOnBook, onViewProfile: mockOnViewProfile, onRate: mockOnRate }));
        const viewProfileButton = react_2.screen.getByText('View Profile');
        react_2.fireEvent.click(viewProfileButton);
        expect(mockOnViewProfile).toHaveBeenCalledWith('driver-1');
    });
    it('calls onRate when rate button is clicked', () => {
        renderWithI18n((0, jsx_runtime_1.jsx)(MatchCard_1.default, { match: mockMatch, onBook: mockOnBook, onViewProfile: mockOnViewProfile, onRate: mockOnRate }));
        const rateButton = react_2.screen.getByText('Rate');
        react_2.fireEvent.click(rateButton);
        expect(mockOnRate).toHaveBeenCalledWith('driver-1');
    });
    it('shows map toggle button when coordinates are valid', () => {
        renderWithI18n((0, jsx_runtime_1.jsx)(MatchCard_1.default, { match: mockMatch, onBook: mockOnBook, onViewProfile: mockOnViewProfile, onRate: mockOnRate }));
        expect(react_2.screen.getByText('Show Map')).toBeInTheDocument();
    });
    it('toggles map visibility when show/hide map button is clicked', () => {
        renderWithI18n((0, jsx_runtime_1.jsx)(MatchCard_1.default, { match: mockMatch, onBook: mockOnBook, onViewProfile: mockOnViewProfile, onRate: mockOnRate }));
        const toggleButton = react_2.screen.getByText('Show Map');
        react_2.fireEvent.click(toggleButton);
        expect(react_2.screen.getByText('Hide Map')).toBeInTheDocument();
    });
    it('does not show map section when coordinates are invalid', () => {
        const matchInvalidCoords = { ...mockMatch, origin: 'invalid' };
        renderWithI18n((0, jsx_runtime_1.jsx)(MatchCard_1.default, { match: matchInvalidCoords, onBook: mockOnBook, onViewProfile: mockOnViewProfile, onRate: mockOnRate }));
        expect(react_2.screen.queryByText('Show Map')).not.toBeInTheDocument();
    });
    it('displays date and time correctly', () => {
        renderWithI18n((0, jsx_runtime_1.jsx)(MatchCard_1.default, { match: mockMatch, onBook: mockOnBook, onViewProfile: mockOnViewProfile, onRate: mockOnRate }));
        // Check that date and time are displayed (format may vary by locale)
        expect(react_2.screen.getByText(/2024/)).toBeInTheDocument();
    });
    it('shows compatibility reasons when available', () => {
        renderWithI18n((0, jsx_runtime_1.jsx)(MatchCard_1.default, { match: mockMatch, onBook: mockOnBook, onViewProfile: mockOnViewProfile, onRate: mockOnRate }));
        expect(react_2.screen.getByText('Compatibility reasons:')).toBeInTheDocument();
        expect(react_2.screen.getByText('Same route')).toBeInTheDocument();
        expect(react_2.screen.getByText('Similar departure time')).toBeInTheDocument();
    });
    it('does not show compatibility reasons when empty', () => {
        const matchNoReasons = { ...mockMatch, reasons: [] };
        renderWithI18n((0, jsx_runtime_1.jsx)(MatchCard_1.default, { match: matchNoReasons, onBook: mockOnBook, onViewProfile: mockOnViewProfile, onRate: mockOnRate }));
        expect(react_2.screen.queryByText('Compatibility reasons:')).not.toBeInTheDocument();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,