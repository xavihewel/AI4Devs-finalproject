{"file":"/Users/admin/Documents/AI4Devs-finalproject/Frontend/src/components/matches/repositories/FilterPersistenceRepository.test.ts","mappings":"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","names":[],"sources":["/Users/admin/Documents/AI4Devs-finalproject/Frontend/src/components/matches/repositories/FilterPersistenceRepository.test.ts"],"sourcesContent":["import { LocalStorageFilterRepository } from './FilterPersistenceRepository';\nimport type { FilterOptions } from '../MatchFilters';\n\ndescribe('LocalStorageFilterRepository', () => {\n  let repository: LocalStorageFilterRepository;\n\n  beforeEach(() => {\n    repository = new LocalStorageFilterRepository();\n    localStorage.clear();\n  });\n\n  afterEach(() => {\n    localStorage.clear();\n  });\n\n  describe('save', () => {\n    it('saves filters to localStorage', () => {\n      const filters: FilterOptions = {\n        minScore: 70,\n        minSeats: 2,\n        dateFrom: '2024-01-15',\n        dateTo: '2024-01-16',\n        sortBy: 'score',\n        sortOrder: 'desc'\n      };\n\n      repository.save(filters);\n\n      const saved = localStorage.getItem('matchFilters');\n      expect(saved).toBeTruthy();\n      \n      const parsed = JSON.parse(saved!);\n      expect(parsed).toEqual(filters);\n    });\n\n    it('handles localStorage errors gracefully', () => {\n      // Mock localStorage to throw an error\n      const originalSetItem = localStorage.setItem;\n      localStorage.setItem = jest.fn().mockImplementation(() => {\n        throw new Error('Storage quota exceeded');\n      });\n\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n\n      const filters: FilterOptions = {\n        minScore: 70,\n        minSeats: 2,\n        dateFrom: '',\n        dateTo: '',\n        sortBy: 'score',\n        sortOrder: 'desc'\n      };\n\n      repository.save(filters);\n\n      expect(consoleSpy).toHaveBeenCalledWith(\n        'Failed to save filters to localStorage:',\n        expect.any(Error)\n      );\n\n      // Restore original localStorage\n      localStorage.setItem = originalSetItem;\n      consoleSpy.mockRestore();\n    });\n  });\n\n  describe('load', () => {\n    it('loads filters from localStorage', () => {\n      const filters: FilterOptions = {\n        minScore: 70,\n        minSeats: 2,\n        dateFrom: '2024-01-15',\n        dateTo: '2024-01-16',\n        sortBy: 'score',\n        sortOrder: 'desc'\n      };\n\n      localStorage.setItem('matchFilters', JSON.stringify(filters));\n\n      const result = repository.load();\n\n      expect(result).toEqual(filters);\n    });\n\n    it('returns null when no filters are saved', () => {\n      const result = repository.load();\n\n      expect(result).toBeNull();\n    });\n\n    it('returns null when saved data is invalid JSON', () => {\n      localStorage.setItem('matchFilters', 'invalid json');\n\n      const result = repository.load();\n\n      expect(result).toBeNull();\n    });\n\n    it('returns null when saved data has invalid structure', () => {\n      const invalidData = {\n        minScore: 'not a number',\n        minSeats: 2,\n        dateFrom: '2024-01-15',\n        dateTo: '2024-01-16',\n        sortBy: 'score',\n        sortOrder: 'desc'\n      };\n\n      localStorage.setItem('matchFilters', JSON.stringify(invalidData));\n\n      const result = repository.load();\n\n      expect(result).toBeNull();\n    });\n\n    it('handles localStorage errors gracefully', () => {\n      // Mock localStorage to throw an error\n      const originalGetItem = localStorage.getItem;\n      localStorage.getItem = jest.fn().mockImplementation(() => {\n        throw new Error('Storage access denied');\n      });\n\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n\n      const result = repository.load();\n\n      expect(result).toBeNull();\n      expect(consoleSpy).toHaveBeenCalledWith(\n        'Failed to load filters from localStorage:',\n        expect.any(Error)\n      );\n\n      // Restore original localStorage\n      localStorage.getItem = originalGetItem;\n      consoleSpy.mockRestore();\n    });\n  });\n\n  describe('clear', () => {\n    it('removes filters from localStorage', () => {\n      const filters: FilterOptions = {\n        minScore: 70,\n        minSeats: 2,\n        dateFrom: '',\n        dateTo: '',\n        sortBy: 'score',\n        sortOrder: 'desc'\n      };\n\n      localStorage.setItem('matchFilters', JSON.stringify(filters));\n      expect(localStorage.getItem('matchFilters')).toBeTruthy();\n\n      repository.clear();\n\n      expect(localStorage.getItem('matchFilters')).toBeNull();\n    });\n\n    it('handles localStorage errors gracefully', () => {\n      // Mock localStorage to throw an error\n      const originalRemoveItem = localStorage.removeItem;\n      localStorage.removeItem = jest.fn().mockImplementation(() => {\n        throw new Error('Storage access denied');\n      });\n\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n\n      repository.clear();\n\n      expect(consoleSpy).toHaveBeenCalledWith(\n        'Failed to clear filters from localStorage:',\n        expect.any(Error)\n      );\n\n      // Restore original localStorage\n      localStorage.removeItem = originalRemoveItem;\n      consoleSpy.mockRestore();\n    });\n  });\n\n  describe('isValidFilterOptions', () => {\n    it('validates correct filter options structure', () => {\n      const validFilters: FilterOptions = {\n        minScore: 70,\n        minSeats: 2,\n        dateFrom: '2024-01-15',\n        dateTo: '2024-01-16',\n        sortBy: 'score',\n        sortOrder: 'desc'\n      };\n\n      // Access private method through type assertion\n      const repository = new LocalStorageFilterRepository() as any;\n      const isValid = repository.isValidFilterOptions(validFilters);\n\n      expect(isValid).toBe(true);\n    });\n\n    it('rejects invalid filter options structure', () => {\n      const invalidFilters = {\n        minScore: 'not a number',\n        minSeats: 2,\n        dateFrom: '2024-01-15',\n        dateTo: '2024-01-16',\n        sortBy: 'score',\n        sortOrder: 'desc'\n      };\n\n      // Access private method through type assertion\n      const repository = new LocalStorageFilterRepository() as any;\n      const isValid = repository.isValidFilterOptions(invalidFilters);\n\n      expect(isValid).toBe(false);\n    });\n\n    it('rejects null or undefined', () => {\n      // Access private method through type assertion\n      const repository = new LocalStorageFilterRepository() as any;\n      \n      expect(repository.isValidFilterOptions(null)).toBe(false);\n      expect(repository.isValidFilterOptions(undefined)).toBe(false);\n    });\n\n    it('accepts filters with optional date fields', () => {\n      const filtersWithOptionalDates = {\n        minScore: 70,\n        minSeats: 2,\n        dateFrom: undefined,\n        dateTo: undefined,\n        sortBy: 'score',\n        sortOrder: 'desc'\n      };\n\n      // Access private method through type assertion\n      const repository = new LocalStorageFilterRepository() as any;\n      const isValid = repository.isValidFilterOptions(filtersWithOptionalDates);\n\n      expect(isValid).toBe(true);\n    });\n  });\n});\n"],"version":3}