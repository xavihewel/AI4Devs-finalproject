2a4484e0a39f9a2c086fbf8cff9e793a
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
// Mock the API service
jest.mock('../../api/ratings');
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const RatingsList_1 = require("./RatingsList");
const ratings_1 = require("../../api/ratings");
const mockRatingsService = ratings_1.RatingsService;
describe('RatingsList', () => {
    const mockRatings = [
        {
            id: '1',
            raterId: 'rater-1',
            ratedId: 'rated-1',
            tripId: 'trip-1',
            ratingType: 'THUMBS_UP',
            tags: ['punctual', 'friendly'],
            comment: 'Great driver!',
            createdAt: '2024-01-01T10:00:00Z',
            updatedAt: '2024-01-01T10:00:00Z'
        },
        {
            id: '2',
            raterId: 'rater-2',
            ratedId: 'rated-1',
            tripId: 'trip-2',
            ratingType: 'THUMBS_DOWN',
            tags: ['late'],
            comment: 'Always late',
            createdAt: '2024-01-02T10:00:00Z',
            updatedAt: '2024-01-02T10:00:00Z'
        }
    ];
    beforeEach(() => {
        jest.clearAllMocks();
    });
    it('should render loading state initially', () => {
        mockRatingsService.getRatingsForUser.mockImplementation(() => new Promise(() => { }));
        (0, react_2.render)((0, jsx_runtime_1.jsx)(RatingsList_1.RatingsList, { userId: "test-user" }));
        expect(react_2.screen.getByTestId('loading-spinner')).toBeInTheDocument();
    });
    it('should render ratings list with user name', async () => {
        mockRatingsService.getRatingsForUser.mockResolvedValue(mockRatings);
        (0, react_2.render)((0, jsx_runtime_1.jsx)(RatingsList_1.RatingsList, { userId: "test-user", userName: "Test User" }));
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByText('Valoraciones de Test User')).toBeInTheDocument();
            expect(react_2.screen.getByText('"Great driver!"')).toBeInTheDocument();
            expect(react_2.screen.getByText('"Always late"')).toBeInTheDocument();
        });
    });
    it('should render ratings without user name', async () => {
        mockRatingsService.getRatingsForUser.mockResolvedValue(mockRatings);
        (0, react_2.render)((0, jsx_runtime_1.jsx)(RatingsList_1.RatingsList, { userId: "test-user" }));
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByText('Valoraciones')).toBeInTheDocument();
        });
    });
    it('should display rating types correctly', async () => {
        mockRatingsService.getRatingsForUser.mockResolvedValue(mockRatings);
        (0, react_2.render)((0, jsx_runtime_1.jsx)(RatingsList_1.RatingsList, { userId: "test-user" }));
        await (0, react_2.waitFor)(() => {
            const thumbsUpIcons = react_2.screen.getAllByText('👍');
            const thumbsDownIcons = react_2.screen.getAllByText('👎');
            expect(thumbsUpIcons).toHaveLength(1);
            expect(thumbsDownIcons).toHaveLength(1);
        });
    });
    it('should display tags correctly', async () => {
        mockRatingsService.getRatingsForUser.mockResolvedValue(mockRatings);
        (0, react_2.render)((0, jsx_runtime_1.jsx)(RatingsList_1.RatingsList, { userId: "test-user" }));
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByText('punctual')).toBeInTheDocument();
            expect(react_2.screen.getByText('friendly')).toBeInTheDocument();
            expect(react_2.screen.getByText('late')).toBeInTheDocument();
        });
    });
    it('should display comments correctly', async () => {
        mockRatingsService.getRatingsForUser.mockResolvedValue(mockRatings);
        (0, react_2.render)((0, jsx_runtime_1.jsx)(RatingsList_1.RatingsList, { userId: "test-user" }));
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByText('"Great driver!"')).toBeInTheDocument();
            expect(react_2.screen.getByText('"Always late"')).toBeInTheDocument();
        });
    });
    it('should display trip-specific badge when tripId exists', async () => {
        mockRatingsService.getRatingsForUser.mockResolvedValue(mockRatings);
        (0, react_2.render)((0, jsx_runtime_1.jsx)(RatingsList_1.RatingsList, { userId: "test-user" }));
        await (0, react_2.waitFor)(() => {
            const tripBadges = react_2.screen.getAllByText('Viaje específico');
            expect(tripBadges).toHaveLength(2);
        });
    });
    it('should render error state when API fails', async () => {
        mockRatingsService.getRatingsForUser.mockRejectedValue(new Error('API Error'));
        (0, react_2.render)((0, jsx_runtime_1.jsx)(RatingsList_1.RatingsList, { userId: "test-user" }));
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByText('Error al cargar las valoraciones')).toBeInTheDocument();
        });
    });
    it('should render no ratings message when empty', async () => {
        mockRatingsService.getRatingsForUser.mockResolvedValue([]);
        (0, react_2.render)((0, jsx_runtime_1.jsx)(RatingsList_1.RatingsList, { userId: "test-user" }));
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByText('No hay valoraciones disponibles')).toBeInTheDocument();
        });
    });
    it('should format dates correctly', async () => {
        mockRatingsService.getRatingsForUser.mockResolvedValue(mockRatings);
        (0, react_2.render)((0, jsx_runtime_1.jsx)(RatingsList_1.RatingsList, { userId: "test-user" }));
        await (0, react_2.waitFor)(() => {
            // Check that dates are formatted (exact format may vary by locale)
            expect(react_2.screen.getByText(/1 ene 2024/)).toBeInTheDocument();
            expect(react_2.screen.getByText(/2 ene 2024/)).toBeInTheDocument();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,