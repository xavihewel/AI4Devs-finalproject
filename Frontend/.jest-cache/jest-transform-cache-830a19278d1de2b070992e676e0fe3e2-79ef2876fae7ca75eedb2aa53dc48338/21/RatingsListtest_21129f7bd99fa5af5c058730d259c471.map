{"file":"/Users/admin/Documents/AI4Devs-finalproject/Frontend/src/components/trust/RatingsList.test.tsx","mappings":"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","names":[],"sources":["/Users/admin/Documents/AI4Devs-finalproject/Frontend/src/components/trust/RatingsList.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, waitFor } from '@testing-library/react';\nimport { RatingsList } from './RatingsList';\nimport { RatingsService } from '../../api/ratings';\n\n// Mock the API service\njest.mock('../../api/ratings');\nconst mockRatingsService = RatingsService as jest.Mocked<typeof RatingsService>;\n\ndescribe('RatingsList', () => {\n  const mockRatings = [\n    {\n      id: '1',\n      raterId: 'rater-1',\n      ratedId: 'rated-1',\n      tripId: 'trip-1',\n      ratingType: 'THUMBS_UP' as const,\n      tags: ['punctual', 'friendly'],\n      comment: 'Great driver!',\n      createdAt: '2024-01-01T10:00:00Z',\n      updatedAt: '2024-01-01T10:00:00Z'\n    },\n    {\n      id: '2',\n      raterId: 'rater-2',\n      ratedId: 'rated-1',\n      tripId: 'trip-2',\n      ratingType: 'THUMBS_DOWN' as const,\n      tags: ['late'],\n      comment: 'Always late',\n      createdAt: '2024-01-02T10:00:00Z',\n      updatedAt: '2024-01-02T10:00:00Z'\n    }\n  ];\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should render loading state initially', () => {\n    mockRatingsService.getRatingsForUser.mockImplementation(() => new Promise(() => {}));\n    \n    render(<RatingsList userId=\"test-user\" />);\n    \n    expect(screen.getByTestId('loading-spinner')).toBeInTheDocument();\n  });\n\n  it('should render ratings list with user name', async () => {\n    mockRatingsService.getRatingsForUser.mockResolvedValue(mockRatings);\n    \n    render(<RatingsList userId=\"test-user\" userName=\"Test User\" />);\n    \n    await waitFor(() => {\n      expect(screen.getByText('Valoraciones de Test User')).toBeInTheDocument();\n      expect(screen.getByText('\"Great driver!\"')).toBeInTheDocument();\n      expect(screen.getByText('\"Always late\"')).toBeInTheDocument();\n    });\n  });\n\n  it('should render ratings without user name', async () => {\n    mockRatingsService.getRatingsForUser.mockResolvedValue(mockRatings);\n    \n    render(<RatingsList userId=\"test-user\" />);\n    \n    await waitFor(() => {\n      expect(screen.getByText('Valoraciones')).toBeInTheDocument();\n    });\n  });\n\n  it('should display rating types correctly', async () => {\n    mockRatingsService.getRatingsForUser.mockResolvedValue(mockRatings);\n    \n    render(<RatingsList userId=\"test-user\" />);\n    \n    await waitFor(() => {\n      const thumbsUpIcons = screen.getAllByText('👍');\n      const thumbsDownIcons = screen.getAllByText('👎');\n      expect(thumbsUpIcons).toHaveLength(1);\n      expect(thumbsDownIcons).toHaveLength(1);\n    });\n  });\n\n  it('should display tags correctly', async () => {\n    mockRatingsService.getRatingsForUser.mockResolvedValue(mockRatings);\n    \n    render(<RatingsList userId=\"test-user\" />);\n    \n    await waitFor(() => {\n      expect(screen.getByText('punctual')).toBeInTheDocument();\n      expect(screen.getByText('friendly')).toBeInTheDocument();\n      expect(screen.getByText('late')).toBeInTheDocument();\n    });\n  });\n\n  it('should display comments correctly', async () => {\n    mockRatingsService.getRatingsForUser.mockResolvedValue(mockRatings);\n    \n    render(<RatingsList userId=\"test-user\" />);\n    \n    await waitFor(() => {\n      expect(screen.getByText('\"Great driver!\"')).toBeInTheDocument();\n      expect(screen.getByText('\"Always late\"')).toBeInTheDocument();\n    });\n  });\n\n  it('should display trip-specific badge when tripId exists', async () => {\n    mockRatingsService.getRatingsForUser.mockResolvedValue(mockRatings);\n    \n    render(<RatingsList userId=\"test-user\" />);\n    \n    await waitFor(() => {\n      const tripBadges = screen.getAllByText('Viaje específico');\n      expect(tripBadges).toHaveLength(2);\n    });\n  });\n\n  it('should render error state when API fails', async () => {\n    mockRatingsService.getRatingsForUser.mockRejectedValue(new Error('API Error'));\n    \n    render(<RatingsList userId=\"test-user\" />);\n    \n    await waitFor(() => {\n      expect(screen.getByText('Error al cargar las valoraciones')).toBeInTheDocument();\n    });\n  });\n\n  it('should render no ratings message when empty', async () => {\n    mockRatingsService.getRatingsForUser.mockResolvedValue([]);\n    \n    render(<RatingsList userId=\"test-user\" />);\n    \n    await waitFor(() => {\n      expect(screen.getByText('No hay valoraciones disponibles')).toBeInTheDocument();\n    });\n  });\n\n  it('should format dates correctly', async () => {\n    mockRatingsService.getRatingsForUser.mockResolvedValue(mockRatings);\n    \n    render(<RatingsList userId=\"test-user\" />);\n    \n    await waitFor(() => {\n      // Check that dates are formatted (exact format may vary by locale)\n      expect(screen.getByText(/1 ene 2024/)).toBeInTheDocument();\n      expect(screen.getByText(/2 ene 2024/)).toBeInTheDocument();\n    });\n  });\n});\n"],"version":3}