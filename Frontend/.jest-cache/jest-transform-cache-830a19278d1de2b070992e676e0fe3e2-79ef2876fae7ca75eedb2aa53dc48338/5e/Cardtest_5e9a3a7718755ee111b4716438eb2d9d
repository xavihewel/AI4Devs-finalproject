b180d88b25503113d4de9a8fe499741b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("@testing-library/react");
const Card_1 = require("./Card");
describe('Card', () => {
    it('renders children', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(Card_1.Card, { children: (0, jsx_runtime_1.jsx)("div", { children: "Card content" }) }));
        expect(react_1.screen.getByText('Card content')).toBeInTheDocument();
    });
    it('renders with default padding', () => {
        const { container } = (0, react_1.render)((0, jsx_runtime_1.jsx)(Card_1.Card, { children: "Content" }));
        const card = container.firstChild;
        expect(card).toHaveClass('p-6');
    });
    it('renders with custom padding', () => {
        const { container } = (0, react_1.render)((0, jsx_runtime_1.jsx)(Card_1.Card, { padding: "sm", children: "Content" }));
        const card = container.firstChild;
        expect(card).toHaveClass('p-3');
    });
    it('accepts custom className', () => {
        const { container } = (0, react_1.render)((0, jsx_runtime_1.jsx)(Card_1.Card, { className: "custom-class", children: "Content" }));
        const card = container.firstChild;
        expect(card).toHaveClass('custom-class');
    });
});
describe('CardHeader', () => {
    it('renders children', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(Card_1.CardHeader, { children: (0, jsx_runtime_1.jsx)("div", { children: "Header content" }) }));
        expect(react_1.screen.getByText('Header content')).toBeInTheDocument();
    });
    it('has border bottom styling', () => {
        const { container } = (0, react_1.render)((0, jsx_runtime_1.jsx)(Card_1.CardHeader, { children: "Header" }));
        const header = container.firstChild;
        expect(header).toHaveClass('border-b', 'border-gray-200');
    });
});
describe('CardTitle', () => {
    it('renders children', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(Card_1.CardTitle, { children: "Title" }));
        expect(react_1.screen.getByText('Title')).toBeInTheDocument();
    });
    it('has title styling', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(Card_1.CardTitle, { children: "Title" }));
        expect(react_1.screen.getByText('Title')).toHaveClass('text-lg', 'font-semibold', 'text-gray-900');
    });
});
describe('CardContent', () => {
    it('renders children', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(Card_1.CardContent, { children: "Content" }));
        expect(react_1.screen.getByText('Content')).toBeInTheDocument();
    });
    it('accepts custom className', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(Card_1.CardContent, { className: "custom-class", children: "Content" }));
        expect(react_1.screen.getByText('Content')).toHaveClass('custom-class');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2FkbWluL0RvY3VtZW50cy9BSTREZXZzLWZpbmFscHJvamVjdC9Gcm9udGVuZC9zcmMvY29tcG9uZW50cy91aS9DYXJkLnRlc3QudHN4IiwibWFwcGluZ3MiOiI7OztBQUFBLGtEQUF3RDtBQUN4RCxpQ0FBa0U7QUFFbEUsUUFBUSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUU7SUFDcEIsRUFBRSxDQUFDLGtCQUFrQixFQUFFLEdBQUcsRUFBRTtRQUMxQixJQUFBLGNBQU0sRUFDSix1QkFBQyxXQUFJLGNBQ0gsMkRBQXVCLEdBQ2xCLENBQ1IsQ0FBQztRQUNGLE1BQU0sQ0FBQyxjQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUMvRCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyw4QkFBOEIsRUFBRSxHQUFHLEVBQUU7UUFDdEMsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLElBQUEsY0FBTSxFQUFDLHVCQUFDLFdBQUksMEJBQWUsQ0FBQyxDQUFDO1FBQ25ELE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxVQUF5QixDQUFDO1FBQ2pELE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsNkJBQTZCLEVBQUUsR0FBRyxFQUFFO1FBQ3JDLE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRyxJQUFBLGNBQU0sRUFBQyx1QkFBQyxXQUFJLElBQUMsT0FBTyxFQUFDLElBQUksd0JBQWUsQ0FBQyxDQUFDO1FBQ2hFLE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxVQUF5QixDQUFDO1FBQ2pELE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsMEJBQTBCLEVBQUUsR0FBRyxFQUFFO1FBQ2xDLE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRyxJQUFBLGNBQU0sRUFBQyx1QkFBQyxXQUFJLElBQUMsU0FBUyxFQUFDLGNBQWMsd0JBQWUsQ0FBQyxDQUFDO1FBQzVFLE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxVQUF5QixDQUFDO1FBQ2pELE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDM0MsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILFFBQVEsQ0FBQyxZQUFZLEVBQUUsR0FBRyxFQUFFO0lBQzFCLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLEVBQUU7UUFDMUIsSUFBQSxjQUFNLEVBQ0osdUJBQUMsaUJBQVUsY0FDVCw2REFBeUIsR0FDZCxDQUNkLENBQUM7UUFDRixNQUFNLENBQUMsY0FBTSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUNqRSxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywyQkFBMkIsRUFBRSxHQUFHLEVBQUU7UUFDbkMsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLElBQUEsY0FBTSxFQUFDLHVCQUFDLGlCQUFVLHlCQUFvQixDQUFDLENBQUM7UUFDOUQsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLFVBQXlCLENBQUM7UUFDbkQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztJQUM1RCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsUUFBUSxDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUU7SUFDekIsRUFBRSxDQUFDLGtCQUFrQixFQUFFLEdBQUcsRUFBRTtRQUMxQixJQUFBLGNBQU0sRUFBQyx1QkFBQyxnQkFBUyx3QkFBa0IsQ0FBQyxDQUFDO1FBQ3JDLE1BQU0sQ0FBQyxjQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUN4RCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxHQUFHLEVBQUU7UUFDM0IsSUFBQSxjQUFNLEVBQUMsdUJBQUMsZ0JBQVMsd0JBQWtCLENBQUMsQ0FBQztRQUNyQyxNQUFNLENBQUMsY0FBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsZUFBZSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQzdGLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxRQUFRLENBQUMsYUFBYSxFQUFFLEdBQUcsRUFBRTtJQUMzQixFQUFFLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxFQUFFO1FBQzFCLElBQUEsY0FBTSxFQUFDLHVCQUFDLGtCQUFXLDBCQUFzQixDQUFDLENBQUM7UUFDM0MsTUFBTSxDQUFDLGNBQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzFELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDBCQUEwQixFQUFFLEdBQUcsRUFBRTtRQUNsQyxJQUFBLGNBQU0sRUFBQyx1QkFBQyxrQkFBVyxJQUFDLFNBQVMsRUFBQyxjQUFjLHdCQUFzQixDQUFDLENBQUM7UUFDcEUsTUFBTSxDQUFDLGNBQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDbEUsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvYWRtaW4vRG9jdW1lbnRzL0FJNERldnMtZmluYWxwcm9qZWN0L0Zyb250ZW5kL3NyYy9jb21wb25lbnRzL3VpL0NhcmQudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4gfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0JztcbmltcG9ydCB7IENhcmQsIENhcmRIZWFkZXIsIENhcmRUaXRsZSwgQ2FyZENvbnRlbnQgfSBmcm9tICcuL0NhcmQnO1xuXG5kZXNjcmliZSgnQ2FyZCcsICgpID0+IHtcbiAgaXQoJ3JlbmRlcnMgY2hpbGRyZW4nLCAoKSA9PiB7XG4gICAgcmVuZGVyKFxuICAgICAgPENhcmQ+XG4gICAgICAgIDxkaXY+Q2FyZCBjb250ZW50PC9kaXY+XG4gICAgICA8L0NhcmQ+XG4gICAgKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnQ2FyZCBjb250ZW50JykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gIH0pO1xuXG4gIGl0KCdyZW5kZXJzIHdpdGggZGVmYXVsdCBwYWRkaW5nJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgY29udGFpbmVyIH0gPSByZW5kZXIoPENhcmQ+Q29udGVudDwvQ2FyZD4pO1xuICAgIGNvbnN0IGNhcmQgPSBjb250YWluZXIuZmlyc3RDaGlsZCBhcyBIVE1MRWxlbWVudDtcbiAgICBleHBlY3QoY2FyZCkudG9IYXZlQ2xhc3MoJ3AtNicpO1xuICB9KTtcblxuICBpdCgncmVuZGVycyB3aXRoIGN1c3RvbSBwYWRkaW5nJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgY29udGFpbmVyIH0gPSByZW5kZXIoPENhcmQgcGFkZGluZz1cInNtXCI+Q29udGVudDwvQ2FyZD4pO1xuICAgIGNvbnN0IGNhcmQgPSBjb250YWluZXIuZmlyc3RDaGlsZCBhcyBIVE1MRWxlbWVudDtcbiAgICBleHBlY3QoY2FyZCkudG9IYXZlQ2xhc3MoJ3AtMycpO1xuICB9KTtcblxuICBpdCgnYWNjZXB0cyBjdXN0b20gY2xhc3NOYW1lJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgY29udGFpbmVyIH0gPSByZW5kZXIoPENhcmQgY2xhc3NOYW1lPVwiY3VzdG9tLWNsYXNzXCI+Q29udGVudDwvQ2FyZD4pO1xuICAgIGNvbnN0IGNhcmQgPSBjb250YWluZXIuZmlyc3RDaGlsZCBhcyBIVE1MRWxlbWVudDtcbiAgICBleHBlY3QoY2FyZCkudG9IYXZlQ2xhc3MoJ2N1c3RvbS1jbGFzcycpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnQ2FyZEhlYWRlcicsICgpID0+IHtcbiAgaXQoJ3JlbmRlcnMgY2hpbGRyZW4nLCAoKSA9PiB7XG4gICAgcmVuZGVyKFxuICAgICAgPENhcmRIZWFkZXI+XG4gICAgICAgIDxkaXY+SGVhZGVyIGNvbnRlbnQ8L2Rpdj5cbiAgICAgIDwvQ2FyZEhlYWRlcj5cbiAgICApO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdIZWFkZXIgY29udGVudCcpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICB9KTtcblxuICBpdCgnaGFzIGJvcmRlciBib3R0b20gc3R5bGluZycsICgpID0+IHtcbiAgICBjb25zdCB7IGNvbnRhaW5lciB9ID0gcmVuZGVyKDxDYXJkSGVhZGVyPkhlYWRlcjwvQ2FyZEhlYWRlcj4pO1xuICAgIGNvbnN0IGhlYWRlciA9IGNvbnRhaW5lci5maXJzdENoaWxkIGFzIEhUTUxFbGVtZW50O1xuICAgIGV4cGVjdChoZWFkZXIpLnRvSGF2ZUNsYXNzKCdib3JkZXItYicsICdib3JkZXItZ3JheS0yMDAnKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ0NhcmRUaXRsZScsICgpID0+IHtcbiAgaXQoJ3JlbmRlcnMgY2hpbGRyZW4nLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxDYXJkVGl0bGU+VGl0bGU8L0NhcmRUaXRsZT4pO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdUaXRsZScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICB9KTtcblxuICBpdCgnaGFzIHRpdGxlIHN0eWxpbmcnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxDYXJkVGl0bGU+VGl0bGU8L0NhcmRUaXRsZT4pO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdUaXRsZScpKS50b0hhdmVDbGFzcygndGV4dC1sZycsICdmb250LXNlbWlib2xkJywgJ3RleHQtZ3JheS05MDAnKTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ0NhcmRDb250ZW50JywgKCkgPT4ge1xuICBpdCgncmVuZGVycyBjaGlsZHJlbicsICgpID0+IHtcbiAgICByZW5kZXIoPENhcmRDb250ZW50PkNvbnRlbnQ8L0NhcmRDb250ZW50Pik7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ0NvbnRlbnQnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG5cbiAgaXQoJ2FjY2VwdHMgY3VzdG9tIGNsYXNzTmFtZScsICgpID0+IHtcbiAgICByZW5kZXIoPENhcmRDb250ZW50IGNsYXNzTmFtZT1cImN1c3RvbS1jbGFzc1wiPkNvbnRlbnQ8L0NhcmRDb250ZW50Pik7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ0NvbnRlbnQnKSkudG9IYXZlQ2xhc3MoJ2N1c3RvbS1jbGFzcycpO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9