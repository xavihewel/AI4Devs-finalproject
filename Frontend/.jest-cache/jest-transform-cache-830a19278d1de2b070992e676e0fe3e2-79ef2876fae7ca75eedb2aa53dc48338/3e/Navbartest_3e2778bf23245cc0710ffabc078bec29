9f2541580a3467bc24ba53e9a47aae56
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
jest.mock('../../auth/AuthProvider', () => ({
    useAuth: () => mockUseAuth(),
}));
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const react_router_dom_1 = require("react-router-dom");
const react_i18next_1 = require("react-i18next");
const config_1 = __importDefault(require("../../i18n/config"));
const Navbar_1 = require("./Navbar");
// Mock useAuth hook
const mockUseAuth = jest.fn();
const renderWithProviders = (component, authenticated = false, language = 'ca') => {
    // Set language before rendering
    config_1.default.changeLanguage(language);
    // Mock the useAuth hook
    mockUseAuth.mockReturnValue({
        authenticated,
        login: jest.fn(),
        logout: jest.fn(),
    });
    return (0, react_2.render)((0, jsx_runtime_1.jsx)(react_router_dom_1.BrowserRouter, { children: (0, jsx_runtime_1.jsx)(react_i18next_1.I18nextProvider, { i18n: config_1.default, children: component }) }));
};
describe('Navbar i18n', () => {
    test('renders navigation labels in Catalan', () => {
        renderWithProviders((0, jsx_runtime_1.jsx)(Navbar_1.Navbar, {}), false, 'ca');
        expect(react_2.screen.getByText('Inici')).toBeInTheDocument();
        // Only authenticated users see other nav items
        expect(react_2.screen.queryByText('Viatges')).not.toBeInTheDocument();
        expect(react_2.screen.queryByText('Cercar')).not.toBeInTheDocument();
        expect(react_2.screen.queryByText('Reserves')).not.toBeInTheDocument();
        expect(react_2.screen.queryByText('Historial')).not.toBeInTheDocument();
    });
    test('renders authentication buttons in Catalan', () => {
        renderWithProviders((0, jsx_runtime_1.jsx)(Navbar_1.Navbar, {}), false, 'ca');
        expect(react_2.screen.getByText('Iniciar Sessió')).toBeInTheDocument();
    });
    test('renders authentication buttons in English', () => {
        renderWithProviders((0, jsx_runtime_1.jsx)(Navbar_1.Navbar, {}), false, 'en');
        expect(react_2.screen.getByText('Login')).toBeInTheDocument();
    });
    test('maintains functionality with different languages', () => {
        renderWithProviders((0, jsx_runtime_1.jsx)(Navbar_1.Navbar, {}), false, 'es');
        // Links should still work
        const homeLink = react_2.screen.getByText('Inicio').closest('a');
        expect(homeLink).toHaveAttribute('href', '/');
    });
    test('mobile menu shows translated labels in Catalan', () => {
        renderWithProviders((0, jsx_runtime_1.jsx)(Navbar_1.Navbar, {}), false, 'ca');
        // Open mobile menu
        const hamburgerButton = react_2.screen.getByRole('button', { name: /Obrir menú|Open menu/i });
        react_2.fireEvent.click(hamburgerButton);
        expect(react_2.screen.getAllByText('Inici')).toHaveLength(2); // Desktop and mobile
        // Only authenticated users see other nav items
        expect(react_2.screen.queryByText('Viatges')).not.toBeInTheDocument();
    });
    test('mobile menu shows translated labels in English for authenticated user', () => {
        renderWithProviders((0, jsx_runtime_1.jsx)(Navbar_1.Navbar, {}), true, 'en');
        // Open mobile menu
        const hamburgerButton = react_2.screen.getByRole('button', { name: /Obrir menú|Open menu/i });
        react_2.fireEvent.click(hamburgerButton);
        expect(react_2.screen.getAllByText('Home')).toHaveLength(2); // Desktop and mobile
        // Trips should be visible in both desktop and mobile for authenticated users
        expect(react_2.screen.getAllByText('Trips')).toHaveLength(2); // Desktop and mobile
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,