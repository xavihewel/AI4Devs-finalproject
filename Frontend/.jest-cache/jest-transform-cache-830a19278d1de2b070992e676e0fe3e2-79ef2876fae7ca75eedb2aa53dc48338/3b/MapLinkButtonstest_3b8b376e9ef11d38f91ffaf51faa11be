d468152ed587bbce6ddf5f5193912cc7
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("@testing-library/react");
const MapLinkButtons_1 = require("./MapLinkButtons");
describe('MapLinkButtons', () => {
    it('renders Google Maps and Waze buttons with correct URLs', () => {
        const lat = 40.4168;
        const lng = -3.7038;
        (0, react_1.render)((0, jsx_runtime_1.jsx)(MapLinkButtons_1.MapLinkButtons, { lat: lat, lng: lng }));
        const googleMapsLink = react_1.screen.getByRole('link', { name: /abrir en google maps/i });
        const wazeLink = react_1.screen.getByRole('link', { name: /abrir en waze/i });
        expect(googleMapsLink).toBeInTheDocument();
        expect(wazeLink).toBeInTheDocument();
        expect(googleMapsLink).toHaveAttribute('href', 'https://www.google.com/maps/search/?api=1&query=40.4168,-3.7038');
        expect(wazeLink).toHaveAttribute('href', 'https://waze.com/ul?ll=40.4168%2C-3.7038&navigate=yes');
        expect(googleMapsLink).toHaveAttribute('target', '_blank');
        expect(wazeLink).toHaveAttribute('target', '_blank');
        expect(googleMapsLink).toHaveAttribute('rel', 'noopener noreferrer');
        expect(wazeLink).toHaveAttribute('rel', 'noopener noreferrer');
    });
    it('does not render when coordinates are invalid', () => {
        const { container } = (0, react_1.render)((0, jsx_runtime_1.jsx)(MapLinkButtons_1.MapLinkButtons, { lat: NaN, lng: NaN }));
        // NaN is still a number, so it renders but with invalid URLs
        expect(container.firstChild).not.toBeNull();
        const googleMapsLink = react_1.screen.getByRole('link', { name: /abrir en google maps/i });
        expect(googleMapsLink).toHaveAttribute('href', 'https://www.google.com/maps/search/?api=1&query=NaN,NaN');
    });
    it('does not render when coordinates are not numbers', () => {
        const { container } = (0, react_1.render)((0, jsx_runtime_1.jsx)(MapLinkButtons_1.MapLinkButtons, { lat: null, lng: undefined }));
        expect(container.firstChild).toBeNull();
    });
    it('generates correct URLs for different coordinates', () => {
        const { rerender } = (0, react_1.render)((0, jsx_runtime_1.jsx)(MapLinkButtons_1.MapLinkButtons, { lat: 0, lng: 0 }));
        let googleMapsLink = react_1.screen.getByRole('link', { name: /abrir en google maps/i });
        let wazeLink = react_1.screen.getByRole('link', { name: /abrir en waze/i });
        expect(googleMapsLink).toHaveAttribute('href', 'https://www.google.com/maps/search/?api=1&query=0,0');
        expect(wazeLink).toHaveAttribute('href', 'https://waze.com/ul?ll=0%2C0&navigate=yes');
        rerender((0, jsx_runtime_1.jsx)(MapLinkButtons_1.MapLinkButtons, { lat: 41.3851, lng: 2.1734 }));
        googleMapsLink = react_1.screen.getByRole('link', { name: /abrir en google maps/i });
        wazeLink = react_1.screen.getByRole('link', { name: /abrir en waze/i });
        expect(googleMapsLink).toHaveAttribute('href', 'https://www.google.com/maps/search/?api=1&query=41.3851,2.1734');
        expect(wazeLink).toHaveAttribute('href', 'https://waze.com/ul?ll=41.3851%2C2.1734&navigate=yes');
    });
    it('has correct styling classes', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(MapLinkButtons_1.MapLinkButtons, { lat: 40.4168, lng: -3.7038 }));
        const googleMapsLink = react_1.screen.getByRole('link', { name: /abrir en google maps/i });
        const wazeLink = react_1.screen.getByRole('link', { name: /abrir en waze/i });
        expect(googleMapsLink).toHaveClass('px-3', 'py-1', 'rounded-md', 'text-xs', 'font-medium');
        expect(wazeLink).toHaveClass('px-3', 'py-1', 'rounded-md', 'text-xs', 'font-medium');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,