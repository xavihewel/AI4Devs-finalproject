{"file":"/Users/admin/Documents/AI4Devs-finalproject/Frontend/src/components/matches/services/MatchFilterService.ts","mappings":"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","names":[],"sources":["/Users/admin/Documents/AI4Devs-finalproject/Frontend/src/components/matches/services/MatchFilterService.ts"],"sourcesContent":["import type { MatchDto } from '../../../types/api';\nimport type { MatchFilterStrategy, MatchSortStrategy } from '../interfaces/MatchFilterStrategy';\nimport type { FilterStrategyFactory, SortStrategyFactory } from '../interfaces/MatchFilterStrategy';\n\n/**\n * Service for filtering and sorting matches\n * Follows Single Responsibility Principle - only handles match processing\n * Uses Chain of Responsibility pattern for filters\n * Uses Strategy pattern for sorting\n */\nexport class MatchFilterService {\n  constructor(\n    private readonly filterFactory: FilterStrategyFactory,\n    private readonly sortFactory: SortStrategyFactory\n  ) {}\n\n  /**\n   * Applies filters and sorting to matches\n   * Follows Open/Closed Principle - can be extended with new filters/sorts\n   */\n  processMatches(\n    matches: MatchDto[],\n    filters: {\n      minScore: number;\n      minSeats: number;\n      dateFrom?: string;\n      dateTo?: string;\n      sortBy: 'score' | 'date' | 'seats';\n      sortOrder: 'asc' | 'desc';\n    }\n  ): MatchDto[] {\n    // Apply filters using Chain of Responsibility pattern\n    let filteredMatches = matches;\n\n    if (filters.minScore > 0) {\n      const scoreFilter = this.filterFactory.createScoreFilter(filters.minScore);\n      filteredMatches = scoreFilter.filter(filteredMatches);\n    }\n\n    if (filters.minSeats > 1) {\n      const seatsFilter = this.filterFactory.createSeatsFilter(filters.minSeats);\n      filteredMatches = seatsFilter.filter(filteredMatches);\n    }\n\n    if (filters.dateFrom || filters.dateTo) {\n      const dateFilter = this.filterFactory.createDateRangeFilter(filters.dateFrom, filters.dateTo);\n      filteredMatches = dateFilter.filter(filteredMatches);\n    }\n\n    // Apply sorting using Strategy pattern\n    const sortStrategy = this.createSortStrategy(filters.sortBy, filters.sortOrder);\n    return sortStrategy.sort(filteredMatches);\n  }\n\n  /**\n   * Creates appropriate sort strategy based on criteria\n   * Follows Strategy pattern\n   */\n  private createSortStrategy(sortBy: 'score' | 'date' | 'seats', order: 'asc' | 'desc'): MatchSortStrategy {\n    switch (sortBy) {\n      case 'score':\n        return this.sortFactory.createScoreSort(order);\n      case 'date':\n        return this.sortFactory.createDateSort(order);\n      case 'seats':\n        return this.sortFactory.createSeatsSort(order);\n      default:\n        return this.sortFactory.createScoreSort(order);\n    }\n  }\n\n  /**\n   * Gets active filter names for display\n   * Follows Interface Segregation Principle - only exposes what's needed\n   */\n  getActiveFilterNames(filters: {\n    minScore: number;\n    minSeats: number;\n    dateFrom?: string;\n    dateTo?: string;\n  }): string[] {\n    const names: string[] = [];\n\n    if (filters.minScore > 0) {\n      const scoreFilter = this.filterFactory.createScoreFilter(filters.minScore);\n      names.push(scoreFilter.getFilterName());\n    }\n\n    if (filters.minSeats > 1) {\n      const seatsFilter = this.filterFactory.createSeatsFilter(filters.minSeats);\n      names.push(seatsFilter.getFilterName());\n    }\n\n    if (filters.dateFrom || filters.dateTo) {\n      const dateFilter = this.filterFactory.createDateRangeFilter(filters.dateFrom, filters.dateTo);\n      const filterName = dateFilter.getFilterName();\n      if (filterName) {\n        names.push(filterName);\n      }\n    }\n\n    return names;\n  }\n}\n"],"version":3}