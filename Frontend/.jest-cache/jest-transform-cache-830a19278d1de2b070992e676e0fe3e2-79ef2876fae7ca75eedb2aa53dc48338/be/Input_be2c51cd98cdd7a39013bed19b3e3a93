bb248fd82d2f0e16992b471b6a6beb9d
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Select = exports.Input = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importDefault(require("react"));
const Input = ({ label, error, helperText, className = '', id, ...props }) => {
    const inputId = id || `input-${Math.random().toString(36).substr(2, 9)}`;
    const inputClasses = `form-input ${error ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''} ${className}`;
    return ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-1", children: [label && ((0, jsx_runtime_1.jsx)("label", { htmlFor: inputId, className: "form-label", children: label })), (0, jsx_runtime_1.jsx)("input", { id: inputId, className: inputClasses, ...props }), error && ((0, jsx_runtime_1.jsx)("p", { className: "text-sm text-red-600", children: error })), helperText && !error && ((0, jsx_runtime_1.jsx)("p", { className: "text-sm text-gray-500", children: helperText }))] }));
};
exports.Input = Input;
const Select = ({ label, error, helperText, options, className = '', id, ...props }) => {
    const selectId = id || `select-${Math.random().toString(36).substr(2, 9)}`;
    const selectClasses = `form-input ${error ? 'border-red-300 focus:border-red-500 focus:ring-red-500' : ''} ${className}`;
    return ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-1", children: [label && ((0, jsx_runtime_1.jsx)("label", { htmlFor: selectId, className: "form-label", children: label })), (0, jsx_runtime_1.jsx)("select", { id: selectId, className: selectClasses, ...props, children: options.map((option) => ((0, jsx_runtime_1.jsx)("option", { value: option.value, children: option.label }, option.value))) }), error && ((0, jsx_runtime_1.jsx)("p", { className: "text-sm text-red-600", children: error })), helperText && !error && ((0, jsx_runtime_1.jsx)("p", { className: "text-sm text-gray-500", children: helperText }))] }));
};
exports.Select = Select;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2FkbWluL0RvY3VtZW50cy9BSTREZXZzLWZpbmFscHJvamVjdC9Gcm9udGVuZC9zcmMvY29tcG9uZW50cy91aS9JbnB1dC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLGtEQUEwQjtBQVFuQixNQUFNLEtBQUssR0FBeUIsQ0FBQyxFQUMxQyxLQUFLLEVBQ0wsS0FBSyxFQUNMLFVBQVUsRUFDVixTQUFTLEdBQUcsRUFBRSxFQUNkLEVBQUUsRUFDRixHQUFHLEtBQUssRUFDVCxFQUFFLEVBQUU7SUFDSCxNQUFNLE9BQU8sR0FBRyxFQUFFLElBQUksU0FBUyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUV6RSxNQUFNLFlBQVksR0FBRyxjQUFjLEtBQUssQ0FBQyxDQUFDLENBQUMsd0RBQXdELENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxTQUFTLEVBQUUsQ0FBQztJQUV4SCxPQUFPLENBQ0wsaUNBQUssU0FBUyxFQUFDLFdBQVcsYUFDdkIsS0FBSyxJQUFJLENBQ1Isa0NBQU8sT0FBTyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUMsWUFBWSxZQUM1QyxLQUFLLEdBQ0EsQ0FDVCxFQUNELGtDQUNFLEVBQUUsRUFBRSxPQUFPLEVBQ1gsU0FBUyxFQUFFLFlBQVksS0FDbkIsS0FBSyxHQUNULEVBQ0QsS0FBSyxJQUFJLENBQ1IsOEJBQUcsU0FBUyxFQUFDLHNCQUFzQixZQUFFLEtBQUssR0FBSyxDQUNoRCxFQUNBLFVBQVUsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUN2Qiw4QkFBRyxTQUFTLEVBQUMsdUJBQXVCLFlBQUUsVUFBVSxHQUFLLENBQ3RELElBQ0csQ0FDUCxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBaENXLFFBQUEsS0FBSyxTQWdDaEI7QUFTSyxNQUFNLE1BQU0sR0FBMEIsQ0FBQyxFQUM1QyxLQUFLLEVBQ0wsS0FBSyxFQUNMLFVBQVUsRUFDVixPQUFPLEVBQ1AsU0FBUyxHQUFHLEVBQUUsRUFDZCxFQUFFLEVBQ0YsR0FBRyxLQUFLLEVBQ1QsRUFBRSxFQUFFO0lBQ0gsTUFBTSxRQUFRLEdBQUcsRUFBRSxJQUFJLFVBQVUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFFM0UsTUFBTSxhQUFhLEdBQUcsY0FBYyxLQUFLLENBQUMsQ0FBQyxDQUFDLHdEQUF3RCxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksU0FBUyxFQUFFLENBQUM7SUFFekgsT0FBTyxDQUNMLGlDQUFLLFNBQVMsRUFBQyxXQUFXLGFBQ3ZCLEtBQUssSUFBSSxDQUNSLGtDQUFPLE9BQU8sRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFDLFlBQVksWUFDN0MsS0FBSyxHQUNBLENBQ1QsRUFDRCxtQ0FDRSxFQUFFLEVBQUUsUUFBUSxFQUNaLFNBQVMsRUFBRSxhQUFhLEtBQ3BCLEtBQUssWUFFUixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUN2QixtQ0FBMkIsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLLFlBQzNDLE1BQU0sQ0FBQyxLQUFLLElBREYsTUFBTSxDQUFDLEtBQUssQ0FFaEIsQ0FDVixDQUFDLEdBQ0ssRUFDUixLQUFLLElBQUksQ0FDUiw4QkFBRyxTQUFTLEVBQUMsc0JBQXNCLFlBQUUsS0FBSyxHQUFLLENBQ2hELEVBQ0EsVUFBVSxJQUFJLENBQUMsS0FBSyxJQUFJLENBQ3ZCLDhCQUFHLFNBQVMsRUFBQyx1QkFBdUIsWUFBRSxVQUFVLEdBQUssQ0FDdEQsSUFDRyxDQUNQLENBQUM7QUFDSixDQUFDLENBQUM7QUF2Q1csUUFBQSxNQUFNLFVBdUNqQiIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvYWRtaW4vRG9jdW1lbnRzL0FJNERldnMtZmluYWxwcm9qZWN0L0Zyb250ZW5kL3NyYy9jb21wb25lbnRzL3VpL0lucHV0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbnRlcmZhY2UgSW5wdXRQcm9wcyBleHRlbmRzIFJlYWN0LklucHV0SFRNTEF0dHJpYnV0ZXM8SFRNTElucHV0RWxlbWVudD4ge1xuICBsYWJlbD86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgZXJyb3I/OiBzdHJpbmc7XG4gIGhlbHBlclRleHQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjb25zdCBJbnB1dDogUmVhY3QuRkM8SW5wdXRQcm9wcz4gPSAoe1xuICBsYWJlbCxcbiAgZXJyb3IsXG4gIGhlbHBlclRleHQsXG4gIGNsYXNzTmFtZSA9ICcnLFxuICBpZCxcbiAgLi4ucHJvcHNcbn0pID0+IHtcbiAgY29uc3QgaW5wdXRJZCA9IGlkIHx8IGBpbnB1dC0ke01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA5KX1gO1xuICBcbiAgY29uc3QgaW5wdXRDbGFzc2VzID0gYGZvcm0taW5wdXQgJHtlcnJvciA/ICdib3JkZXItcmVkLTMwMCBmb2N1czpib3JkZXItcmVkLTUwMCBmb2N1czpyaW5nLXJlZC01MDAnIDogJyd9ICR7Y2xhc3NOYW1lfWA7XG4gIFxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwic3BhY2UteS0xXCI+XG4gICAgICB7bGFiZWwgJiYgKFxuICAgICAgICA8bGFiZWwgaHRtbEZvcj17aW5wdXRJZH0gY2xhc3NOYW1lPVwiZm9ybS1sYWJlbFwiPlxuICAgICAgICAgIHtsYWJlbH1cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICl9XG4gICAgICA8aW5wdXRcbiAgICAgICAgaWQ9e2lucHV0SWR9XG4gICAgICAgIGNsYXNzTmFtZT17aW5wdXRDbGFzc2VzfVxuICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAvPlxuICAgICAge2Vycm9yICYmIChcbiAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1zbSB0ZXh0LXJlZC02MDBcIj57ZXJyb3J9PC9wPlxuICAgICAgKX1cbiAgICAgIHtoZWxwZXJUZXh0ICYmICFlcnJvciAmJiAoXG4gICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtc20gdGV4dC1ncmF5LTUwMFwiPntoZWxwZXJUZXh0fTwvcD5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5pbnRlcmZhY2UgU2VsZWN0UHJvcHMgZXh0ZW5kcyBSZWFjdC5TZWxlY3RIVE1MQXR0cmlidXRlczxIVE1MU2VsZWN0RWxlbWVudD4ge1xuICBsYWJlbD86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgZXJyb3I/OiBzdHJpbmc7XG4gIGhlbHBlclRleHQ/OiBzdHJpbmc7XG4gIG9wdGlvbnM6IEFycmF5PHsgdmFsdWU6IHN0cmluZzsgbGFiZWw6IHN0cmluZyB9Pjtcbn1cblxuZXhwb3J0IGNvbnN0IFNlbGVjdDogUmVhY3QuRkM8U2VsZWN0UHJvcHM+ID0gKHtcbiAgbGFiZWwsXG4gIGVycm9yLFxuICBoZWxwZXJUZXh0LFxuICBvcHRpb25zLFxuICBjbGFzc05hbWUgPSAnJyxcbiAgaWQsXG4gIC4uLnByb3BzXG59KSA9PiB7XG4gIGNvbnN0IHNlbGVjdElkID0gaWQgfHwgYHNlbGVjdC0ke01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA5KX1gO1xuICBcbiAgY29uc3Qgc2VsZWN0Q2xhc3NlcyA9IGBmb3JtLWlucHV0ICR7ZXJyb3IgPyAnYm9yZGVyLXJlZC0zMDAgZm9jdXM6Ym9yZGVyLXJlZC01MDAgZm9jdXM6cmluZy1yZWQtNTAwJyA6ICcnfSAke2NsYXNzTmFtZX1gO1xuICBcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInNwYWNlLXktMVwiPlxuICAgICAge2xhYmVsICYmIChcbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9e3NlbGVjdElkfSBjbGFzc05hbWU9XCJmb3JtLWxhYmVsXCI+XG4gICAgICAgICAge2xhYmVsfVxuICAgICAgICA8L2xhYmVsPlxuICAgICAgKX1cbiAgICAgIDxzZWxlY3RcbiAgICAgICAgaWQ9e3NlbGVjdElkfVxuICAgICAgICBjbGFzc05hbWU9e3NlbGVjdENsYXNzZXN9XG4gICAgICAgIHsuLi5wcm9wc31cbiAgICAgID5cbiAgICAgICAge29wdGlvbnMubWFwKChvcHRpb24pID0+IChcbiAgICAgICAgICA8b3B0aW9uIGtleT17b3B0aW9uLnZhbHVlfSB2YWx1ZT17b3B0aW9uLnZhbHVlfT5cbiAgICAgICAgICAgIHtvcHRpb24ubGFiZWx9XG4gICAgICAgICAgPC9vcHRpb24+XG4gICAgICAgICkpfVxuICAgICAgPC9zZWxlY3Q+XG4gICAgICB7ZXJyb3IgJiYgKFxuICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXNtIHRleHQtcmVkLTYwMFwiPntlcnJvcn08L3A+XG4gICAgICApfVxuICAgICAge2hlbHBlclRleHQgJiYgIWVycm9yICYmIChcbiAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1zbSB0ZXh0LWdyYXktNTAwXCI+e2hlbHBlclRleHR9PC9wPlxuICAgICAgKX1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG4iXSwidmVyc2lvbiI6M30=