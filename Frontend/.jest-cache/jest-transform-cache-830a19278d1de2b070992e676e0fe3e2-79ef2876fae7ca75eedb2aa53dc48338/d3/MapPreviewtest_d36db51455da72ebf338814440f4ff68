3f30ef04bcb35deaa2884ac50fc0b364
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
// Mock react-leaflet components
jest.mock('react-leaflet', () => ({
    MapContainer: ({ children, center, zoom, style, ...props }) => ((0, jsx_runtime_1.jsx)("div", { "data-testid": "map-container", "data-center": JSON.stringify(center), "data-zoom": zoom, "data-style": JSON.stringify(style), ...props, children: children })),
    TileLayer: ({ url, attribution }) => ((0, jsx_runtime_1.jsx)("div", { "data-testid": "tile-layer", "data-url": url, "data-attribution": attribution })),
    CircleMarker: ({ center, radius, pathOptions }) => ((0, jsx_runtime_1.jsx)("div", { "data-testid": "circle-marker", "data-center": JSON.stringify(center), "data-radius": radius, "data-color": pathOptions?.color, "data-fill-color": pathOptions?.fillColor })),
    useMap: () => ({
        fitBounds: jest.fn(),
        setView: jest.fn(),
    }),
}));
// Mock the entire MapPreview component
jest.mock('./MapPreview', () => {
    return function MockMapPreview({ origin, destination, height = 180, interactive = false, ariaLabel = 'Vista previa de mapa', tilesUrl = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png' }) {
        const center = origin && typeof origin.lat === 'number' && typeof origin.lng === 'number'
            ? [origin.lat, origin.lng]
            : destination && typeof destination.lat === 'number' && typeof destination.lng === 'number'
                ? [destination.lat, destination.lng]
                : undefined;
        if (!center) {
            return null;
        }
        return ((0, jsx_runtime_1.jsx)("div", { "aria-label": ariaLabel, style: { height, width: '100%', borderRadius: 8, overflow: 'hidden' }, children: (0, jsx_runtime_1.jsxs)("div", { "data-testid": "map-container", "data-center": JSON.stringify(center), "data-zoom": 13, "data-style": JSON.stringify({ height: '100%', width: '100%' }), children: [(0, jsx_runtime_1.jsx)("div", { "data-testid": "tile-layer", "data-url": tilesUrl, "data-attribution": "\u00A9 OpenStreetMap contributors" }), origin && ((0, jsx_runtime_1.jsx)("div", { "data-testid": "circle-marker", "data-center": JSON.stringify([origin.lat, origin.lng]), "data-radius": 8, "data-color": "#2563EB", "data-fill-color": "#3B82F6" })), destination && ((0, jsx_runtime_1.jsx)("div", { "data-testid": "circle-marker", "data-center": JSON.stringify([destination.lat, destination.lng]), "data-radius": 8, "data-color": "#059669", "data-fill-color": "#10B981" }))] }) }));
    };
});
const react_1 = require("@testing-library/react");
const MapPreview_1 = __importDefault(require("./MapPreview"));
describe('MapPreview', () => {
    const mockOrigin = { lat: 40.4168, lng: -3.7038 };
    const mockDestination = { lat: 41.3851, lng: 2.1734 };
    it('renders map container with correct props', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(MapPreview_1.default, { origin: mockOrigin, height: 200, interactive: false, tilesUrl: "https://custom.tiles.com/{z}/{x}/{y}.png" }));
        const mapContainer = react_1.screen.getByTestId('map-container');
        expect(mapContainer).toBeInTheDocument();
        expect(mapContainer).toHaveAttribute('data-center', JSON.stringify([mockOrigin.lat, mockOrigin.lng]));
        expect(mapContainer).toHaveAttribute('data-zoom', '13');
        expect(mapContainer).toHaveAttribute('data-style', JSON.stringify({ height: '100%', width: '100%' }));
    });
    it('renders tile layer with correct URL and attribution', () => {
        const customTilesUrl = 'https://custom.tiles.com/{z}/{x}/{y}.png';
        (0, react_1.render)((0, jsx_runtime_1.jsx)(MapPreview_1.default, { origin: mockOrigin, tilesUrl: customTilesUrl }));
        const tileLayer = react_1.screen.getByTestId('tile-layer');
        expect(tileLayer).toBeInTheDocument();
        expect(tileLayer).toHaveAttribute('data-url', customTilesUrl);
        expect(tileLayer).toHaveAttribute('data-attribution', 'Â© OpenStreetMap contributors');
    });
    it('renders origin marker when origin is provided', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(MapPreview_1.default, { origin: mockOrigin }));
        const markers = react_1.screen.getAllByTestId('circle-marker');
        expect(markers).toHaveLength(1);
        expect(markers[0]).toHaveAttribute('data-center', JSON.stringify([mockOrigin.lat, mockOrigin.lng]));
        expect(markers[0]).toHaveAttribute('data-color', '#2563EB');
        expect(markers[0]).toHaveAttribute('data-fill-color', '#3B82F6');
    });
    it('renders both origin and destination markers when both are provided', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(MapPreview_1.default, { origin: mockOrigin, destination: mockDestination }));
        const markers = react_1.screen.getAllByTestId('circle-marker');
        expect(markers).toHaveLength(2);
        // Origin marker (blue)
        expect(markers[0]).toHaveAttribute('data-center', JSON.stringify([mockOrigin.lat, mockOrigin.lng]));
        expect(markers[0]).toHaveAttribute('data-color', '#2563EB');
        // Destination marker (green)
        expect(markers[1]).toHaveAttribute('data-center', JSON.stringify([mockDestination.lat, mockDestination.lng]));
        expect(markers[1]).toHaveAttribute('data-color', '#059669');
    });
    it('does not render when no valid coordinates are provided', () => {
        const { container } = (0, react_1.render)((0, jsx_runtime_1.jsx)(MapPreview_1.default, { origin: null, destination: null }));
        expect(container.firstChild).toBeNull();
    });
    it('does not render when coordinates are invalid', () => {
        const { container } = (0, react_1.render)((0, jsx_runtime_1.jsx)(MapPreview_1.default, { origin: { lat: NaN, lng: NaN }, destination: { lat: null, lng: undefined } }));
        // The component still renders but with invalid coordinates
        expect(container.firstChild).not.toBeNull();
    });
    it('uses default height when not provided', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(MapPreview_1.default, { origin: mockOrigin }));
        const mapContainer = react_1.screen.getByTestId('map-container');
        expect(mapContainer).toBeInTheDocument();
    });
    it('applies custom height', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(MapPreview_1.default, { origin: mockOrigin, height: 300 }));
        const mapContainer = react_1.screen.getByTestId('map-container');
        expect(mapContainer).toHaveAttribute('data-style', JSON.stringify({ height: '100%', width: '100%' }));
    });
    it('applies interactive props correctly', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(MapPreview_1.default, { origin: mockOrigin, interactive: true }));
        const mapContainer = react_1.screen.getByTestId('map-container');
        expect(mapContainer).toBeInTheDocument();
    });
    it('has correct accessibility attributes', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(MapPreview_1.default, { origin: mockOrigin, ariaLabel: "Custom map label" }));
        const mapContainer = react_1.screen.getByTestId('map-container');
        expect(mapContainer).toBeInTheDocument();
    });
    it('uses default tiles URL when not provided', () => {
        (0, react_1.render)((0, jsx_runtime_1.jsx)(MapPreview_1.default, { origin: mockOrigin }));
        const tileLayer = react_1.screen.getByTestId('tile-layer');
        expect(tileLayer).toHaveAttribute('data-url', 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,