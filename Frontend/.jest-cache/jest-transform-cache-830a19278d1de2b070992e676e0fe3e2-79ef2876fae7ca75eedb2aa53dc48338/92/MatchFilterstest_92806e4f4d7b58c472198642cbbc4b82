69821d86dd7df8a537aa01491a7cab09
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const react_i18next_1 = require("react-i18next");
const config_1 = __importDefault(require("../../i18n/config"));
const MatchFilters_1 = __importDefault(require("./MatchFilters"));
const renderWithI18n = (component) => {
    return (0, react_2.render)((0, jsx_runtime_1.jsx)(react_i18next_1.I18nextProvider, { i18n: config_1.default, children: component }));
};
const mockMatches = [
    {
        id: 'match-1',
        tripId: 'trip-1',
        driverId: 'driver-1',
        score: 0.9,
        status: 'PENDING',
        origin: '40.4168,-3.7038',
        destinationSedeId: 'SEDE-1',
        dateTime: '2024-01-15T08:30:00Z',
        seatsFree: 4,
        reasons: ['Same route'],
        direction: 'TO_SEDE',
        pairedTripId: null
    },
    {
        id: 'match-2',
        tripId: 'trip-2',
        driverId: 'driver-2',
        score: 0.6,
        status: 'PENDING',
        origin: '40.4200,-3.7000',
        destinationSedeId: 'SEDE-1',
        dateTime: '2024-01-15T09:00:00Z',
        seatsFree: 2,
        reasons: ['Similar time'],
        direction: 'TO_SEDE',
        pairedTripId: null
    },
    {
        id: 'match-3',
        tripId: 'trip-3',
        driverId: 'driver-3',
        score: 0.3,
        status: 'PENDING',
        origin: '40.4100,-3.7100',
        destinationSedeId: 'SEDE-1',
        dateTime: '2024-01-16T08:00:00Z',
        seatsFree: 1,
        reasons: ['Different route'],
        direction: 'TO_SEDE',
        pairedTripId: null
    }
];
describe('MatchFilters', () => {
    const mockOnFilteredMatches = jest.fn();
    const mockOnFiltersChange = jest.fn();
    beforeEach(() => {
        jest.clearAllMocks();
        // Clear localStorage before each test
        localStorage.clear();
    });
    it('renders filter controls correctly', () => {
        renderWithI18n((0, jsx_runtime_1.jsx)(MatchFilters_1.default, { matches: mockMatches, onFilteredMatches: mockOnFilteredMatches, onFiltersChange: mockOnFiltersChange }));
        expect(react_2.screen.getByText('Filter Results')).toBeInTheDocument();
        expect(react_2.screen.getByText('Minimum Score')).toBeInTheDocument();
        expect(react_2.screen.getByText('Minimum Seats')).toBeInTheDocument();
        expect(react_2.screen.getByText('From Date')).toBeInTheDocument();
        expect(react_2.screen.getByText('To Date')).toBeInTheDocument();
        expect(react_2.screen.getByText('Sort By')).toBeInTheDocument();
        expect(react_2.screen.getByText('Order')).toBeInTheDocument();
    });
    it('applies score filter correctly', async () => {
        renderWithI18n((0, jsx_runtime_1.jsx)(MatchFilters_1.default, { matches: mockMatches, onFilteredMatches: mockOnFilteredMatches, onFiltersChange: mockOnFiltersChange }));
        const scoreSlider = react_2.screen.getByRole('slider');
        react_2.fireEvent.change(scoreSlider, { target: { value: '70' } });
        await (0, react_2.waitFor)(() => {
            expect(mockOnFilteredMatches).toHaveBeenCalledWith(expect.arrayContaining([
                expect.objectContaining({ score: 0.9 })
            ]));
        });
    });
    it('applies seats filter correctly', async () => {
        renderWithI18n((0, jsx_runtime_1.jsx)(MatchFilters_1.default, { matches: mockMatches, onFilteredMatches: mockOnFilteredMatches, onFiltersChange: mockOnFiltersChange }));
        const seatsSelect = react_2.screen.getByDisplayValue('1 seat');
        react_2.fireEvent.change(seatsSelect, { target: { value: '3' } });
        await (0, react_2.waitFor)(() => {
            expect(mockOnFilteredMatches).toHaveBeenCalledWith(expect.arrayContaining([
                expect.objectContaining({ seatsFree: 4 })
            ]));
        });
    });
    it('applies date filters correctly', async () => {
        renderWithI18n((0, jsx_runtime_1.jsx)(MatchFilters_1.default, { matches: mockMatches, onFilteredMatches: mockOnFilteredMatches, onFiltersChange: mockOnFiltersChange }));
        const dateFromInput = react_2.screen.getByLabelText('From Date');
        react_2.fireEvent.change(dateFromInput, { target: { value: '2024-01-15' } });
        await (0, react_2.waitFor)(() => {
            expect(mockOnFilteredMatches).toHaveBeenCalledWith(expect.arrayContaining([
                expect.objectContaining({ dateTime: '2024-01-15T08:30:00Z' }),
                expect.objectContaining({ dateTime: '2024-01-15T09:00:00Z' })
            ]));
        });
    });
    it('sorts by score correctly', async () => {
        renderWithI18n((0, jsx_runtime_1.jsx)(MatchFilters_1.default, { matches: mockMatches, onFilteredMatches: mockOnFilteredMatches, onFiltersChange: mockOnFiltersChange }));
        const sortBySelect = react_2.screen.getByDisplayValue('Score');
        react_2.fireEvent.change(sortBySelect, { target: { value: 'score' } });
        await (0, react_2.waitFor)(() => {
            const filteredMatches = mockOnFilteredMatches.mock.calls[0][0];
            expect(filteredMatches[0].score).toBeGreaterThanOrEqual(filteredMatches[1].score);
        });
    });
    it('sorts by date correctly', async () => {
        renderWithI18n((0, jsx_runtime_1.jsx)(MatchFilters_1.default, { matches: mockMatches, onFilteredMatches: mockOnFilteredMatches, onFiltersChange: mockOnFiltersChange }));
        const sortBySelect = react_2.screen.getByDisplayValue('Score');
        react_2.fireEvent.change(sortBySelect, { target: { value: 'date' } });
        await (0, react_2.waitFor)(() => {
            const filteredMatches = mockOnFilteredMatches.mock.calls[0][0];
            const date1 = new Date(filteredMatches[0].dateTime);
            const date2 = new Date(filteredMatches[1].dateTime);
            expect(date1.getTime()).toBeLessThanOrEqual(date2.getTime());
        });
    });
    it('sorts by seats correctly', async () => {
        renderWithI18n((0, jsx_runtime_1.jsx)(MatchFilters_1.default, { matches: mockMatches, onFilteredMatches: mockOnFilteredMatches, onFiltersChange: mockOnFiltersChange }));
        const sortBySelect = react_2.screen.getByDisplayValue('Score');
        react_2.fireEvent.change(sortBySelect, { target: { value: 'seats' } });
        await (0, react_2.waitFor)(() => {
            const filteredMatches = mockOnFilteredMatches.mock.calls[0][0];
            expect(filteredMatches[0].seatsFree).toBeGreaterThanOrEqual(filteredMatches[1].seatsFree);
        });
    });
    it('changes sort order correctly', async () => {
        renderWithI18n((0, jsx_runtime_1.jsx)(MatchFilters_1.default, { matches: mockMatches, onFilteredMatches: mockOnFilteredMatches, onFiltersChange: mockOnFiltersChange }));
        const sortOrderSelect = react_2.screen.getByDisplayValue('Descending');
        react_2.fireEvent.change(sortOrderSelect, { target: { value: 'asc' } });
        await (0, react_2.waitFor)(() => {
            expect(mockOnFiltersChange).toHaveBeenCalledWith(expect.objectContaining({ sortOrder: 'asc' }));
        });
    });
    it('shows active filter count', async () => {
        renderWithI18n((0, jsx_runtime_1.jsx)(MatchFilters_1.default, { matches: mockMatches, onFilteredMatches: mockOnFilteredMatches, onFiltersChange: mockOnFiltersChange }));
        const scoreSlider = react_2.screen.getByRole('slider');
        react_2.fireEvent.change(scoreSlider, { target: { value: '50' } });
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByTestId('active-count')).toBeInTheDocument();
        });
    });
    it('shows filter chips for active filters', async () => {
        renderWithI18n((0, jsx_runtime_1.jsx)(MatchFilters_1.default, { matches: mockMatches, onFilteredMatches: mockOnFilteredMatches, onFiltersChange: mockOnFiltersChange }));
        const scoreSlider = react_2.screen.getByRole('slider');
        react_2.fireEvent.change(scoreSlider, { target: { value: '50' } });
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByTestId('score-chip')).toBeInTheDocument();
        });
    });
    it('removes filter chips when clicked', async () => {
        renderWithI18n((0, jsx_runtime_1.jsx)(MatchFilters_1.default, { matches: mockMatches, onFilteredMatches: mockOnFilteredMatches, onFiltersChange: mockOnFiltersChange }));
        const scoreSlider = react_2.screen.getByRole('slider');
        react_2.fireEvent.change(scoreSlider, { target: { value: '50' } });
        await (0, react_2.waitFor)(() => {
            const chip = react_2.screen.getByTestId('score-chip');
            const removeButton = chip.querySelector('button');
            react_2.fireEvent.click(removeButton);
        });
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.queryByTestId('score-chip')).not.toBeInTheDocument();
        });
    });
    it('clears all filters when clear button is clicked', async () => {
        renderWithI18n((0, jsx_runtime_1.jsx)(MatchFilters_1.default, { matches: mockMatches, onFilteredMatches: mockOnFilteredMatches, onFiltersChange: mockOnFiltersChange }));
        const scoreSlider = react_2.screen.getByRole('slider');
        react_2.fireEvent.change(scoreSlider, { target: { value: '50' } });
        await (0, react_2.waitFor)(() => {
            const clearButton = react_2.screen.getByTestId('clear-filters');
            react_2.fireEvent.click(clearButton);
        });
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.queryByTestId('score-chip')).not.toBeInTheDocument();
        });
    });
    it('persists filters to localStorage', async () => {
        renderWithI18n((0, jsx_runtime_1.jsx)(MatchFilters_1.default, { matches: mockMatches, onFilteredMatches: mockOnFilteredMatches, onFiltersChange: mockOnFiltersChange }));
        const scoreSlider = react_2.screen.getByRole('slider');
        react_2.fireEvent.change(scoreSlider, { target: { value: '70' } });
        await (0, react_2.waitFor)(() => {
            const savedFilters = localStorage.getItem('matchFilters');
            expect(savedFilters).toBeTruthy();
            const parsed = JSON.parse(savedFilters);
            expect(parsed.minScore).toBe(70);
        });
    });
    it('loads filters from localStorage on mount', () => {
        const savedFilters = {
            minScore: 60,
            minSeats: 2,
            dateFrom: '2024-01-15',
            dateTo: '',
            sortBy: 'score',
            sortOrder: 'desc'
        };
        localStorage.setItem('matchFilters', JSON.stringify(savedFilters));
        renderWithI18n((0, jsx_runtime_1.jsx)(MatchFilters_1.default, { matches: mockMatches, onFilteredMatches: mockOnFilteredMatches, onFiltersChange: mockOnFiltersChange }));
        expect(react_2.screen.getByDisplayValue('60')).toBeInTheDocument();
    });
    it('handles invalid localStorage data gracefully', () => {
        localStorage.setItem('matchFilters', 'invalid json');
        renderWithI18n((0, jsx_runtime_1.jsx)(MatchFilters_1.default, { matches: mockMatches, onFilteredMatches: mockOnFilteredMatches, onFiltersChange: mockOnFiltersChange }));
        // Should not crash and should use default values
        expect(react_2.screen.getByDisplayValue('0')).toBeInTheDocument();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,