682f300b1cc81e9377e6f5a2b3bb8dde
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
// Mock the API service
jest.mock('../../api/ratings');
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const TrustProfile_1 = require("./TrustProfile");
const ratings_1 = require("../../api/ratings");
const mockRatingsService = ratings_1.RatingsService;
describe('TrustProfile', () => {
    const mockTrustStats = {
        totalRatings: 10,
        thumbsUp: 8,
        thumbsDown: 2,
        trustScore: 0.8,
        mostCommonTags: ['punctual', 'friendly']
    };
    beforeEach(() => {
        jest.clearAllMocks();
    });
    it('should render loading state initially', () => {
        mockRatingsService.getTrustStats.mockImplementation(() => new Promise(() => { }));
        (0, react_2.render)((0, jsx_runtime_1.jsx)(TrustProfile_1.TrustProfile, { userId: "test-user" }));
        expect(react_2.screen.getByTestId('loading-spinner')).toBeInTheDocument();
    });
    it('should render trust profile with stats', async () => {
        mockRatingsService.getTrustStats.mockResolvedValue(mockTrustStats);
        (0, react_2.render)((0, jsx_runtime_1.jsx)(TrustProfile_1.TrustProfile, { userId: "test-user", userName: "Test User" }));
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByText('Perfil de Confianza - Test User')).toBeInTheDocument();
            expect(react_2.screen.getByText('80%')).toBeInTheDocument();
            expect(react_2.screen.getByText('Excelente')).toBeInTheDocument();
            expect(react_2.screen.getByText('10')).toBeInTheDocument();
            expect(react_2.screen.getByText('8')).toBeInTheDocument();
            expect(react_2.screen.getByText('2')).toBeInTheDocument();
        });
    });
    it('should render error state when API fails', async () => {
        mockRatingsService.getTrustStats.mockRejectedValue(new Error('API Error'));
        (0, react_2.render)((0, jsx_runtime_1.jsx)(TrustProfile_1.TrustProfile, { userId: "test-user" }));
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByText('Error al cargar estadísticas de confianza')).toBeInTheDocument();
        });
    });
    it('should render no stats message when no data', async () => {
        mockRatingsService.getTrustStats.mockResolvedValue(null);
        (0, react_2.render)((0, jsx_runtime_1.jsx)(TrustProfile_1.TrustProfile, { userId: "test-user" }));
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByText('No hay estadísticas de confianza disponibles')).toBeInTheDocument();
        });
    });
    it('should display correct trust score colors', async () => {
        const highScoreStats = { ...mockTrustStats, trustScore: 0.9 };
        mockRatingsService.getTrustStats.mockResolvedValue(highScoreStats);
        (0, react_2.render)((0, jsx_runtime_1.jsx)(TrustProfile_1.TrustProfile, { userId: "test-user" }));
        await (0, react_2.waitFor)(() => {
            const scoreElement = react_2.screen.getByText('90%');
            expect(scoreElement).toHaveClass('text-green-600');
        });
    });
    it('should display most common tags', async () => {
        mockRatingsService.getTrustStats.mockResolvedValue(mockTrustStats);
        (0, react_2.render)((0, jsx_runtime_1.jsx)(TrustProfile_1.TrustProfile, { userId: "test-user" }));
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByText('Etiquetas más comunes')).toBeInTheDocument();
            expect(react_2.screen.getByText('punctual')).toBeInTheDocument();
            expect(react_2.screen.getByText('friendly')).toBeInTheDocument();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,