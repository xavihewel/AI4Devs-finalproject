{"file":"/Users/admin/Documents/AI4Devs-finalproject/Frontend/src/components/matches/strategies/SeatsSortStrategy.ts","mappings":";;;AAGA;;;GAGG;AACH,MAAa,iBAAiB;IAC5B,YAA6B,KAAqB;QAAtC;;;;mBAAiB,KAAK;WAAgB;IAAG,CAAC;IAEtD,IAAI,CAAC,OAAmB;QACtB,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YAChC,MAAM,UAAU,GAAG,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,SAAS,CAAC;YAC7C,OAAO,IAAI,CAAC,KAAK,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC;QAC1D,CAAC,CAAC,CAAC;IACL,CAAC;IAED,WAAW;QACT,OAAO,SAAS,IAAI,CAAC,KAAK,KAAK,MAAM,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;IACvE,CAAC;CACF;AAbD,8CAaC","names":[],"sources":["/Users/admin/Documents/AI4Devs-finalproject/Frontend/src/components/matches/strategies/SeatsSortStrategy.ts"],"sourcesContent":["import type { MatchDto } from '../../../types/api';\nimport type { MatchSortStrategy } from '../interfaces/MatchFilterStrategy';\n\n/**\n * Concrete strategy for sorting by available seats\n * Follows Single Responsibility Principle - only handles seats sorting\n */\nexport class SeatsSortStrategy implements MatchSortStrategy {\n  constructor(private readonly order: 'asc' | 'desc') {}\n\n  sort(matches: MatchDto[]): MatchDto[] {\n    return [...matches].sort((a, b) => {\n      const comparison = a.seatsFree - b.seatsFree;\n      return this.order === 'desc' ? -comparison : comparison;\n    });\n  }\n\n  getSortName(): string {\n    return `Seats ${this.order === 'desc' ? 'Descending' : 'Ascending'}`;\n  }\n}\n"],"version":3}