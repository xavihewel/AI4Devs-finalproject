5dc32cbfdaf3be9944f39519396a7f80
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
// Mock the API service
jest.mock('../../api/ratings');
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const RatingForm_1 = require("./RatingForm");
const ratings_1 = require("../../api/ratings");
const mockRatingsService = ratings_1.RatingsService;
describe('RatingForm', () => {
    const mockOnSuccess = jest.fn();
    const mockOnCancel = jest.fn();
    beforeEach(() => {
        jest.clearAllMocks();
    });
    it('should render rating form with all fields', () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(RatingForm_1.RatingForm, { ratedUserId: "test-user", ratedUserName: "Test User", onSuccess: mockOnSuccess, onCancel: mockOnCancel }));
        expect(react_2.screen.getByText('Valorar a Test User')).toBeInTheDocument();
        expect(react_2.screen.getByText('Tipo de valoración')).toBeInTheDocument();
        expect(react_2.screen.getByText('👍 Positivo')).toBeInTheDocument();
        expect(react_2.screen.getByText('👎 Negativo')).toBeInTheDocument();
        expect(react_2.screen.getByText('Etiquetas (selecciona al menos una)')).toBeInTheDocument();
        expect(react_2.screen.getByText('Comentario (opcional)')).toBeInTheDocument();
    });
    it('should allow selecting rating type', () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(RatingForm_1.RatingForm, { ratedUserId: "test-user", onSuccess: mockOnSuccess, onCancel: mockOnCancel }));
        const negativeRadio = react_2.screen.getByLabelText('👎 Negativo');
        react_2.fireEvent.click(negativeRadio);
        expect(negativeRadio).toBeChecked();
    });
    it('should allow selecting tags', () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(RatingForm_1.RatingForm, { ratedUserId: "test-user", onSuccess: mockOnSuccess, onCancel: mockOnCancel }));
        const puntualCheckbox = react_2.screen.getByText('puntual').previousElementSibling;
        react_2.fireEvent.click(puntualCheckbox);
        expect(puntualCheckbox).toBeChecked();
    });
    it('should allow entering comment', () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(RatingForm_1.RatingForm, { ratedUserId: "test-user", onSuccess: mockOnSuccess, onCancel: mockOnCancel }));
        const commentTextarea = react_2.screen.getByPlaceholderText('Describe tu experiencia...');
        react_2.fireEvent.change(commentTextarea, { target: { value: 'Great experience!' } });
        expect(commentTextarea).toHaveValue('Great experience!');
    });
    it('should show error when no tags selected', async () => {
        mockRatingsService.createRating.mockResolvedValue({});
        (0, react_2.render)((0, jsx_runtime_1.jsx)(RatingForm_1.RatingForm, { ratedUserId: "test-user", onSuccess: mockOnSuccess, onCancel: mockOnCancel }));
        // First select a tag to enable the button
        const punctualCheckbox = react_2.screen.getByText('puntual').previousElementSibling;
        react_2.fireEvent.click(punctualCheckbox);
        // Then deselect it to test the error
        react_2.fireEvent.click(punctualCheckbox);
        // Now the button should be disabled, so we need to test the validation differently
        // Let's test that the button is disabled when no tags are selected
        const submitButton = react_2.screen.getByText('Enviar Valoración');
        expect(submitButton).toBeDisabled();
    });
    it('should submit rating successfully and show success message', async () => {
        mockRatingsService.createRating.mockResolvedValue({});
        (0, react_2.render)((0, jsx_runtime_1.jsx)(RatingForm_1.RatingForm, { ratedUserId: "test-user", onSuccess: mockOnSuccess, onCancel: mockOnCancel }));
        // Select a tag
        const puntualCheckbox = react_2.screen.getByText('puntual').previousElementSibling;
        react_2.fireEvent.click(puntualCheckbox);
        // Submit form
        const submitButton = react_2.screen.getByText('Enviar Valoración');
        react_2.fireEvent.click(submitButton);
        await (0, react_2.waitFor)(() => {
            expect(mockRatingsService.createRating).toHaveBeenCalledWith({
                ratedId: 'test-user',
                ratingType: 'THUMBS_UP',
                tags: ['puntual'],
                comment: undefined
            });
        });
        // Check success message appears
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByText('¡Valoración enviada correctamente!')).toBeInTheDocument();
            expect(react_2.screen.getByText('Tu valoración ha sido guardada y será visible para otros usuarios.')).toBeInTheDocument();
            expect(react_2.screen.getByText('¡Enviado!')).toBeInTheDocument();
        });
        // Check that onSuccess is called after delay
        await (0, react_2.waitFor)(() => {
            expect(mockOnSuccess).toHaveBeenCalled();
        }, { timeout: 3000 });
    });
    it('should show error when API fails', async () => {
        mockRatingsService.createRating.mockRejectedValue(new Error('API Error'));
        (0, react_2.render)((0, jsx_runtime_1.jsx)(RatingForm_1.RatingForm, { ratedUserId: "test-user", onSuccess: mockOnSuccess, onCancel: mockOnCancel }));
        // Select a tag
        const puntualCheckbox = react_2.screen.getByText('puntual').previousElementSibling;
        react_2.fireEvent.click(puntualCheckbox);
        // Submit form
        const submitButton = react_2.screen.getByText('Enviar Valoración');
        react_2.fireEvent.click(submitButton);
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByText('Error al crear la valoración')).toBeInTheDocument();
        });
    });
    it('should call onCancel when cancel button is clicked', () => {
        (0, react_2.render)((0, jsx_runtime_1.jsx)(RatingForm_1.RatingForm, { ratedUserId: "test-user", onSuccess: mockOnSuccess, onCancel: mockOnCancel }));
        const cancelButton = react_2.screen.getByText('Cancelar');
        react_2.fireEvent.click(cancelButton);
        expect(mockOnCancel).toHaveBeenCalled();
    });
    it('should disable submit button while loading', async () => {
        mockRatingsService.createRating.mockImplementation(() => new Promise(() => { }));
        (0, react_2.render)((0, jsx_runtime_1.jsx)(RatingForm_1.RatingForm, { ratedUserId: "test-user", onSuccess: mockOnSuccess, onCancel: mockOnCancel }));
        // Select a tag
        const puntualCheckbox = react_2.screen.getByText('puntual').previousElementSibling;
        react_2.fireEvent.click(puntualCheckbox);
        // Submit form
        const submitButton = react_2.screen.getByText('Enviar Valoración');
        react_2.fireEvent.click(submitButton);
        await (0, react_2.waitFor)(() => {
            expect(react_2.screen.getByText('Guardando...')).toBeInTheDocument();
            expect(react_2.screen.getByText('Guardando...')).toBeDisabled();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,