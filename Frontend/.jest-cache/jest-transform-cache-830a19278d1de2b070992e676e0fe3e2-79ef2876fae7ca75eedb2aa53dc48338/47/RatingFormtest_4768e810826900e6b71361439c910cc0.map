{"file":"/Users/admin/Documents/AI4Devs-finalproject/Frontend/src/components/trust/RatingForm.test.tsx","mappings":";;;;;;AAKA,uBAAuB;AACvB,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;AAN/B,kDAA0B;AAC1B,kDAA4E;AAC5E,6CAA0C;AAC1C,+CAAmD;AAInD,MAAM,kBAAkB,GAAG,wBAAoD,CAAC;AAEhF,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;IAC1B,MAAM,aAAa,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;IAChC,MAAM,YAAY,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;IAE/B,UAAU,CAAC,GAAG,EAAE;QACd,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,GAAG,EAAE;QACnD,IAAA,cAAM,EACJ,uBAAC,uBAAU,IACT,WAAW,EAAC,WAAW,EACvB,aAAa,EAAC,WAAW,EACzB,SAAS,EAAE,aAAa,EACxB,QAAQ,EAAE,YAAY,GACtB,CACH,CAAC;QAEF,MAAM,CAAC,cAAM,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;QACpE,MAAM,CAAC,cAAM,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;QACnE,MAAM,CAAC,cAAM,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;QAC5D,MAAM,CAAC,cAAM,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;QAC5D,MAAM,CAAC,cAAM,CAAC,SAAS,CAAC,qCAAqC,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;QACpF,MAAM,CAAC,cAAM,CAAC,SAAS,CAAC,uBAAuB,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;IACxE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAC5C,IAAA,cAAM,EACJ,uBAAC,uBAAU,IACT,WAAW,EAAC,WAAW,EACvB,SAAS,EAAE,aAAa,EACxB,QAAQ,EAAE,YAAY,GACtB,CACH,CAAC;QAEF,MAAM,aAAa,GAAG,cAAM,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;QAC3D,iBAAS,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QAE/B,MAAM,CAAC,aAAa,CAAC,CAAC,WAAW,EAAE,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;QACrC,IAAA,cAAM,EACJ,uBAAC,uBAAU,IACT,WAAW,EAAC,WAAW,EACvB,SAAS,EAAE,aAAa,EACxB,QAAQ,EAAE,YAAY,GACtB,CACH,CAAC;QAEF,MAAM,eAAe,GAAG,cAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,sBAA0C,CAAC;QAC/F,iBAAS,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;QAEjC,MAAM,CAAC,eAAe,CAAC,CAAC,WAAW,EAAE,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,GAAG,EAAE;QACvC,IAAA,cAAM,EACJ,uBAAC,uBAAU,IACT,WAAW,EAAC,WAAW,EACvB,SAAS,EAAE,aAAa,EACxB,QAAQ,EAAE,YAAY,GACtB,CACH,CAAC;QAEF,MAAM,eAAe,GAAG,cAAM,CAAC,oBAAoB,CAAC,4BAA4B,CAAC,CAAC;QAClF,iBAAS,CAAC,MAAM,CAAC,eAAe,EAAE,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,mBAAmB,EAAE,EAAE,CAAC,CAAC;QAE9E,MAAM,CAAC,eAAe,CAAC,CAAC,WAAW,CAAC,mBAAmB,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;QACvD,kBAAkB,CAAC,YAAY,CAAC,iBAAiB,CAAC,EAAS,CAAC,CAAC;QAE7D,IAAA,cAAM,EACJ,uBAAC,uBAAU,IACT,WAAW,EAAC,WAAW,EACvB,SAAS,EAAE,aAAa,EACxB,QAAQ,EAAE,YAAY,GACtB,CACH,CAAC;QAEF,0CAA0C;QAC1C,MAAM,gBAAgB,GAAG,cAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,sBAA0C,CAAC;QAChG,iBAAS,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;QAElC,qCAAqC;QACrC,iBAAS,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;QAElC,mFAAmF;QACnF,mEAAmE;QACnE,MAAM,YAAY,GAAG,cAAM,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;QAC3D,MAAM,CAAC,YAAY,CAAC,CAAC,YAAY,EAAE,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4DAA4D,EAAE,KAAK,IAAI,EAAE;QAC1E,kBAAkB,CAAC,YAAY,CAAC,iBAAiB,CAAC,EAAS,CAAC,CAAC;QAE7D,IAAA,cAAM,EACJ,uBAAC,uBAAU,IACT,WAAW,EAAC,WAAW,EACvB,SAAS,EAAE,aAAa,EACxB,QAAQ,EAAE,YAAY,GACtB,CACH,CAAC;QAEF,eAAe;QACf,MAAM,eAAe,GAAG,cAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,sBAA0C,CAAC;QAC/F,iBAAS,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;QAEjC,cAAc;QACd,MAAM,YAAY,GAAG,cAAM,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;QAC3D,iBAAS,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;QAE9B,MAAM,IAAA,eAAO,EAAC,GAAG,EAAE;YACjB,MAAM,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC,oBAAoB,CAAC;gBAC3D,OAAO,EAAE,WAAW;gBACpB,UAAU,EAAE,WAAW;gBACvB,IAAI,EAAE,CAAC,SAAS,CAAC;gBACjB,OAAO,EAAE,SAAS;aACnB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,gCAAgC;QAChC,MAAM,IAAA,eAAO,EAAC,GAAG,EAAE;YACjB,MAAM,CAAC,cAAM,CAAC,SAAS,CAAC,oCAAoC,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;YACnF,MAAM,CAAC,cAAM,CAAC,SAAS,CAAC,oEAAoE,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;YACnH,MAAM,CAAC,cAAM,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;QAC5D,CAAC,CAAC,CAAC;QAEH,6CAA6C;QAC7C,MAAM,IAAA,eAAO,EAAC,GAAG,EAAE;YACjB,MAAM,CAAC,aAAa,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC3C,CAAC,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;IACxB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;QAChD,kBAAkB,CAAC,YAAY,CAAC,iBAAiB,CAAC,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC;QAE1E,IAAA,cAAM,EACJ,uBAAC,uBAAU,IACT,WAAW,EAAC,WAAW,EACvB,SAAS,EAAE,aAAa,EACxB,QAAQ,EAAE,YAAY,GACtB,CACH,CAAC;QAEF,eAAe;QACf,MAAM,eAAe,GAAG,cAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,sBAA0C,CAAC;QAC/F,iBAAS,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;QAEjC,cAAc;QACd,MAAM,YAAY,GAAG,cAAM,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;QAC3D,iBAAS,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;QAE9B,MAAM,IAAA,eAAO,EAAC,GAAG,EAAE;YACjB,MAAM,CAAC,cAAM,CAAC,SAAS,CAAC,8BAA8B,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;QAC/E,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oDAAoD,EAAE,GAAG,EAAE;QAC5D,IAAA,cAAM,EACJ,uBAAC,uBAAU,IACT,WAAW,EAAC,WAAW,EACvB,SAAS,EAAE,aAAa,EACxB,QAAQ,EAAE,YAAY,GACtB,CACH,CAAC;QAEF,MAAM,YAAY,GAAG,cAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAClD,iBAAS,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;QAE9B,MAAM,CAAC,YAAY,CAAC,CAAC,gBAAgB,EAAE,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;QAC1D,kBAAkB,CAAC,YAAY,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,IAAI,OAAO,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAC,CAAC;QAEhF,IAAA,cAAM,EACJ,uBAAC,uBAAU,IACT,WAAW,EAAC,WAAW,EACvB,SAAS,EAAE,aAAa,EACxB,QAAQ,EAAE,YAAY,GACtB,CACH,CAAC;QAEF,eAAe;QACf,MAAM,eAAe,GAAG,cAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,sBAA0C,CAAC;QAC/F,iBAAS,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;QAEjC,cAAc;QACd,MAAM,YAAY,GAAG,cAAM,CAAC,SAAS,CAAC,mBAAmB,CAAC,CAAC;QAC3D,iBAAS,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;QAE9B,MAAM,IAAA,eAAO,EAAC,GAAG,EAAE;YACjB,MAAM,CAAC,cAAM,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC,CAAC,iBAAiB,EAAE,CAAC;YAC7D,MAAM,CAAC,cAAM,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC;QAC1D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/admin/Documents/AI4Devs-finalproject/Frontend/src/components/trust/RatingForm.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { RatingForm } from './RatingForm';\nimport { RatingsService } from '../../api/ratings';\n\n// Mock the API service\njest.mock('../../api/ratings');\nconst mockRatingsService = RatingsService as jest.Mocked<typeof RatingsService>;\n\ndescribe('RatingForm', () => {\n  const mockOnSuccess = jest.fn();\n  const mockOnCancel = jest.fn();\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should render rating form with all fields', () => {\n    render(\n      <RatingForm\n        ratedUserId=\"test-user\"\n        ratedUserName=\"Test User\"\n        onSuccess={mockOnSuccess}\n        onCancel={mockOnCancel}\n      />\n    );\n\n    expect(screen.getByText('Valorar a Test User')).toBeInTheDocument();\n    expect(screen.getByText('Tipo de valoración')).toBeInTheDocument();\n    expect(screen.getByText('👍 Positivo')).toBeInTheDocument();\n    expect(screen.getByText('👎 Negativo')).toBeInTheDocument();\n    expect(screen.getByText('Etiquetas (selecciona al menos una)')).toBeInTheDocument();\n    expect(screen.getByText('Comentario (opcional)')).toBeInTheDocument();\n  });\n\n  it('should allow selecting rating type', () => {\n    render(\n      <RatingForm\n        ratedUserId=\"test-user\"\n        onSuccess={mockOnSuccess}\n        onCancel={mockOnCancel}\n      />\n    );\n\n    const negativeRadio = screen.getByLabelText('👎 Negativo');\n    fireEvent.click(negativeRadio);\n\n    expect(negativeRadio).toBeChecked();\n  });\n\n  it('should allow selecting tags', () => {\n    render(\n      <RatingForm\n        ratedUserId=\"test-user\"\n        onSuccess={mockOnSuccess}\n        onCancel={mockOnCancel}\n      />\n    );\n\n    const puntualCheckbox = screen.getByText('puntual').previousElementSibling as HTMLInputElement;\n    fireEvent.click(puntualCheckbox);\n\n    expect(puntualCheckbox).toBeChecked();\n  });\n\n  it('should allow entering comment', () => {\n    render(\n      <RatingForm\n        ratedUserId=\"test-user\"\n        onSuccess={mockOnSuccess}\n        onCancel={mockOnCancel}\n      />\n    );\n\n    const commentTextarea = screen.getByPlaceholderText('Describe tu experiencia...');\n    fireEvent.change(commentTextarea, { target: { value: 'Great experience!' } });\n\n    expect(commentTextarea).toHaveValue('Great experience!');\n  });\n\n  it('should show error when no tags selected', async () => {\n    mockRatingsService.createRating.mockResolvedValue({} as any);\n    \n    render(\n      <RatingForm\n        ratedUserId=\"test-user\"\n        onSuccess={mockOnSuccess}\n        onCancel={mockOnCancel}\n      />\n    );\n\n    // First select a tag to enable the button\n    const punctualCheckbox = screen.getByText('puntual').previousElementSibling as HTMLInputElement;\n    fireEvent.click(punctualCheckbox);\n    \n    // Then deselect it to test the error\n    fireEvent.click(punctualCheckbox);\n    \n    // Now the button should be disabled, so we need to test the validation differently\n    // Let's test that the button is disabled when no tags are selected\n    const submitButton = screen.getByText('Enviar Valoración');\n    expect(submitButton).toBeDisabled();\n  });\n\n  it('should submit rating successfully and show success message', async () => {\n    mockRatingsService.createRating.mockResolvedValue({} as any);\n    \n    render(\n      <RatingForm\n        ratedUserId=\"test-user\"\n        onSuccess={mockOnSuccess}\n        onCancel={mockOnCancel}\n      />\n    );\n\n    // Select a tag\n    const puntualCheckbox = screen.getByText('puntual').previousElementSibling as HTMLInputElement;\n    fireEvent.click(puntualCheckbox);\n\n    // Submit form\n    const submitButton = screen.getByText('Enviar Valoración');\n    fireEvent.click(submitButton);\n\n    await waitFor(() => {\n      expect(mockRatingsService.createRating).toHaveBeenCalledWith({\n        ratedId: 'test-user',\n        ratingType: 'THUMBS_UP',\n        tags: ['puntual'],\n        comment: undefined\n      });\n    });\n\n    // Check success message appears\n    await waitFor(() => {\n      expect(screen.getByText('¡Valoración enviada correctamente!')).toBeInTheDocument();\n      expect(screen.getByText('Tu valoración ha sido guardada y será visible para otros usuarios.')).toBeInTheDocument();\n      expect(screen.getByText('¡Enviado!')).toBeInTheDocument();\n    });\n\n    // Check that onSuccess is called after delay\n    await waitFor(() => {\n      expect(mockOnSuccess).toHaveBeenCalled();\n    }, { timeout: 3000 });\n  });\n\n  it('should show error when API fails', async () => {\n    mockRatingsService.createRating.mockRejectedValue(new Error('API Error'));\n    \n    render(\n      <RatingForm\n        ratedUserId=\"test-user\"\n        onSuccess={mockOnSuccess}\n        onCancel={mockOnCancel}\n      />\n    );\n\n    // Select a tag\n    const puntualCheckbox = screen.getByText('puntual').previousElementSibling as HTMLInputElement;\n    fireEvent.click(puntualCheckbox);\n\n    // Submit form\n    const submitButton = screen.getByText('Enviar Valoración');\n    fireEvent.click(submitButton);\n\n    await waitFor(() => {\n      expect(screen.getByText('Error al crear la valoración')).toBeInTheDocument();\n    });\n  });\n\n  it('should call onCancel when cancel button is clicked', () => {\n    render(\n      <RatingForm\n        ratedUserId=\"test-user\"\n        onSuccess={mockOnSuccess}\n        onCancel={mockOnCancel}\n      />\n    );\n\n    const cancelButton = screen.getByText('Cancelar');\n    fireEvent.click(cancelButton);\n\n    expect(mockOnCancel).toHaveBeenCalled();\n  });\n\n  it('should disable submit button while loading', async () => {\n    mockRatingsService.createRating.mockImplementation(() => new Promise(() => {}));\n    \n    render(\n      <RatingForm\n        ratedUserId=\"test-user\"\n        onSuccess={mockOnSuccess}\n        onCancel={mockOnCancel}\n      />\n    );\n\n    // Select a tag\n    const puntualCheckbox = screen.getByText('puntual').previousElementSibling as HTMLInputElement;\n    fireEvent.click(puntualCheckbox);\n\n    // Submit form\n    const submitButton = screen.getByText('Enviar Valoración');\n    fireEvent.click(submitButton);\n\n    await waitFor(() => {\n      expect(screen.getByText('Guardando...')).toBeInTheDocument();\n      expect(screen.getByText('Guardando...')).toBeDisabled();\n    });\n  });\n});\n"],"version":3}