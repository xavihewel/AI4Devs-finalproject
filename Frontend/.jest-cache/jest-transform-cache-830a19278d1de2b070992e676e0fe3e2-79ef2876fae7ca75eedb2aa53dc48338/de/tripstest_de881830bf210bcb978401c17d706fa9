c5e0275908d9a658769487a2433acc61
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock axios.create used inside the service, expose a shared instance
globals_1.jest.mock('axios', () => {
    const instance = {
        get: globals_1.jest.fn(),
        post: globals_1.jest.fn(),
        put: globals_1.jest.fn(),
        delete: globals_1.jest.fn(),
        interceptors: {
            request: {
                use: globals_1.jest.fn(),
            },
        },
    };
    return {
        __esModule: true,
        default: {
            create: () => instance,
            _instance: instance,
        },
        create: () => instance,
        _instance: instance,
    };
});
const trips_1 = require("./trips");
const axios_1 = __importDefault(require("axios"));
(0, globals_1.describe)('TripsService', () => {
    (0, globals_1.beforeEach)(() => {
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.describe)('getAllTrips', () => {
        (0, globals_1.it)('should fetch all trips', async () => {
            const mockTrips = [
                {
                    id: '1',
                    driverId: 'driver1',
                    origin: { lat: 40.4168, lng: -3.7038 },
                    destinationSedeId: 'SEDE-1',
                    dateTime: '2024-01-01T08:00:00Z',
                    seatsTotal: 4,
                    seatsFree: 2,
                    createdAt: '2024-01-01T00:00:00Z',
                    updatedAt: '2024-01-01T00:00:00Z',
                },
            ];
            axios_1.default._instance.get.mockResolvedValue({ data: mockTrips });
            const result = await trips_1.TripsService.getAllTrips();
            (0, globals_1.expect)(axios_1.default._instance.get).toHaveBeenCalledWith('/trips');
            (0, globals_1.expect)(result).toEqual(mockTrips);
        });
        (0, globals_1.it)('propagates API errors', async () => {
            axios_1.default._instance.get.mockRejectedValueOnce(new Error('Boom'));
            await (0, globals_1.expect)(trips_1.TripsService.getAllTrips()).rejects.toThrow('Boom');
        });
    });
    (0, globals_1.describe)('getTripsByDestination', () => {
        (0, globals_1.it)('should fetch trips by destination', async () => {
            const mockTrips = [];
            const destinationSedeId = 'SEDE-1';
            axios_1.default._instance.get.mockResolvedValue({ data: mockTrips });
            const result = await trips_1.TripsService.getTripsByDestination(destinationSedeId);
            (0, globals_1.expect)(axios_1.default._instance.get).toHaveBeenCalledWith(`/trips?destinationSedeId=${destinationSedeId}`);
            (0, globals_1.expect)(result).toEqual(mockTrips);
        });
    });
    (0, globals_1.describe)('getTripById', () => {
        (0, globals_1.it)('should fetch trip by id', async () => {
            const mockTrip = {
                id: '1',
                driverId: 'driver1',
                origin: { lat: 40.4168, lng: -3.7038 },
                destinationSedeId: 'SEDE-1',
                dateTime: '2024-01-01T08:00:00Z',
                seatsTotal: 4,
                seatsFree: 2,
                createdAt: '2024-01-01T00:00:00Z',
                updatedAt: '2024-01-01T00:00:00Z',
            };
            axios_1.default._instance.get.mockResolvedValue({ data: mockTrip });
            const result = await trips_1.TripsService.getTripById('1');
            (0, globals_1.expect)(axios_1.default._instance.get).toHaveBeenCalledWith('/trips/1');
            (0, globals_1.expect)(result).toEqual(mockTrip);
        });
    });
    (0, globals_1.describe)('createTrip', () => {
        (0, globals_1.it)('should create a new trip', async () => {
            const tripData = {
                origin: { lat: 40.4168, lng: -3.7038 },
                destinationSedeId: 'SEDE-1',
                dateTime: '2024-01-01T08:00:00Z',
                seatsTotal: 4,
            };
            const mockCreatedTrip = {
                id: '1',
                driverId: 'driver1',
                ...tripData,
                seatsFree: 4,
                createdAt: '2024-01-01T00:00:00Z',
                updatedAt: '2024-01-01T00:00:00Z',
            };
            axios_1.default._instance.post.mockResolvedValue({ data: mockCreatedTrip });
            const result = await trips_1.TripsService.createTrip(tripData);
            (0, globals_1.expect)(axios_1.default._instance.post).toHaveBeenCalledWith('/trips', tripData);
            (0, globals_1.expect)(result).toEqual(mockCreatedTrip);
        });
    });
    (0, globals_1.describe)('updateTrip', () => {
        (0, globals_1.it)('should update an existing trip', async () => {
            const updateData = { seatsTotal: 5 };
            const mockUpdatedTrip = {
                id: '1',
                driverId: 'driver1',
                origin: { lat: 40.4168, lng: -3.7038 },
                destinationSedeId: 'SEDE-1',
                dateTime: '2024-01-01T08:00:00Z',
                seatsTotal: 5,
                seatsFree: 2,
                createdAt: '2024-01-01T00:00:00Z',
                updatedAt: '2024-01-01T00:00:00Z',
            };
            axios_1.default._instance.put.mockResolvedValue({ data: mockUpdatedTrip });
            const result = await trips_1.TripsService.updateTrip('1', updateData);
            (0, globals_1.expect)(axios_1.default._instance.put).toHaveBeenCalledWith('/trips/1', updateData);
            (0, globals_1.expect)(result).toEqual(mockUpdatedTrip);
        });
    });
    (0, globals_1.describe)('deleteTrip', () => {
        (0, globals_1.it)('should delete a trip', async () => {
            axios_1.default._instance.delete.mockResolvedValue({});
            await trips_1.TripsService.deleteTrip('1');
            (0, globals_1.expect)(axios_1.default._instance.delete).toHaveBeenCalledWith('/trips/1');
        });
    });
    (0, globals_1.describe)('getMyTrips', () => {
        (0, globals_1.it)('should fetch user trips', async () => {
            const mockTrips = [];
            axios_1.default._instance.get.mockResolvedValue({ data: mockTrips });
            const result = await trips_1.TripsService.getMyTrips();
            (0, globals_1.expect)(axios_1.default._instance.get).toHaveBeenCalledWith('/trips/my-trips');
            (0, globals_1.expect)(result).toEqual(mockTrips);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,