a4c1ac7730174bb4aea7cea712134dbb
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importDefault(require("react"));
const react_2 = require("@testing-library/react");
const react_i18next_1 = require("react-i18next");
const config_1 = __importDefault(require("../../i18n/config"));
const ScoreBadge_1 = __importDefault(require("./ScoreBadge"));
const renderWithI18n = (component) => {
    return (0, react_2.render)((0, jsx_runtime_1.jsx)(react_i18next_1.I18nextProvider, { i18n: config_1.default, children: component }));
};
describe('ScoreBadge', () => {
    it('renders excellent score correctly', () => {
        renderWithI18n((0, jsx_runtime_1.jsx)(ScoreBadge_1.default, { score: 0.9 }));
        expect(react_2.screen.getByText(/excelente/i)).toBeInTheDocument();
        expect(react_2.screen.getByText('(90%)')).toBeInTheDocument();
    });
    it('renders good score correctly', () => {
        renderWithI18n((0, jsx_runtime_1.jsx)(ScoreBadge_1.default, { score: 0.7 }));
        expect(react_2.screen.getByText(/bueno/i)).toBeInTheDocument();
        expect(react_2.screen.getByText('(70%)')).toBeInTheDocument();
    });
    it('renders regular score correctly', () => {
        renderWithI18n((0, jsx_runtime_1.jsx)(ScoreBadge_1.default, { score: 0.5 }));
        expect(react_2.screen.getByText(/regular/i)).toBeInTheDocument();
        expect(react_2.screen.getByText('(50%)')).toBeInTheDocument();
    });
    it('renders low score correctly', () => {
        renderWithI18n((0, jsx_runtime_1.jsx)(ScoreBadge_1.default, { score: 0.3 }));
        expect(react_2.screen.getByText(/bajo/i)).toBeInTheDocument();
        expect(react_2.screen.getByText('(30%)')).toBeInTheDocument();
    });
    it('applies correct size classes', () => {
        const { rerender } = renderWithI18n((0, jsx_runtime_1.jsx)(ScoreBadge_1.default, { score: 0.8, size: "sm" }));
        expect(react_2.screen.getByText(/excelente/i)).toHaveClass('text-xs');
        rerender((0, jsx_runtime_1.jsx)(ScoreBadge_1.default, { score: 0.8, size: "lg" }));
        expect(react_2.screen.getByText(/excelente/i)).toHaveClass('text-sm');
    });
    it('hides percentage when showPercentage is false', () => {
        renderWithI18n((0, jsx_runtime_1.jsx)(ScoreBadge_1.default, { score: 0.8, showPercentage: false }));
        expect(react_2.screen.getByText(/excelente/i)).toBeInTheDocument();
        expect(react_2.screen.queryByText('(80%)')).not.toBeInTheDocument();
    });
    it('applies custom className', () => {
        renderWithI18n((0, jsx_runtime_1.jsx)(ScoreBadge_1.default, { score: 0.8, className: "custom-class" }));
        const badge = react_2.screen.getByText(/excelente/i).closest('span');
        expect(badge).toHaveClass('custom-class');
    });
    it('has correct color classes for different scores', () => {
        const { rerender } = renderWithI18n((0, jsx_runtime_1.jsx)(ScoreBadge_1.default, { score: 0.9 }));
        let badge = react_2.screen.getByText(/excelente/i).closest('span');
        expect(badge).toHaveClass('text-green-600', 'bg-green-100');
        rerender((0, jsx_runtime_1.jsx)(ScoreBadge_1.default, { score: 0.7 }));
        badge = react_2.screen.getByText(/bueno/i).closest('span');
        expect(badge).toHaveClass('text-yellow-600', 'bg-yellow-100');
        rerender((0, jsx_runtime_1.jsx)(ScoreBadge_1.default, { score: 0.5 }));
        badge = react_2.screen.getByText(/regular/i).closest('span');
        expect(badge).toHaveClass('text-orange-600', 'bg-orange-100');
        rerender((0, jsx_runtime_1.jsx)(ScoreBadge_1.default, { score: 0.3 }));
        badge = react_2.screen.getByText(/bajo/i).closest('span');
        expect(badge).toHaveClass('text-red-600', 'bg-red-100');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,