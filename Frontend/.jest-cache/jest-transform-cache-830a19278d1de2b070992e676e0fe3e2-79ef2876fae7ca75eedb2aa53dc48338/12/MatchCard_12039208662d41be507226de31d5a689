3eebd02e531d488f85f56b7fa30f58fb
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = MatchCard;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const react_i18next_1 = require("react-i18next");
const ui_1 = require("../ui");
const SimpleMapPreview_1 = __importDefault(require("../map/SimpleMapPreview"));
const MapLinkButtons_1 = __importDefault(require("../map/MapLinkButtons"));
const ScoreBadge_1 = __importDefault(require("./ScoreBadge"));
function MatchCard({ match, isBooked = false, isBookingInProgress = false, onBook, onViewProfile, onRate }) {
    const { t } = (0, react_i18next_1.useTranslation)('matches');
    const [showMap, setShowMap] = (0, react_1.useState)(false);
    const handleBooking = () => {
        onBook(match);
    };
    const handleViewProfile = () => {
        onViewProfile(match.driverId);
    };
    const handleRate = () => {
        onRate(match.driverId);
    };
    const toggleMap = () => {
        setShowMap(!showMap);
    };
    // Parse coordinates from origin string
    const parseCoordinates = (origin) => {
        const parts = (origin || '').split(',').map(s => parseFloat(s.trim()));
        const hasCoords = parts.length === 2 && parts.every(n => !isNaN(n));
        if (!hasCoords)
            return null;
        return { lat: parts[0], lng: parts[1] };
    };
    const coordinates = parseCoordinates(match.origin);
    const hasValidCoords = coordinates !== null;
    return ((0, jsx_runtime_1.jsx)(ui_1.Card, { children: (0, jsx_runtime_1.jsx)(ui_1.CardContent, { children: (0, jsx_runtime_1.jsxs)("div", { className: "space-y-4", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between items-start", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex items-center flex-wrap gap-2", children: [(0, jsx_runtime_1.jsx)(ScoreBadge_1.default, { score: match.score, size: "md" }), isBooked && ((0, jsx_runtime_1.jsxs)("span", { className: "px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 border border-blue-200 flex items-center gap-1", children: [(0, jsx_runtime_1.jsx)("svg", { className: "w-3 h-3", fill: "currentColor", viewBox: "0 0 20 20", children: (0, jsx_runtime_1.jsx)("path", { fillRule: "evenodd", d: "M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z", clipRule: "evenodd" }) }), t('match.alreadyBooked')] }))] }), (0, jsx_runtime_1.jsxs)("div", { className: "text-right", children: [(0, jsx_runtime_1.jsx)("p", { className: "text-sm text-gray-500", children: new Date(match.dateTime).toLocaleDateString() }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-gray-500", children: new Date(match.dateTime).toLocaleTimeString() })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)("h3", { className: "font-semibold text-lg", children: t('match.tripTo', { destination: match.destinationSedeId }) }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-1 text-sm text-gray-600", children: [(0, jsx_runtime_1.jsxs)("p", { children: [(0, jsx_runtime_1.jsxs)("strong", { children: [t('match.origin'), ":"] }), " ", match.origin] }), (0, jsx_runtime_1.jsxs)("p", { children: [(0, jsx_runtime_1.jsxs)("strong", { children: [t('match.freeSeats'), ":"] }), " ", match.seatsFree] })] }), hasValidCoords && ((0, jsx_runtime_1.jsxs)("div", { className: "pt-2", children: [(0, jsx_runtime_1.jsxs)("div", { className: "flex justify-between items-center mb-2", children: [(0, jsx_runtime_1.jsx)("h4", { className: "text-sm font-medium text-gray-700", children: t('match.route') }), (0, jsx_runtime_1.jsx)(ui_1.Button, { variant: "secondary", size: "sm", onClick: toggleMap, children: showMap ? t('match.hideMap') : t('match.showMap') })] }), showMap && ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)(SimpleMapPreview_1.default, { origin: coordinates, height: 160, interactive: false }), (0, jsx_runtime_1.jsx)(MapLinkButtons_1.default, { lat: coordinates.lat, lng: coordinates.lng })] }))] })), match.reasons && match.reasons.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-1", children: [(0, jsx_runtime_1.jsxs)("p", { className: "text-sm font-medium text-gray-700", children: [t('match.compatibilityReasons'), ":"] }), (0, jsx_runtime_1.jsx)("ul", { className: "text-xs text-gray-600 space-y-1", children: match.reasons.map((reason, index) => ((0, jsx_runtime_1.jsxs)("li", { className: "flex items-center", children: [(0, jsx_runtime_1.jsx)("span", { className: "w-1.5 h-1.5 bg-primary-500 rounded-full mr-2" }), reason] }, `${match.id}-reason-${index}`))) })] }))] }), (0, jsx_runtime_1.jsxs)("div", { className: "pt-4 border-t border-gray-200", children: [(0, jsx_runtime_1.jsx)(ui_1.Button, { variant: "primary", className: "w-full", onClick: handleBooking, disabled: isBookingInProgress || match.seatsFree === 0 || isBooked, loading: isBookingInProgress, children: match.seatsFree === 0
                                    ? t('match.noSeatsAvailable')
                                    : isBooked
                                        ? t('match.alreadyBooked')
                                        : t('match.book') }), (0, jsx_runtime_1.jsxs)("div", { className: "flex space-x-2 mt-2", children: [(0, jsx_runtime_1.jsxs)(ui_1.Button, { variant: "secondary", size: "sm", className: "flex-1", onClick: handleViewProfile, children: ["\uD83D\uDC64 ", t('match.viewProfile')] }), (0, jsx_runtime_1.jsxs)(ui_1.Button, { variant: "secondary", size: "sm", className: "flex-1", onClick: handleRate, children: ["\u2B50 ", t('match.rate')] })] })] })] }) }) }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2FkbWluL0RvY3VtZW50cy9BSTREZXZzLWZpbmFscHJvamVjdC9Gcm9udGVuZC9zcmMvY29tcG9uZW50cy9tYXRjaGVzL01hdGNoQ2FyZC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrQkEsNEJBc0tDOztBQXhMRCwrQ0FBd0M7QUFDeEMsaURBQStDO0FBRS9DLDhCQUFrRDtBQUNsRCwrRUFBdUQ7QUFDdkQsMkVBQW1EO0FBQ25ELDhEQUFzQztBQVl0QyxTQUF3QixTQUFTLENBQUMsRUFDaEMsS0FBSyxFQUNMLFFBQVEsR0FBRyxLQUFLLEVBQ2hCLG1CQUFtQixHQUFHLEtBQUssRUFDM0IsTUFBTSxFQUNOLGFBQWEsRUFDYixNQUFNLEVBQ1M7SUFDZixNQUFNLEVBQUUsQ0FBQyxFQUFFLEdBQUcsSUFBQSw4QkFBYyxFQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3hDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLEdBQUcsSUFBQSxnQkFBUSxFQUFDLEtBQUssQ0FBQyxDQUFDO0lBRTlDLE1BQU0sYUFBYSxHQUFHLEdBQUcsRUFBRTtRQUN6QixNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDaEIsQ0FBQyxDQUFDO0lBRUYsTUFBTSxpQkFBaUIsR0FBRyxHQUFHLEVBQUU7UUFDN0IsYUFBYSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNoQyxDQUFDLENBQUM7SUFFRixNQUFNLFVBQVUsR0FBRyxHQUFHLEVBQUU7UUFDdEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN6QixDQUFDLENBQUM7SUFFRixNQUFNLFNBQVMsR0FBRyxHQUFHLEVBQUU7UUFDckIsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdkIsQ0FBQyxDQUFDO0lBRUYsdUNBQXVDO0lBQ3ZDLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxNQUFjLEVBQUUsRUFBRTtRQUMxQyxNQUFNLEtBQUssR0FBRyxD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Q0FBQyxxQkFBcUIsQ0FBQzt3Q0FDMUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsR0FDZCxFQUdULGlDQUFLLFNBQVMsRUFBQyxxQkFBcUIsYUFDbEMsd0JBQUMsV0FBTSxJQUNMLE9BQU8sRUFBQyxXQUFXLEVBQ25CLElBQUksRUFBQyxJQUFJLEVBQ1QsU0FBUyxFQUFDLFFBQVEsRUFDbEIsT0FBTyxFQUFFLGlCQUFpQiw4QkFFdEIsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLElBQ25CLEVBQ1Qsd0JBQUMsV0FBTSxJQUNMLE9BQU8sRUFBQyxXQUFXLEVBQ25CLElBQUksRUFBQyxJQUFJLEVBQ1QsU0FBUyxFQUFDLFFBQVEsRUFDbEIsT0FBTyxFQUFFLFVBQVUsd0JBRWhCLENBQUMsQ0FBQyxZQUFZLENBQUMsSUFDWCxJQUNMLElBQ0YsSUFDRixHQUNNLEdBQ1QsQ0FDUixDQUFDO0FBQ0osQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvYWRtaW4vRG9jdW1lbnRzL0FJNERldnMtZmluYWxwcm9qZWN0L0Zyb250ZW5kL3NyYy9jb21wb25lbnRzL21hdGNoZXMvTWF0Y2hDYXJkLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VUcmFuc2xhdGlvbiB9IGZyb20gJ3JlYWN0LWkxOG5leHQnO1xuaW1wb3J0IHR5cGUgeyBNYXRjaER0byB9IGZyb20gJy4uLy4uL3R5cGVzL2FwaSc7XG5pbXBvcnQgeyBCdXR0b24sIENhcmQsIENhcmRDb250ZW50IH0gZnJvbSAnLi4vdWknO1xuaW1wb3J0IFNpbXBsZU1hcFByZXZpZXcgZnJvbSAnLi4vbWFwL1NpbXBsZU1hcFByZXZpZXcnO1xuaW1wb3J0IE1hcExpbmtCdXR0b25zIGZyb20gJy4uL21hcC9NYXBMaW5rQnV0dG9ucyc7XG5pbXBvcnQgU2NvcmVCYWRnZSBmcm9tICcuL1Njb3JlQmFkZ2UnO1xuaW1wb3J0IHsgZW52IH0gZnJvbSAnLi4vLi4vZW52JztcblxuaW50ZXJmYWNlIE1hdGNoQ2FyZFByb3BzIHtcbiAgbWF0Y2g6IE1hdGNoRHRvO1xuICBpc0Jvb2tlZD86IGJvb2xlYW47XG4gIGlzQm9va2luZ0luUHJvZ3Jlc3M/OiBib29sZWFuO1xuICBvbkJvb2s6IChtYXRjaDogTWF0Y2hEdG8pID0+IHZvaWQ7XG4gIG9uVmlld1Byb2ZpbGU6IChkcml2ZXJJZDogc3RyaW5nKSA9PiB2b2lkO1xuICBvblJhdGU6IChkcml2ZXJJZDogc3RyaW5nKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNYXRjaENhcmQoe1xuICBtYXRjaCxcbiAgaXNCb29rZWQgPSBmYWxzZSxcbiAgaXNCb29raW5nSW5Qcm9ncmVzcyA9IGZhbHNlLFxuICBvbkJvb2ssXG4gIG9uVmlld1Byb2ZpbGUsXG4gIG9uUmF0ZVxufTogTWF0Y2hDYXJkUHJvcHMpIHtcbiAgY29uc3QgeyB0IH0gPSB1c2VUcmFuc2xhdGlvbignbWF0Y2hlcycpO1xuICBjb25zdCBbc2hvd01hcCwgc2V0U2hvd01hcF0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgY29uc3QgaGFuZGxlQm9va2luZyA9ICgpID0+IHtcbiAgICBvbkJvb2sobWF0Y2gpO1xuICB9O1xuXG4gIGNvbnN0IGhhbmRsZVZpZXdQcm9maWxlID0gKCkgPT4ge1xuICAgIG9uVmlld1Byb2ZpbGUobWF0Y2guZHJpdmVySWQpO1xuICB9O1xuXG4gIGNvbnN0IGhhbmRsZVJhdGUgPSAoKSA9PiB7XG4gICAgb25SYXRlKG1hdGNoLmRyaXZlcklkKTtcbiAgfTtcblxuICBjb25zdCB0b2dnbGVNYXAgPSAoKSA9PiB7XG4gICAgc2V0U2hvd01hcCghc2hvd01hcCk7XG4gIH07XG5cbiAgLy8gUGFyc2UgY29vcmRpbmF0ZXMgZnJvbSBvcmlnaW4gc3RyaW5nXG4gIGNvbnN0IHBhcnNlQ29vcmRpbmF0ZXMgPSAob3JpZ2luOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBwYXJ0cyA9IChvcmlnaW4gfHwgJycpLnNwbGl0KCcsJykubWFwKHMgPT4gcGFyc2VGbG9hdChzLnRyaW0oKSkpO1xuICAgIGNvbnN0IGhhc0Nvb3JkcyA9IHBhcnRzLmxlbmd0aCA9PT0gMiAmJiBwYXJ0cy5ldmVyeShuID0+ICFpc05hTihuKSk7XG4gICAgaWYgKCFoYXNDb29yZHMpIHJldHVybiBudWxsO1xuICAgIHJldHVybiB7IGxhdDogcGFydHNbMF0sIGxuZzogcGFydHNbMV0gfTtcbiAgfTtcblxuICBjb25zdCBjb29yZGluYXRlcyA9IHBhcnNlQ29vcmRpbmF0ZXMobWF0Y2gub3JpZ2luKTtcbiAgY29uc3QgaGFzVmFsaWRDb29yZHMgPSBjb29yZGluYXRlcyAhPT0gbnVsbDtcblxuICByZXR1cm4gKFxuICAgIDxDYXJkPlxuICAgICAgPENhcmRDb250ZW50PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNwYWNlLXktNFwiPlxuICAgICAgICAgIHsvKiBIZWFkZXIgd2l0aCBTY29yZSBhbmQgU3RhdHVzICovfVxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBqdXN0aWZ5LWJldHdlZW4gaXRlbXMtc3RhcnRcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgZmxleC13cmFwIGdhcC0yXCI+XG4gICAgICAgICAgICAgIDxTY29yZUJhZGdlIHNjb3JlPXttYXRjaC5zY29yZX0gc2l6ZT1cIm1kXCIgLz5cbiAgICAgICAgICAgICAge2lzQm9va2VkICYmIChcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJweC0yIHB5LTEgcm91bmRlZC1mdWxsIHRleHQteHMgZm9udC1tZWRpdW0gYmctYmx1ZS0xMDAgdGV4dC1ibHVlLTgwMCBib3JkZXIgYm9yZGVyLWJsdWUtMjAwIGZsZXggaXRlbXMtY2VudGVyIGdhcC0xXCI+XG4gICAgICAgICAgICAgICAgICA8c3ZnIGNsYXNzTmFtZT1cInctMyBoLTNcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgdmlld0JveD1cIjAgMCAyMCAyMFwiPlxuICAgICAgICAgICAgICAgICAgICA8cGF0aCBmaWxsUnVsZT1cImV2ZW5vZGRcIiBkPVwiTTEwIDE4YTggOCAwIDEwMC0xNiA4IDggMCAwMDAgMTZ6bTMuNzA3LTkuMjkzYTEgMSAwIDAwLTEuNDE0LTEuNDE0TDkgMTAuNTg2IDcuNzA3IDkuMjkzYTEgMSAwIDAwLTEuNDE0IDEuNDE0bDIgMmExIDEgMCAwMDEuNDE0IDBsNC00elwiIGNsaXBSdWxlPVwiZXZlbm9kZFwiIC8+XG4gICAgICAgICAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgICAgICAgICAgIHt0KCdtYXRjaC5hbHJlYWR5Qm9va2VkJyl9XG4gICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRleHQtcmlnaHRcIj5cbiAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1zbSB0ZXh0LWdyYXktNTAwXCI+XG4gICAgICAgICAgICAgICAge25ldyBEYXRlKG1hdGNoLmRhdGVUaW1lKS50b0xvY2FsZURhdGVTdHJpbmcoKX1cbiAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXNtIHRleHQtZ3JheS01MDBcIj5cbiAgICAgICAgICAgICAgICB7bmV3IERhdGUobWF0Y2guZGF0ZVRpbWUpLnRvTG9jYWxlVGltZVN0cmluZygpfVxuICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIHsvKiBUcmlwIERldGFpbHMgKi99XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzcGFjZS15LTJcIj5cbiAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9XCJmb250LXNlbWlib2xkIHRleHQtbGdcIj5cbiAgICAgICAgICAgICAge3QoJ21hdGNoLnRyaXBUbycsIHsgZGVzdGluYXRpb246IG1hdGNoLmRlc3RpbmF0aW9uU2VkZUlkIH0pfVxuICAgICAgICAgICAgPC9oMz5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzcGFjZS15LTEgdGV4dC1zbSB0ZXh0LWdyYXktNjAwXCI+XG4gICAgICAgICAgICAgIDxwPjxzdHJvbmc+e3QoJ21hdGNoLm9yaWdpbicpfTo8L3N0cm9uZz4ge21hdGNoLm9yaWdpbn08L3A+XG4gICAgICAgICAgICAgIDxwPjxzdHJvbmc+e3QoJ21hdGNoLmZyZWVTZWF0cycpfTo8L3N0cm9uZz4ge21hdGNoLnNlYXRzRnJlZX08L3A+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgey8qIE1hcCBTZWN0aW9uICovfVxuICAgICAgICAgICAge2hhc1ZhbGlkQ29vcmRzICYmIChcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwdC0yXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGp1c3RpZnktYmV0d2VlbiBpdGVtcy1jZW50ZXIgbWItMlwiPlxuICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzTmFtZT1cInRleHQtc20gZm9udC1tZWRpdW0gdGV4dC1ncmF5LTcwMFwiPlxuICAgICAgICAgICAgICAgICAgICB7dCgnbWF0Y2gucm91dGUnKX1cbiAgICAgICAgICAgICAgICAgIDwvaDQ+XG4gICAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ9XCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgICAgICAgICBzaXplPVwic21cIlxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0b2dnbGVNYXB9XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIHtzaG93TWFwID8gdCgnbWF0Y2guaGlkZU1hcCcpIDogdCgnbWF0Y2guc2hvd01hcCcpfVxuICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAge3Nob3dNYXAgJiYgKFxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzcGFjZS15LTJcIj5cbiAgICAgICAgICAgICAgICAgICAgPFNpbXBsZU1hcFByZXZpZXdcbiAgICAgICAgICAgICAgICAgICAgICBvcmlnaW49e2Nvb3JkaW5hdGVzfVxuICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD17MTYwfVxuICAgICAgICAgICAgICAgICAgICAgIGludGVyYWN0aXZlPXtmYWxzZX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPE1hcExpbmtCdXR0b25zXG4gICAgICAgICAgICAgICAgICAgICAgbGF0PXtjb29yZGluYXRlcy5sYXR9XG4gICAgICAgICAgICAgICAgICAgICAgbG5nPXtjb29yZGluYXRlcy5sbmd9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG5cbiAgICAgICAgICAgIHsvKiBDb21wYXRpYmlsaXR5IFJlYXNvbnMgKi99XG4gICAgICAgICAgICB7bWF0Y2gucmVhc29ucyAmJiBtYXRjaC5yZWFzb25zLmxlbmd0aCA+IDAgJiYgKFxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNwYWNlLXktMVwiPlxuICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtc20gZm9udC1tZWRpdW0gdGV4dC1ncmF5LTcwMFwiPlxuICAgICAgICAgICAgICAgICAge3QoJ21hdGNoLmNvbXBhdGliaWxpdHlSZWFzb25zJyl9OlxuICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwidGV4dC14cyB0ZXh0LWdyYXktNjAwIHNwYWNlLXktMVwiPlxuICAgICAgICAgICAgICAgICAge21hdGNoLnJlYXNvbnMubWFwKChyZWFzb24sIGluZGV4KSA9PiAoXG4gICAgICAgICAgICAgICAgICAgIDxsaSBrZXk9e2Ake21hdGNoLmlkfS1yZWFzb24tJHtpbmRleH1gfSBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlclwiPlxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInctMS41IGgtMS41IGJnLXByaW1hcnktNTAwIHJvdW5kZWQtZnVsbCBtci0yXCI+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgIHtyZWFzb259XG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICB7LyogQWN0aW9uIEJ1dHRvbnMgKi99XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwdC00IGJvcmRlci10IGJvcmRlci1ncmF5LTIwMFwiPlxuICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICB2YXJpYW50PVwicHJpbWFyeVwiXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cInctZnVsbFwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZUJvb2tpbmd9XG4gICAgICAgICAgICAgIGRpc2FibGVkPXtpc0Jvb2tpbmdJblByb2dyZXNzIHx8IG1hdGNoLnNlYXRzRnJlZSA9PT0gMCB8fCBpc0Jvb2tlZH1cbiAgICAgICAgICAgICAgbG9hZGluZz17aXNCb29raW5nSW5Qcm9ncmVzc31cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge21hdGNoLnNlYXRzRnJlZSA9PT0gMFxuICAgICAgICAgICAgICAgID8gdCgnbWF0Y2gubm9TZWF0c0F2YWlsYWJsZScpXG4gICAgICAgICAgICAgICAgOiBpc0Jvb2tlZFxuICAgICAgICAgICAgICAgICAgPyB0KCdtYXRjaC5hbHJlYWR5Qm9va2VkJylcbiAgICAgICAgICAgICAgICAgIDogdCgnbWF0Y2guYm9vaycpfVxuICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHsvKiBUcnVzdCBTeXN0ZW0gQnV0dG9ucyAqL31cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBzcGFjZS14LTIgbXQtMlwiPlxuICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgdmFyaWFudD1cInNlY29uZGFyeVwiXG4gICAgICAgICAgICAgICAgc2l6ZT1cInNtXCJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJmbGV4LTFcIlxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZVZpZXdQcm9maWxlfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAg8J+RpCB7dCgnbWF0Y2gudmlld1Byb2ZpbGUnKX1cbiAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICB2YXJpYW50PVwic2Vjb25kYXJ5XCJcbiAgICAgICAgICAgICAgICBzaXplPVwic21cIlxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZsZXgtMVwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlUmF0ZX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIOKtkCB7dCgnbWF0Y2gucmF0ZScpfVxuICAgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvQ2FyZENvbnRlbnQ+XG4gICAgPC9DYXJkPlxuICApO1xufVxuIl0sInZlcnNpb24iOjN9