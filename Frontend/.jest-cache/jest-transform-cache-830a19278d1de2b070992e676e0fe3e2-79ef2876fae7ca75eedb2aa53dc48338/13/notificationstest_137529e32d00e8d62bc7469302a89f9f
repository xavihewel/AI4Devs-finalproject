42104900c6fab7e4d613152bd1de4f39
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const notifications_1 = require("./notifications");
describe('notifications api', () => {
    beforeEach(() => {
        global.fetch = jest.fn().mockResolvedValue({ ok: true, status: 200, json: async () => ({ ok: true }) });
        global.atob = (b64) => Buffer.from(b64, 'base64').toString('binary');
        global.btoa = (bin) => Buffer.from(bin, 'binary').toString('base64');
        global.import = undefined;
        global.window = {};
        global.navigator = {};
        process.env.VITE_VAPID_PUBLIC_KEY = 'BHVapidKeyFake_______';
    });
    it('posts subscription payload directly', async () => {
        const payload = { endpoint: 'https://push.example/sub', p256dhKey: 'p', authKey: 'a' };
        await (0, notifications_1.subscribePush)(payload);
        expect(global.fetch).toHaveBeenCalled();
        const [url, init] = global.fetch.mock.calls[0];
        expect(String(url)).toContain('/notifications/subscribe');
        expect(init.method).toBe('POST');
    });
    it('deletes subscription by endpoint', async () => {
        await (0, notifications_1.unsubscribePush)('https://push.example/sub');
        expect(global.fetch).toHaveBeenCalled();
        const [url, init] = global.fetch.mock.calls[0];
        expect(String(url)).toContain('/notifications/unsubscribe?endpoint=');
        expect(init.method).toBe('DELETE');
    });
    it('lists subscriptions', async () => {
        await (0, notifications_1.listSubscriptions)();
        expect(global.fetch).toHaveBeenCalled();
        const [url, init] = global.fetch.mock.calls[0];
        expect(String(url)).toContain('/notifications/subscriptions');
        expect(init.method).toBe('GET');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2FkbWluL0RvY3VtZW50cy9BSTREZXZzLWZpbmFscHJvamVjdC9Gcm9udGVuZC9zcmMvYXBpL25vdGlmaWNhdGlvbnMudGVzdC50cyIsIm1hcHBpbmdzIjoiOztBQUFBLG1EQUFvRjtBQUVwRixRQUFRLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxFQUFFO0lBQ2pDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDYixNQUFjLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLEVBQVMsQ0FBQyxDQUFDO1FBQ3ZILE1BQWMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxHQUFXLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNyRixNQUFjLENBQUMsSUFBSSxHQUFHLENBQUMsR0FBVyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDckYsTUFBYyxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUM7UUFDbEMsTUFBYyxDQUFDLE1BQU0sR0FBRyxFQUFTLENBQUM7UUFDbEMsTUFBYyxDQUFDLFNBQVMsR0FBRyxFQUFTLENBQUM7UUFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsR0FBRyx1QkFBdUIsQ0FBQztJQUM5RCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxxQ0FBcUMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNuRCxNQUFNLE9BQU8sR0FBRyxFQUFFLFFBQVEsRUFBRSwwQkFBMEIsRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUN2RixNQUFNLElBQUEsNkJBQWEsRUFBQyxPQUFPLENBQUMsQ0FBQztRQUM3QixNQUFNLENBQUUsTUFBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDakQsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBSyxNQUFjLENBQUMsS0FBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZFLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsMEJBQTBCLENBQUMsQ0FBQztRQUMxRCxNQUFNLENBQUUsSUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1QyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxrQ0FBa0MsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNoRCxNQUFNLElBQUEsK0JBQWUsRUFBQywwQkFBMEIsQ0FBQyxDQUFDO1FBQ2xELE1BQU0sQ0FBRSxNQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUNqRCxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFLLE1BQWMsQ0FBQyxLQUFtQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO1FBQ3RFLE1BQU0sQ0FBRSxJQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzlDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHFCQUFxQixFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ25DLE1BQU0sSUFBQSxpQ0FBaUIsR0FBRSxDQUFDO1FBQzFCLE1BQU0sQ0FBRSxNQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUNqRCxNQUFNLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFLLE1BQWMsQ0FBQyxLQUFtQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO1FBQzlELE1BQU0sQ0FBRSxJQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2FkbWluL0RvY3VtZW50cy9BSTREZXZzLWZpbmFscHJvamVjdC9Gcm9udGVuZC9zcmMvYXBpL25vdGlmaWNhdGlvbnMudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzdWJzY3JpYmVQdXNoLCB1bnN1YnNjcmliZVB1c2gsIGxpc3RTdWJzY3JpcHRpb25zIH0gZnJvbSAnLi9ub3RpZmljYXRpb25zJztcblxuZGVzY3JpYmUoJ25vdGlmaWNhdGlvbnMgYXBpJywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAoZ2xvYmFsIGFzIGFueSkuZmV0Y2ggPSBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoeyBvazogdHJ1ZSwgc3RhdHVzOiAyMDAsIGpzb246IGFzeW5jICgpID0+ICh7IG9rOiB0cnVlIH0pIH0gYXMgYW55KTtcbiAgICAoZ2xvYmFsIGFzIGFueSkuYXRvYiA9IChiNjQ6IHN0cmluZykgPT4gQnVmZmVyLmZyb20oYjY0LCAnYmFzZTY0JykudG9TdHJpbmcoJ2JpbmFyeScpO1xuICAgIChnbG9iYWwgYXMgYW55KS5idG9hID0gKGJpbjogc3RyaW5nKSA9PiBCdWZmZXIuZnJvbShiaW4sICdiaW5hcnknKS50b1N0cmluZygnYmFzZTY0Jyk7XG4gICAgKGdsb2JhbCBhcyBhbnkpLmltcG9ydCA9IHVuZGVmaW5lZDtcbiAgICAoZ2xvYmFsIGFzIGFueSkud2luZG93ID0ge30gYXMgYW55O1xuICAgIChnbG9iYWwgYXMgYW55KS5uYXZpZ2F0b3IgPSB7fSBhcyBhbnk7XG4gICAgcHJvY2Vzcy5lbnYuVklURV9WQVBJRF9QVUJMSUNfS0VZID0gJ0JIVmFwaWRLZXlGYWtlX19fX19fXyc7XG4gIH0pO1xuXG4gIGl0KCdwb3N0cyBzdWJzY3JpcHRpb24gcGF5bG9hZCBkaXJlY3RseScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBwYXlsb2FkID0geyBlbmRwb2ludDogJ2h0dHBzOi8vcHVzaC5leGFtcGxlL3N1YicsIHAyNTZkaEtleTogJ3AnLCBhdXRoS2V5OiAnYScgfTtcbiAgICBhd2FpdCBzdWJzY3JpYmVQdXNoKHBheWxvYWQpO1xuICAgIGV4cGVjdCgoZ2xvYmFsIGFzIGFueSkuZmV0Y2gpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICBjb25zdCBbdXJsLCBpbml0XSA9ICgoZ2xvYmFsIGFzIGFueSkuZmV0Y2ggYXMgamVzdC5Nb2NrKS5tb2NrLmNhbGxzWzBdO1xuICAgIGV4cGVjdChTdHJpbmcodXJsKSkudG9Db250YWluKCcvbm90aWZpY2F0aW9ucy9zdWJzY3JpYmUnKTtcbiAgICBleHBlY3QoKGluaXQgYXMgYW55KS5tZXRob2QpLnRvQmUoJ1BPU1QnKTtcbiAgfSk7XG5cbiAgaXQoJ2RlbGV0ZXMgc3Vic2NyaXB0aW9uIGJ5IGVuZHBvaW50JywgYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IHVuc3Vic2NyaWJlUHVzaCgnaHR0cHM6Ly9wdXNoLmV4YW1wbGUvc3ViJyk7XG4gICAgZXhwZWN0KChnbG9iYWwgYXMgYW55KS5mZXRjaCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIGNvbnN0IFt1cmwsIGluaXRdID0gKChnbG9iYWwgYXMgYW55KS5mZXRjaCBhcyBqZXN0Lk1vY2spLm1vY2suY2FsbHNbMF07XG4gICAgZXhwZWN0KFN0cmluZyh1cmwpKS50b0NvbnRhaW4oJy9ub3RpZmljYXRpb25zL3Vuc3Vic2NyaWJlP2VuZHBvaW50PScpO1xuICAgIGV4cGVjdCgoaW5pdCBhcyBhbnkpLm1ldGhvZCkudG9CZSgnREVMRVRFJyk7XG4gIH0pO1xuXG4gIGl0KCdsaXN0cyBzdWJzY3JpcHRpb25zJywgYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGxpc3RTdWJzY3JpcHRpb25zKCk7XG4gICAgZXhwZWN0KChnbG9iYWwgYXMgYW55KS5mZXRjaCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIGNvbnN0IFt1cmwsIGluaXRdID0gKChnbG9iYWwgYXMgYW55KS5mZXRjaCBhcyBqZXN0Lk1vY2spLm1vY2suY2FsbHNbMF07XG4gICAgZXhwZWN0KFN0cmluZyh1cmwpKS50b0NvbnRhaW4oJy9ub3RpZmljYXRpb25zL3N1YnNjcmlwdGlvbnMnKTtcbiAgICBleHBlY3QoKGluaXQgYXMgYW55KS5tZXRob2QpLnRvQmUoJ0dFVCcpO1xuICB9KTtcbn0pO1xuXG5cbiJdLCJ2ZXJzaW9uIjozfQ==