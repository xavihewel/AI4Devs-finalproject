e0cfbeb20f6971f7ea60b1484075ecdd
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.subscribePush = subscribePush;
exports.unsubscribePush = unsubscribePush;
exports.listSubscriptions = listSubscriptions;
const env_1 = require("../env");
function getNotificationsBaseUrl() {
    // Notification service is exposed under /api at port 8085 in dev
    const base = env_1.env.VITE_API_NOTIFICATIONS || "http://localhost:8085/api";
    return `${base}/notifications`;
}
async function subscribePush(registrationOrPayload) {
    if (isPayload(registrationOrPayload)) {
        return fetch(`${getNotificationsBaseUrl()}/subscribe`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            credentials: "include",
            body: JSON.stringify(registrationOrPayload),
        });
    }
    const registration = registrationOrPayload;
    const existing = await registration.pushManager.getSubscription();
    const vapidPublicKey = env_1.env.VAPID_PUBLIC_KEY;
    if (!vapidPublicKey)
        throw new Error("Missing VAPID public key");
    const convertedVapidKey = urlBase64ToUint8Array(vapidPublicKey);
    const subscription = existing ||
        (await registration.pushManager.subscribe({
            userVisibleOnly: true,
            applicationServerKey: new Uint8Array(convertedVapidKey),
        }));
    const { endpoint, keys } = subscription.toJSON();
    const payload = {
        endpoint,
        p256dhKey: keys.p256dh,
        authKey: keys.auth,
    };
    return fetch(`${getNotificationsBaseUrl()}/subscribe`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        credentials: "include",
        body: JSON.stringify(payload),
    });
}
async function unsubscribePush(registrationOrEndpoint) {
    if (typeof registrationOrEndpoint === "string") {
        return fetch(`${getNotificationsBaseUrl()}/unsubscribe?endpoint=${encodeURIComponent(registrationOrEndpoint)}`, {
            method: "DELETE",
            credentials: "include",
        });
    }
    const registration = registrationOrEndpoint;
    const existing = await registration.pushManager.getSubscription();
    if (!existing) {
        return new Response(JSON.stringify({ message: "No subscription" }), { status: 200 });
    }
    const { endpoint } = existing.toJSON();
    const resp = await fetch(`${getNotificationsBaseUrl()}/unsubscribe?endpoint=${encodeURIComponent(endpoint)}`, {
        method: "DELETE",
        credentials: "include",
    });
    try {
        await existing.unsubscribe();
    }
    catch (_) { }
    return resp;
}
async function listSubscriptions() {
    return fetch(`${getNotificationsBaseUrl()}/subscriptions`, {
        method: "GET",
        credentials: "include",
    });
}
function urlBase64ToUint8Array(base64String) {
    const padding = "=".repeat((4 - (base64String.length % 4)) % 4);
    const base64 = (base64String + padding).replace(/-/g, "+").replace(/_/g, "/");
    const rawData = atob(base64);
    const outputArray = new Uint8Array(rawData.length);
    for (let i = 0; i < rawData.length; ++i) {
        outputArray[i] = rawData.charCodeAt(i);
    }
    return outputArray;
}
function isPayload(x) {
    return x && typeof x === "object" && typeof x.endpoint === "string" && typeof x.p256dhKey === "string" && typeof x.authKey === "string";
}
// duplicate legacy exports removed
//# sourceMappingURL=data:application/json;charset=utf-8;base64,