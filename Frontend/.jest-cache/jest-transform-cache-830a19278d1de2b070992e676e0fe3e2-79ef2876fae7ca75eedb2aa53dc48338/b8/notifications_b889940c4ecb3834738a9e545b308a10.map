{"file":"/Users/admin/Documents/AI4Devs-finalproject/Frontend/src/api/notifications.ts","mappings":"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","names":[],"sources":["/Users/admin/Documents/AI4Devs-finalproject/Frontend/src/api/notifications.ts"],"sourcesContent":["import { env } from \"../env\";\n\nexport type PushSubscriptionPayload = {\n  endpoint: string;\n  p256dhKey: string;\n  authKey: string;\n};\n\nfunction getNotificationsBaseUrl(): string {\n  // Notification service is exposed under /api at port 8085 in dev\n  const base = (env as any).VITE_API_NOTIFICATIONS || \"http://localhost:8085/api\";\n  return `${base}/notifications`;\n}\n\nexport async function subscribePush(registrationOrPayload: ServiceWorkerRegistration | PushSubscriptionPayload): Promise<Response> {\n  if (isPayload(registrationOrPayload)) {\n    return fetch(`${getNotificationsBaseUrl()}/subscribe`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      credentials: \"include\",\n      body: JSON.stringify(registrationOrPayload),\n    });\n  }\n\n  const registration = registrationOrPayload;\n  const existing = await registration.pushManager.getSubscription();\n  const vapidPublicKey = env.VAPID_PUBLIC_KEY;\n  if (!vapidPublicKey) throw new Error(\"Missing VAPID public key\");\n\n  const convertedVapidKey = urlBase64ToUint8Array(vapidPublicKey);\n  const subscription =\n    existing ||\n    (await registration.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: new Uint8Array(convertedVapidKey),\n    }));\n\n  const { endpoint, keys } = subscription.toJSON() as {\n    endpoint: string;\n    keys: { p256dh: string; auth: string };\n  };\n\n  const payload: PushSubscriptionPayload = {\n    endpoint,\n    p256dhKey: keys.p256dh,\n    authKey: keys.auth,\n  };\n\n  return fetch(`${getNotificationsBaseUrl()}/subscribe`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    credentials: \"include\",\n    body: JSON.stringify(payload),\n  });\n}\n\nexport async function unsubscribePush(registrationOrEndpoint: ServiceWorkerRegistration | string): Promise<Response> {\n  if (typeof registrationOrEndpoint === \"string\") {\n    return fetch(`${getNotificationsBaseUrl()}/unsubscribe?endpoint=${encodeURIComponent(registrationOrEndpoint)}`, {\n      method: \"DELETE\",\n      credentials: \"include\",\n    });\n  }\n  const registration = registrationOrEndpoint;\n  const existing = await registration.pushManager.getSubscription();\n  if (!existing) {\n    return new Response(JSON.stringify({ message: \"No subscription\" }), { status: 200 });\n  }\n  const { endpoint } = existing.toJSON() as { endpoint: string };\n  const resp = await fetch(`${getNotificationsBaseUrl()}/unsubscribe?endpoint=${encodeURIComponent(endpoint)}`, {\n    method: \"DELETE\",\n    credentials: \"include\",\n  });\n  try {\n    await existing.unsubscribe();\n  } catch (_) {}\n  return resp;\n}\n\nexport async function listSubscriptions(): Promise<Response> {\n  return fetch(`${getNotificationsBaseUrl()}/subscriptions`, {\n    method: \"GET\",\n    credentials: \"include\",\n  });\n}\n\nfunction urlBase64ToUint8Array(base64String: string): Uint8Array {\n  const padding = \"=\".repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding).replace(/-/g, \"+\").replace(/_/g, \"/\");\n  const rawData = atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n\nfunction isPayload(x: any): x is PushSubscriptionPayload {\n  return x && typeof x === \"object\" && typeof x.endpoint === \"string\" && typeof x.p256dhKey === \"string\" && typeof x.authKey === \"string\";\n}\n\n// duplicate legacy exports removed\n\n\n"],"version":3}