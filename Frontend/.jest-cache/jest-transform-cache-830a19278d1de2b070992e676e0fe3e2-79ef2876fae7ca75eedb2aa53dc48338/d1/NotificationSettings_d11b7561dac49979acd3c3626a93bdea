b63075f1fa8ee3e1006849c92ee40f26
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotificationSettings = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const react_i18next_1 = require("react-i18next");
const ui_1 = require("../ui");
const NotificationService_1 = require("../../services/NotificationService");
const env_1 = require("../../env");
/**
 * Component for managing push notification settings.
 * Follows Single Responsibility Principle: only handles notification settings UI.
 * Follows Dependency Inversion Principle: depends on NotificationService abstraction.
 */
const NotificationSettings = () => {
    const { t } = (0, react_i18next_1.useTranslation)('notifications');
    const [notificationService] = (0, react_1.useState)(() => new NotificationService_1.NotificationService(env_1.env.vapidPublicKey));
    const [isSupported, setIsSupported] = (0, react_1.useState)(false);
    const [isSubscribed, setIsSubscribed] = (0, react_1.useState)(false);
    const [isLoading, setIsLoading] = (0, react_1.useState)(false);
    const [error, setError] = (0, react_1.useState)(null);
    const [endpoint, setEndpoint] = (0, react_1.useState)(null);
    (0, react_1.useEffect)(() => {
        const initializeSettings = async () => {
            const supported = notificationService.isSupported();
            setIsSupported(supported);
            if (supported) {
                try {
                    const status = await notificationService.getSubscriptionStatus();
                    setIsSubscribed(status.isSubscribed);
                    setEndpoint(status.endpoint);
                }
                catch (err) {
                    console.error('Error getting subscription status:', err);
                }
            }
        };
        initializeSettings();
    }, [notificationService]);
    const handleSubscribe = async () => {
        setIsLoading(true);
        setError(null);
        try {
            const success = await notificationService.subscribe();
            if (success) {
                const status = await notificationService.getSubscriptionStatus();
                setIsSubscribed(status.isSubscribed);
                setEndpoint(status.endpoint);
            }
            else {
                setError(t('notifications.error'));
            }
        }
        catch (err) {
            console.error('Error subscribing to notifications:', err);
            setError(t('notifications.error'));
        }
        finally {
            setIsLoading(false);
        }
    };
    const handleUnsubscribe = async () => {
        setIsLoading(true);
        setError(null);
        try {
            const success = await notificationService.unsubscribe();
            if (success) {
                setIsSubscribed(false);
                setEndpoint(null);
            }
            else {
                setError(t('notifications.error'));
            }
        }
        catch (err) {
            console.error('Error unsubscribing from notifications:', err);
            setError(t('notifications.error'));
        }
        finally {
            setIsLoading(false);
        }
    };
    if (!isSupported) {
        return ((0, jsx_runtime_1.jsx)(ui_1.Card, { children: (0, jsx_runtime_1.jsx)(ui_1.CardContent, { children: (0, jsx_runtime_1.jsxs)("div", { className: "text-center py-8", children: [(0, jsx_runtime_1.jsx)("div", { className: "text-gray-500 mb-4", children: (0, jsx_runtime_1.jsx)("svg", { className: "w-12 h-12 mx-auto mb-4", fill: "none", stroke: "currentColor", viewBox: "0 0 24 24", children: (0, jsx_runtime_1.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M15 17h5l-5 5-5-5h5v-5a7.5 7.5 0 1 0-15 0v5h5l-5 5-5-5h5v-5a7.5 7.5 0 1 1 15 0v5z" }) }) }), (0, jsx_runtime_1.jsx)("h3", { className: "text-lg font-semibold text-gray-900 mb-2", children: t('notifications.notSupported') }), (0, jsx_runtime_1.jsx)("p", { className: "text-gray-600", children: t('notifications.notSupportedDescription') })] }) }) }));
    }
    return ((0, jsx_runtime_1.jsx)(ui_1.Card, { children: (0, jsx_runtime_1.jsx)(ui_1.CardContent, { children: (0, jsx_runtime_1.jsxs)("div", { className: "space-y-6", children: [(0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)("h3", { className: "text-lg font-semibold text-gray-900 mb-2", children: t('notifications.title') }), (0, jsx_runtime_1.jsx)("p", { className: "text-gray-600", children: t('notifications.description') })] }), error && ((0, jsx_runtime_1.jsx)("div", { className: "bg-red-50 border border-red-200 rounded-md p-4", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex", children: [(0, jsx_runtime_1.jsx)("div", { className: "flex-shrink-0", children: (0, jsx_runtime_1.jsx)("svg", { className: "h-5 w-5 text-red-400", viewBox: "0 0 20 20", fill: "currentColor", children: (0, jsx_runtime_1.jsx)("path", { fillRule: "evenodd", d: "M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z", clipRule: "evenodd" }) }) }), (0, jsx_runtime_1.jsx)("div", { className: "ml-3", children: (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-red-800", children: error }) })] }) })), isSubscribed ? ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-4", children: [(0, jsx_runtime_1.jsx)("div", { className: "bg-green-50 border border-green-200 rounded-md p-4", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex", children: [(0, jsx_runtime_1.jsx)("div", { className: "flex-shrink-0", children: (0, jsx_runtime_1.jsx)("svg", { className: "h-5 w-5 text-green-400", viewBox: "0 0 20 20", fill: "currentColor", children: (0, jsx_runtime_1.jsx)("path", { fillRule: "evenodd", d: "M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z", clipRule: "evenodd" }) }) }), (0, jsx_runtime_1.jsx)("div", { className: "ml-3", children: (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-green-800", children: t('notifications.subscribed') }) })] }) }), endpoint && ((0, jsx_runtime_1.jsxs)("div", { className: "text-sm text-gray-600", children: [(0, jsx_runtime_1.jsxs)("p", { className: "font-medium", children: [t('notifications.endpoint'), ":"] }), (0, jsx_runtime_1.jsx)("p", { className: "font-mono text-xs break-all", children: endpoint })] })), (0, jsx_runtime_1.jsx)(ui_1.Button, { variant: "secondary", onClick: handleUnsubscribe, disabled: isLoading, loading: isLoading, className: "w-full", children: isLoading ? t('notifications.unsubscribing') : t('notifications.disable') })] })) : ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-4", children: [(0, jsx_runtime_1.jsx)(ui_1.Button, { variant: "primary", onClick: handleSubscribe, disabled: isLoading, loading: isLoading, className: "w-full", children: isLoading ? t('notifications.subscribing') : t('notifications.enable') }), (0, jsx_runtime_1.jsx)("div", { className: "text-sm text-gray-600", children: (0, jsx_runtime_1.jsx)("p", { children: t('notifications.privacyNote') }) })] }))] }) }) }));
};
exports.NotificationSettings = NotificationSettings;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,