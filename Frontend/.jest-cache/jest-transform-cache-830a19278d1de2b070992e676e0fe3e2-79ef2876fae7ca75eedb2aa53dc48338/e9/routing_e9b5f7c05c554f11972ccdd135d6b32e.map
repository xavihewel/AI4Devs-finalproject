{"file":"/Users/admin/Documents/AI4Devs-finalproject/Frontend/src/api/routing.ts","mappings":"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","names":[],"sources":["/Users/admin/Documents/AI4Devs-finalproject/Frontend/src/api/routing.ts"],"sourcesContent":["/**\n * API client for routing operations.\n * Follows Single Responsibility Principle: only handles routing API calls.\n * Follows Dependency Inversion Principle: depends on abstractions (fetch).\n */\n\nexport interface LatLng {\n  lat: number;\n  lng: number;\n}\n\nexport interface RouteRequest {\n  origin: LatLng;\n  destination: LatLng;\n}\n\nexport interface RouteProperties {\n  distance: number;\n  duration: number;\n}\n\nexport interface RouteGeometry {\n  type: 'LineString';\n  coordinates: number[][];\n}\n\nexport interface RouteFeature {\n  type: 'Feature';\n  properties: RouteProperties;\n  geometry: RouteGeometry;\n}\n\nexport interface RouteResponse {\n  type: 'FeatureCollection';\n  features: RouteFeature[];\n}\n\nexport interface RouteError {\n  error: string;\n}\n\n/**\n * Service for fetching routing information from backend API.\n * Implements caching to reduce API calls and improve performance.\n * Follows Open/Closed Principle: extensible for new routing features.\n */\nexport class RoutingApiService {\n  private cache: Map<string, RouteResponse> = new Map();\n  private readonly baseUrl: string;\n\n  constructor(baseUrl: string = '/api') {\n    this.baseUrl = baseUrl;\n  }\n\n  /**\n   * Get route between two points.\n   * Returns cached result if available, otherwise fetches from API.\n   * Follows Strategy Pattern: can be extended with different routing strategies.\n   */\n  async getRoute(origin: LatLng, destination: LatLng): Promise<RouteResponse> {\n    const cacheKey = this.createCacheKey(origin, destination);\n    \n    // Check cache first\n    if (this.cache.has(cacheKey)) {\n      return this.cache.get(cacheKey)!;\n    }\n\n    try {\n      const response = await fetch(`${this.baseUrl}/routes`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          origin,\n          destination,\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData: RouteError = await response.json();\n        throw new Error(errorData.error || `HTTP ${response.status}`);\n      }\n\n      const routeData: RouteResponse = await response.json();\n      \n      // Cache successful response\n      this.cache.set(cacheKey, routeData);\n      \n      return routeData;\n\n    } catch (error) {\n      console.error('Error fetching route:', error);\n      // Return fallback route (straight line)\n      return this.createFallbackRoute(origin, destination);\n    }\n  }\n\n  /**\n   * Clear the route cache (useful for testing).\n   */\n  clearCache(): void {\n    this.cache.clear();\n  }\n\n  /**\n   * Create cache key from coordinates.\n   * Follows Value Object pattern: immutable key generation.\n   */\n  private createCacheKey(origin: LatLng, destination: LatLng): string {\n    return `${origin.lat.toFixed(6)},${origin.lng.toFixed(6)}->${destination.lat.toFixed(6)},${destination.lng.toFixed(6)}`;\n  }\n\n  /**\n   * Create a simple straight-line fallback route when API fails.\n   * Follows Fallback Strategy pattern.\n   */\n  private createFallbackRoute(origin: LatLng, destination: LatLng): RouteResponse {\n    const distance = this.calculateHaversineDistance(origin, destination);\n    const duration = distance / 13.89; // Assume 50 km/h = 13.89 m/s average speed\n\n    return {\n      type: 'FeatureCollection',\n      features: [\n        {\n          type: 'Feature',\n          properties: {\n            distance,\n            duration,\n          },\n          geometry: {\n            type: 'LineString',\n            coordinates: [\n              [origin.lat, origin.lng],\n              [destination.lat, destination.lng],\n            ],\n          },\n        },\n      ],\n    };\n  }\n\n  /**\n   * Calculate distance between two points using Haversine formula.\n   * Returns distance in meters.\n   */\n  private calculateHaversineDistance(origin: LatLng, destination: LatLng): number {\n    const R = 6371000; // Earth radius in meters\n    const dLat = this.toRadians(destination.lat - origin.lat);\n    const dLng = this.toRadians(destination.lng - origin.lng);\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n              Math.cos(this.toRadians(origin.lat)) * Math.cos(this.toRadians(destination.lat)) *\n              Math.sin(dLng / 2) * Math.sin(dLng / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  }\n\n  /**\n   * Convert degrees to radians.\n   */\n  private toRadians(degrees: number): number {\n    return degrees * (Math.PI / 180);\n  }\n}\n\n// Singleton instance for the application\nexport const routingApiService = new RoutingApiService();\n"],"version":3}