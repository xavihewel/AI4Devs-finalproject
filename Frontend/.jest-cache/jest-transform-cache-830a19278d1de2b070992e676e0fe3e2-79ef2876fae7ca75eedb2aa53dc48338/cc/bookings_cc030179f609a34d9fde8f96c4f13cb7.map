{"file":"/Users/admin/Documents/AI4Devs-finalproject/Frontend/src/api/bookings.ts","mappings":";;;;;;AAAA,kDAA0B;AAC1B,+CAA+C;AAC/C,gCAA6B;AAG7B,MAAM,WAAW,GAAG,eAAK,CAAC,MAAM,CAAC;IAC/B,OAAO,EAAE,SAAG,CAAC,iBAAiB;CAC/B,CAAC,CAAC;AAEH,WAAW,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;IACpD,MAAM,QAAQ,GAAG,IAAA,sBAAW,GAAE,CAAC;IAC/B,IAAI,QAAQ,EAAE,CAAC;QACb,IAAI,CAAC;YACH,MAAM,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QAChC,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC,CAAA,CAAC;QACd,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;QAC7B,IAAI,KAAK,EAAE,CAAC;YACV,MAAM,CAAC,OAAO,CAAC,aAAa,GAAG,UAAU,KAAK,EAAE,CAAC;QACnD,CAAC;IACH,CAAC;IACD,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC,CAAC;AAEH,MAAa,eAAe;IAC1B;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,aAAa;QACxB,MAAM,QAAQ,GAAG,MAAM,WAAW,CAAC,GAAG,CAAe,WAAW,CAAC,CAAC;QAClE,OAAO,QAAQ,CAAC,IAAI,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,EAAU;QACpC,MAAM,QAAQ,GAAG,MAAM,WAAW,CAAC,GAAG,CAAa,aAAa,EAAE,EAAE,CAAC,CAAC;QACtE,OAAO,QAAQ,CAAC,IAAI,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,WAA6B;QACtD,MAAM,QAAQ,GAAG,MAAM,WAAW,CAAC,IAAI,CAAa,WAAW,EAAE,WAAW,CAAC,CAAC;QAC9E,OAAO,QAAQ,CAAC,IAAI,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,EAAU;QACpC,MAAM,QAAQ,GAAG,MAAM,WAAW,CAAC,GAAG,CAAa,aAAa,EAAE,UAAU,CAAC,CAAC;QAC9E,OAAO,QAAQ,CAAC,IAAI,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,EAAU;QACnC,MAAM,QAAQ,GAAG,MAAM,WAAW,CAAC,GAAG,CAAa,aAAa,EAAE,SAAS,CAAC,CAAC;QAC7E,OAAO,QAAQ,CAAC,IAAI,CAAC;IACvB,CAAC;CACF;AAxCD,0CAwCC","names":[],"sources":["/Users/admin/Documents/AI4Devs-finalproject/Frontend/src/api/bookings.ts"],"sourcesContent":["import axios from 'axios';\nimport { getKeycloak } from '../auth/keycloak';\nimport { env } from '../env';\nimport type { BookingDto, BookingCreateDto } from '../types/api';\n\nconst bookingsApi = axios.create({\n  baseURL: env.bookingApiBaseUrl,\n});\n\nbookingsApi.interceptors.request.use(async (config) => {\n  const keycloak = getKeycloak();\n  if (keycloak) {\n    try {\n      await keycloak.updateToken(5);\n    } catch (_) {}\n    const token = keycloak.token;\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n  }\n  return config;\n});\n\nexport class BookingsService {\n  /**\n   * Get all bookings for the current user\n   */\n  static async getMyBookings(): Promise<BookingDto[]> {\n    const response = await bookingsApi.get<BookingDto[]>('/bookings');\n    return response.data;\n  }\n\n  /**\n   * Get a specific booking by ID\n   */\n  static async getBookingById(id: string): Promise<BookingDto> {\n    const response = await bookingsApi.get<BookingDto>(`/bookings/${id}`);\n    return response.data;\n  }\n\n  /**\n   * Create a new booking\n   */\n  static async createBooking(bookingData: BookingCreateDto): Promise<BookingDto> {\n    const response = await bookingsApi.post<BookingDto>('/bookings', bookingData);\n    return response.data;\n  }\n\n  /**\n   * Confirm a booking\n   */\n  static async confirmBooking(id: string): Promise<BookingDto> {\n    const response = await bookingsApi.put<BookingDto>(`/bookings/${id}/confirm`);\n    return response.data;\n  }\n\n  /**\n   * Cancel a booking\n   */\n  static async cancelBooking(id: string): Promise<BookingDto> {\n    const response = await bookingsApi.put<BookingDto>(`/bookings/${id}/cancel`);\n    return response.data;\n  }\n}\n"],"version":3}