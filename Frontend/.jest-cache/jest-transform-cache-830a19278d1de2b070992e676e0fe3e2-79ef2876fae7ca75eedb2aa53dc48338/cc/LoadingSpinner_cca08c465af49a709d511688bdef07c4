829ea9e7ff0ca54c6940ff15df8efd88
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoadingOverlay = exports.LoadingSpinner = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importDefault(require("react"));
const LoadingSpinner = ({ size = 'md', className = '', }) => {
    const sizeClasses = {
        sm: 'h-4 w-4',
        md: 'h-8 w-8',
        lg: 'h-12 w-12',
    };
    const classes = `animate-spin text-primary-600 ${sizeClasses[size]} ${className}`;
    return ((0, jsx_runtime_1.jsxs)("svg", { className: classes, role: "status", fill: "none", viewBox: "0 0 24 24", "data-testid": "loading-spinner", children: [(0, jsx_runtime_1.jsx)("circle", { className: "opacity-25", cx: "12", cy: "12", r: "10", stroke: "currentColor", strokeWidth: "4" }), (0, jsx_runtime_1.jsx)("path", { className: "opacity-75", fill: "currentColor", d: "M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" })] }));
};
exports.LoadingSpinner = LoadingSpinner;
const LoadingOverlay = ({ isLoading, children, message = 'Cargando...', }) => {
    if (!isLoading) {
        return (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: children });
    }
    return ((0, jsx_runtime_1.jsxs)("div", { className: "relative", children: [children, (0, jsx_runtime_1.jsx)("div", { className: "absolute inset-0 bg-white bg-opacity-75 flex items-center justify-center z-10", children: (0, jsx_runtime_1.jsxs)("div", { className: "flex flex-col items-center space-y-2", children: [(0, jsx_runtime_1.jsx)(exports.LoadingSpinner, { size: "lg" }), (0, jsx_runtime_1.jsx)("p", { className: "text-gray-600", children: message })] }) })] }));
};
exports.LoadingOverlay = LoadingOverlay;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2FkbWluL0RvY3VtZW50cy9BSTREZXZzLWZpbmFscHJvamVjdC9Gcm9udGVuZC9zcmMvY29tcG9uZW50cy91aS9Mb2FkaW5nU3Bpbm5lci50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLGtEQUEwQjtBQU9uQixNQUFNLGNBQWMsR0FBa0MsQ0FBQyxFQUM1RCxJQUFJLEdBQUcsSUFBSSxFQUNYLFNBQVMsR0FBRyxFQUFFLEdBQ2YsRUFBRSxFQUFFO0lBQ0gsTUFBTSxXQUFXLEdBQUc7UUFDbEIsRUFBRSxFQUFFLFNBQVM7UUFDYixFQUFFLEVBQUUsU0FBUztRQUNiLEVBQUUsRUFBRSxXQUFXO0tBQ2hCLENBQUM7SUFFRixNQUFNLE9BQU8sR0FBRyxpQ0FBaUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsRUFBRSxDQUFDO0lBRWxGLE9BQU8sQ0FDTCxpQ0FBSyxTQUFTLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBQyxRQUFRLEVBQUMsSUFBSSxFQUFDLE1BQU0sRUFBQyxPQUFPLEVBQUMsV0FBVyxpQkFBYSxpQkFBaUIsYUFDbEcsbUNBQ0UsU0FBUyxFQUFDLFlBQVksRUFDdEIsRUFBRSxFQUFDLElBQUksRUFDUCxFQUFFLEVBQUMsSUFBSSxFQUNQLENBQUMsRUFBQyxJQUFJLEVBQ04sTUFBTSxFQUFDLGNBQWMsRUFDckIsV0FBVyxFQUFDLEdBQUcsR0FDZixFQUNGLGlDQUNFLFNBQVMsRUFBQyxZQUFZLEVBQ3RCLElBQUksRUFBQyxjQUFjLEVBQ25CLENBQUMsRUFBQyxpSEFBaUgsR0FDbkgsSUFDRSxDQUNQLENBQUM7QUFDSixDQUFDLENBQUM7QUE3QlcsUUFBQSxjQUFjLGtCQTZCekI7QUFRSyxNQUFNLGNBQWMsR0FBa0MsQ0FBQyxFQUM1RCxTQUFTLEVBQ1QsUUFBUSxFQUNSLE9BQU8sR0FBRyxhQUFhLEdBQ3hCLEVBQUUsRUFBRTtJQUNILElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNmLE9BQU8sMkRBQUcsUUFBUSxHQUFJLENBQUM7SUFDekIsQ0FBQztJQUVELE9BQU8sQ0FDTCxpQ0FBSyxTQUFTLEVBQUMsVUFBVSxhQUN0QixRQUFRLEVBQ1QsZ0NBQUssU0FBUyxFQUFDLCtFQUErRSxZQUM1RixpQ0FBSyxTQUFTLEVBQUMsc0NBQXNDLGFBQ25ELHVCQUFDLHNCQUFjLElBQUMsSUFBSSxFQUFDLElBQUksR0FBRyxFQUM1Qiw4QkFBRyxTQUFTLEVBQUMsZUFBZSxZQUFFLE9BQU8sR0FBSyxJQUN0QyxHQUNGLElBQ0YsQ0FDUCxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBcEJXLFFBQUEsY0FBYyxrQkFvQnpCIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9hZG1pbi9Eb2N1bWVudHMvQUk0RGV2cy1maW5hbHByb2plY3QvRnJvbnRlbmQvc3JjL2NvbXBvbmVudHMvdWkvTG9hZGluZ1NwaW5uZXIudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmludGVyZmFjZSBMb2FkaW5nU3Bpbm5lclByb3BzIHtcbiAgc2l6ZT86ICdzbScgfCAnbWQnIHwgJ2xnJztcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgTG9hZGluZ1NwaW5uZXI6IFJlYWN0LkZDPExvYWRpbmdTcGlubmVyUHJvcHM+ID0gKHtcbiAgc2l6ZSA9ICdtZCcsXG4gIGNsYXNzTmFtZSA9ICcnLFxufSkgPT4ge1xuICBjb25zdCBzaXplQ2xhc3NlcyA9IHtcbiAgICBzbTogJ2gtNCB3LTQnLFxuICAgIG1kOiAnaC04IHctOCcsXG4gICAgbGc6ICdoLTEyIHctMTInLFxuICB9O1xuICBcbiAgY29uc3QgY2xhc3NlcyA9IGBhbmltYXRlLXNwaW4gdGV4dC1wcmltYXJ5LTYwMCAke3NpemVDbGFzc2VzW3NpemVdfSAke2NsYXNzTmFtZX1gO1xuICBcbiAgcmV0dXJuIChcbiAgICA8c3ZnIGNsYXNzTmFtZT17Y2xhc3Nlc30gcm9sZT1cInN0YXR1c1wiIGZpbGw9XCJub25lXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIGRhdGEtdGVzdGlkPVwibG9hZGluZy1zcGlubmVyXCI+XG4gICAgICA8Y2lyY2xlXG4gICAgICAgIGNsYXNzTmFtZT1cIm9wYWNpdHktMjVcIlxuICAgICAgICBjeD1cIjEyXCJcbiAgICAgICAgY3k9XCIxMlwiXG4gICAgICAgIHI9XCIxMFwiXG4gICAgICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gICAgICAgIHN0cm9rZVdpZHRoPVwiNFwiXG4gICAgICAvPlxuICAgICAgPHBhdGhcbiAgICAgICAgY2xhc3NOYW1lPVwib3BhY2l0eS03NVwiXG4gICAgICAgIGZpbGw9XCJjdXJyZW50Q29sb3JcIlxuICAgICAgICBkPVwiTTQgMTJhOCA4IDAgMDE4LThWMEM1LjM3MyAwIDAgNS4zNzMgMCAxMmg0em0yIDUuMjkxQTcuOTYyIDcuOTYyIDAgMDE0IDEySDBjMCAzLjA0MiAxLjEzNSA1LjgyNCAzIDcuOTM4bDMtMi42NDd6XCJcbiAgICAgIC8+XG4gICAgPC9zdmc+XG4gICk7XG59O1xuXG5pbnRlcmZhY2UgTG9hZGluZ092ZXJsYXlQcm9wcyB7XG4gIGlzTG9hZGluZzogYm9vbGVhbjtcbiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZTtcbiAgbWVzc2FnZT86IHN0cmluZztcbn1cblxuZXhwb3J0IGNvbnN0IExvYWRpbmdPdmVybGF5OiBSZWFjdC5GQzxMb2FkaW5nT3ZlcmxheVByb3BzPiA9ICh7XG4gIGlzTG9hZGluZyxcbiAgY2hpbGRyZW4sXG4gIG1lc3NhZ2UgPSAnQ2FyZ2FuZG8uLi4nLFxufSkgPT4ge1xuICBpZiAoIWlzTG9hZGluZykge1xuICAgIHJldHVybiA8PntjaGlsZHJlbn08Lz47XG4gIH1cbiAgXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJyZWxhdGl2ZVwiPlxuICAgICAge2NoaWxkcmVufVxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJhYnNvbHV0ZSBpbnNldC0wIGJnLXdoaXRlIGJnLW9wYWNpdHktNzUgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgei0xMFwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgaXRlbXMtY2VudGVyIHNwYWNlLXktMlwiPlxuICAgICAgICAgIDxMb2FkaW5nU3Bpbm5lciBzaXplPVwibGdcIiAvPlxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQtZ3JheS02MDBcIj57bWVzc2FnZX08L3A+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIl0sInZlcnNpb24iOjN9