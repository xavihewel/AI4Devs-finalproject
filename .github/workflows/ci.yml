name: CI Pipeline

on:
  push:
    branches: [ main, develop, FEATURE/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Run Backend Tests
      run: |
        cd Backend
        mvn clean test -Dspring.profiles.active=test
      env:
        DATABASE_URL: jdbc:postgresql://localhost:5432/testdb
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: Frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd Frontend
        npm ci
    
    - name: Run Frontend Tests
      run: |
        cd Frontend
        npm test -- --coverage --watchAll=false
    
    - name: Build Frontend
      run: |
        cd Frontend
        npm run build

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: Frontend/package-lock.json
    
    - name: Start Infrastructure
      run: |
        cd Backend
        mvn clean package -DskipTests
        docker-compose up -d postgres redis keycloak mailhog
        sleep 30
    
    - name: Start Backend Services
      run: |
        cd Backend
        mvn exec:java -Dexec.mainClass="com.bonareago.trips.TripsApplication" &
        mvn exec:java -Dexec.mainClass="com.bonareago.users.UsersApplication" &
        mvn exec:java -Dexec.mainClass="com.bonareago.booking.BookingApplication" &
        mvn exec:java -Dexec.mainClass="com.bonareago.matching.MatchingApplication" &
        mvn exec:java -Dexec.mainClass="com.bonareago.notifications.NotificationApplication" &
        sleep 60
    
    - name: Install Frontend Dependencies
      run: |
        cd Frontend
        npm ci
    
    - name: Build Frontend
      run: |
        cd Frontend
        npm run build
    
    - name: Start Frontend
      run: |
        cd Frontend
        npm run preview &
        sleep 10
    
    - name: Run E2E Tests
      run: |
        cd Frontend
        CYPRESS_authDisabled=true npm run test:e2e:bypass:all
      env:
        CYPRESS_baseUrl: http://localhost:4173

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: Frontend/package-lock.json
    
    - name: Frontend Security Audit
      run: |
        cd Frontend
        npm audit --audit-level=moderate
    
    - name: Backend Security Scan
      run: |
        cd Backend
        mvn org.owasp:dependency-check-maven:check

  docker-build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [backend-tests, frontend-tests, e2e-tests, security-scan]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Backend images
      run: |
        cd Backend
        docker build -t ghcr.io/${{ github.repository }}/auth-service:latest ./auth-service
        docker build -t ghcr.io/${{ github.repository }}/users-service:latest ./users-service
        docker build -t ghcr.io/${{ github.repository }}/trips-service:latest ./trips-service
        docker build -t ghcr.io/${{ github.repository }}/booking-service:latest ./booking-service
        docker build -t ghcr.io/${{ github.repository }}/matching-service:latest ./matching-service
        docker build -t ghcr.io/${{ github.repository }}/notification-service:latest ./notification-service
        
        docker push ghcr.io/${{ github.repository }}/auth-service:latest
        docker push ghcr.io/${{ github.repository }}/users-service:latest
        docker push ghcr.io/${{ github.repository }}/trips-service:latest
        docker push ghcr.io/${{ github.repository }}/booking-service:latest
        docker push ghcr.io/${{ github.repository }}/matching-service:latest
        docker push ghcr.io/${{ github.repository }}/notification-service:latest
    
    - name: Build and push Frontend image
      run: |
        cd Frontend
        docker build -t ghcr.io/${{ github.repository }}/frontend:latest .
        docker push ghcr.io/${{ github.repository }}/frontend:latest