name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: app
          POSTGRES_USER: app
          POSTGRES_DB: app
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Run Backend Tests
      run: |
        cd Backend
        mvn clean test -DskipITs=false -DskipTests=false
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: app
        POSTGRES_USER: app
        POSTGRES_PASSWORD: app

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: Frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd Frontend
        npm ci
    
    - name: Run Frontend Unit Tests
      run: |
        cd Frontend
        npm run test:ci
    
    - name: Build Frontend
      run: |
        cd Frontend
        npm run build

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: Frontend/package-lock.json
    
    - name: Install Frontend dependencies
      run: |
        cd Frontend
        npm ci
    
    - name: Start Infrastructure
      run: |
        docker-compose --profile infra up -d
        sleep 30
    
    - name: Run Migrations
      run: |
        ./scripts/migrate.sh
    
    - name: Setup Keycloak
      run: |
        ./scripts/setup-keycloak.sh
    
    - name: Start Services
      run: |
        docker-compose --profile services up -d
        sleep 60
    
    - name: Verify Services
      run: |
        ./scripts/verify-all.sh
    
    - name: Run E2E Tests
      uses: cypress-io/github-action@v6
      with:
        working-directory: Frontend
        wait-on: 'http://localhost:3000'
        wait-on-timeout: 120
        browser: chrome
        record: false
        parallel: false
      env:
        CYPRESS_baseUrl: http://localhost:3000
        CYPRESS_keycloakUrl: http://localhost:8080
        CYPRESS_apiUrl: http://localhost:8081
    
    - name: Upload E2E Screenshots
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots
        path: Frontend/cypress/screenshots
    
    - name: Upload E2E Videos
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-videos
        path: Frontend/cypress/videos

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'covoituraje'
        path: '.'
        format: 'HTML'
        args: >
          --enableRetired
          --enableExperimental
          --out reports/
          --scan Backend/
    
    - name: Upload Security Report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: reports/

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: Frontend/package-lock.json
    
    - name: Build Backend
      run: |
        cd Backend
        mvn clean package -DskipTests
    
    - name: Build Frontend
      run: |
        cd Frontend
        npm ci
        npm run build
    
    - name: Build Docker Images
      run: |
        docker-compose build
    
    - name: Deploy to Staging
      run: |
        echo "Deploy to staging environment"
        # Add actual deployment commands here
